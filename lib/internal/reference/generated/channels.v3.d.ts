/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/channels": {
        /**
         * Returns a list of *Channels*.
         *
         * Will always return the default BigCommerce storefront with an ID of `1`. This storefront is created by default when you provision a BigCommerce store.
         */
        readonly get: operations["listChannels"];
        /** Creates a *Channel*. */
        readonly post: operations["createChannel"];
    };
    readonly "/channels/{channel_id}": {
        /** Returns a *Channel*. Channel ID `1` returns the default BigCommerce storefront. */
        readonly get: operations["getChannel"];
        /**
         * Updates a *Channel*.
         *
         * ## Updatable Fields
         *
         * The following fields can be updated.
         * * `name`
         * * `external_id`
         * * `status`
         * * `is_listable_from_ui`
         * * `is_visible`
         * * `is_enabled`
         * * `config_meta`
         *
         *
         * > ### Note
         * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
         * > * `platform` and `type` cannot be updated after a channel is created.
         * > * A channel with status `deleted` or `terminated` cannot be updated.
         */
        readonly put: operations["updateChannel"];
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
    };
    readonly "/channels/{channel_id}/active-theme": {
        /** Returns active theme details for a specific channel. */
        readonly get: operations["getChannelActiveTheme"];
    };
    readonly "/channels/currency-assignments": {
        /** Returns a list of currency assignments for all channels. */
        readonly get: operations["listAllCurrencyAssignments"];
        /** Updates enabled currencies and default currency for multiple channels. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
        readonly put: operations["updateMultipleChannelsCurrencyAssignments"];
        /** Sets enabled currencies and default currency for multiple channels. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
        readonly post: operations["createMultipleChannelsCurrencyAssignments"];
    };
    readonly "/channels/{channel_id}/currency-assignments": {
        /** Returns a list of currency assignments for a specific channel. */
        readonly get: operations["getSingleChannelCurrencyAssignments"];
        /** Updates enabled currencies and default currency for a specific channel. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
        readonly put: operations["updateSingleChannelCurrencyAssignments"];
        /** Sets enabled currencies and default currency for a specific channel. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
        readonly post: operations["createSingleChannelCurrencyAssignments"];
        /** Deletes currency assignments for a specific channel. Once done, this channel will inherit the storeâ€™s currency settings. */
        readonly delete: operations["deleteSingleChannelCurrencyAssignments"];
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
    };
    readonly "/channels/{channel_id}/listings": {
        /** Returns a list of all *Channel Listings* for a specific channel. Note that if the *Channel* is not found or there is no listing associated to the *Channel*, it will return a 200 response with empty data. */
        readonly get: operations["listChannelListings"];
        /**
         * Updates one or more *Channel Listings* for a specific channel.
         *
         * > ### Note
         * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
         * > * If a new variant is provided, the API will append the variant to the list. If a variant already exists, the API will update the existing variant. Other variants that are not provided in the payload remains unchanged.
         * > * If `listing_id` does not exist, the API will return a 200 response with empty data.
         * > * `listing_id` is required and cannot be less than or equal to zero.
         * > * `product_id` cannot be updated after a channel listing is created.
         * > * `product_id` of a variant must match the `product_id` of the channel listing.
         */
        readonly put: operations["updateChannelListings"];
        /** Creates one or more *Channel Listings* for a specific channel. */
        readonly post: operations["createChannelListings"];
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
    };
    readonly "/channels/{channel_id}/listings/{listing_id}": {
        /** Returns a *Channel Listing* for a specific channel. */
        readonly get: operations["getChannelListing"];
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                /** The ID of a channel listing. */
                readonly listing_id: components["parameters"]["listing_id_path_param"];
            };
        };
    };
    readonly "/channels/{channel_id}/site": {
        /**
         * Alias of GET /sites?channel_id=channel_id
         *
         * Returns site data for given channel.
         */
        readonly get: operations["get-channel-site"];
        /** Updates a site for provided channel. */
        readonly put: operations["put-channel-site"];
        /** Alias of POST `/sites`. Creates a site for provided channel. */
        readonly post: operations["postChannelSite"];
        /** Deletes the Channel's site. */
        readonly delete: {
            readonly parameters: {
                readonly path: {
                    readonly channel_id: string;
                };
            };
            readonly responses: {
                readonly 200: {
                    readonly content: {
                        readonly "application/json": {
                            readonly [key: string]: any;
                        };
                    };
                };
            };
        };
        readonly parameters: {
            readonly path: {
                readonly channel_id: string;
            };
        };
    };
}
export interface components {
    readonly schemas: {
        /** The ID of the channel. */
        readonly ChannelId: number;
        /** The ID of the channel associated with this channel listing. */
        readonly ChannelIdForListing: number;
        /** The ID of the channel listing that has been created, returned, or updated. */
        readonly ListingId: number;
        /** The ID of the product associated with this channel listing. */
        readonly ProductId: number;
        /** The ID of the product variant associated with this channel listing. */
        readonly VariantId: number;
        /** Associated ID within a system / platform outside of BC. */
        readonly ExternalId: string;
        /** Indicates if a channel can create listings from the BigCommerce UI. Default value for this field is based on the channel type and platform combination if not specified on create. */
        readonly IsListableFromUI: boolean;
        /** Indicates if a channel is visible within the BigCommerce merchant admin UI (control panel). If `false`, the channel will not show in Channel Manager nor in any channels dropdown throughout the UI. Default value for this field is `true` if not specified on create. */
        readonly IsVisible: boolean;
        /** This field was originally used to turn on/off a channel but is deprecated. `status` should be used in place of `is_enabled`. Channel with `status` of `prelaunch`, `active`, or `connected` will have `is_enabled` set to `true`. Channel with `status` of `inactive`, `disconnected`, `archived`, `deleted`, or `terminated` will have `is_enabled` set to `false`. */
        readonly IsEnabled: boolean;
        /** The status of the channel; channel `type`, `platform`, and `status` must be a [valid combination](https://developer.bigcommerce.com/api-reference/store-management/channels#status). `terminated` is not valid for `PUT` or `POST` requests. `deleted` is not valid for `POST` requests. */
        readonly ChannelStatus: "active" | "prelaunch" | "inactive" | "connected" | "disconnected" | "archived" | "deleted" | "terminated";
        /** Name of the channel as it will appear to merchants in the control panel. */
        readonly ChannelName: string;
        /** The type of channel; channel `platform` and `type` must be a [valid combination](https://developer.bigcommerce.com/api-reference/store-management/channels#platform). */
        readonly ChannelType: "pos" | "marketplace" | "storefront" | "marketing";
        /** The name of the platform for the channel; channel `platform` and `type` must be a [valid combination](https://developer.bigcommerce.com/api-reference/store-management/channels#platform). */
        readonly ChannelPlatform: string;
        /** Date on which the channel was first created. */
        readonly ChannelDateCreated: string;
        /** Date on which the channel was most recently changed. */
        readonly ChannelDateModified: string;
        /** Link to the platform icon. */
        readonly IconUrl: string;
        /** Currencies that are enabled for the given channel in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three character alphabetic format. */
        readonly EnabledCurrencies: readonly string[];
        /** Default currency for the channel in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three character alphabetic format. Will be used on storefront when other currencies cannot. */
        readonly DefaultCurrency: string;
        /** Name of the product for this channel listing specifically. This is an optional field that can be used to override the product name in the catalog. */
        readonly ChannelProductName: string;
        /** Name of the product variant for this channel listing specifically. This is an optional field that can be used to override the name of the product variant in the catalog. */
        readonly ChannelProductVariantName: string;
        /** Description of the product for this channel listing specifically. This is an optional field that can be used to override the product description in the catalog. */
        readonly ChannelProductDescription: string;
        /** Description of the product variant for this channel listing specifically. This is an optional field that can be used to override the description of the product variant in the catalog. */
        readonly ChannelProductVariantDescription: string;
        /** Date on which the channel listing was first created. */
        readonly ChannelListingDateCreated: string;
        /** Date on which the channel listing variant was first created. */
        readonly ChannelListingVariantDateCreated: string;
        /** Date on which the channel listing was most recently changed. */
        readonly ChannelListingDateModified: string;
        /** Date on which the channel listing variant was most recently changed. */
        readonly ChannelListingVariantDateModified: string;
        /** The state of the product assignment or channel listing. */
        readonly ListingState: "active" | "disabled" | "error" | "pending" | "pending_disable" | "pending_delete" | "partially_rejected" | "queued" | "rejected" | "submitted" | "deleted";
        /** The state of the channel listing variant. */
        readonly VariantState: "active" | "disabled" | "error" | "pending" | "pending_disable" | "pending_delete" | "queued" | "rejected" | "submitted" | "deleted";
        /** Optional channel configuration object. */
        readonly ChannelConfigMeta: {
            /** A [channel app](https://developer.bigcommerce.com/api-docs/channels/overview#channel-apps) config object for optionally configuring the channel's user interface in the control panel. */
            readonly app?: {
                /** The unique `id` given to an app registered in [DevTools](https://devtools.bigcommerce.com/); used to create links to the app in channel manager. `app.id` is optional; however, if you're building an app that creates or manages a channel, we recommend including it to ensure the user interface in the control panel works properly. Select partners who are promoted in the Channel Manager must build an app, and include the app ID in the create channel request. [Learn how to find an App''s ID](https://developer.bigcommerce.com/api-docs/apps/tutorials/id). */
                readonly id?: number;
                /** If set, when the app is loaded within the control panel, the navigation `sections` will be directly embedded in the control panel navigation. */
                readonly sections?: readonly {
                    /** The title of the navigation section. */
                    readonly title?: string;
                    /** The value that will be passed to the app's iFrame in the URL and will allow the app to display the appropriate section within the app iFrame in the control panel. */
                    readonly query_path?: string;
                }[];
            };
        };
        /** Details about currency assignments for a specific channel. */
        readonly CurrencyNotRequiredWithChannelId: {
            readonly channel_id?: components["schemas"]["ChannelId"];
            readonly enabled_currencies?: components["schemas"]["EnabledCurrencies"];
            readonly default_currency?: components["schemas"]["DefaultCurrency"];
        };
        /** Details about currency assignments for a specific channel. */
        readonly CurrencyRequiredWithChannelId: {
            readonly channel_id: components["schemas"]["ChannelId"];
            readonly enabled_currencies: components["schemas"]["EnabledCurrencies"];
            readonly default_currency: components["schemas"]["DefaultCurrency"];
        };
        /** Details about currency assignments for a specific channel. */
        readonly CurrencyRequiredWithoutChannelId: {
            readonly enabled_currencies: components["schemas"]["EnabledCurrencies"];
            readonly default_currency: components["schemas"]["DefaultCurrency"];
        };
        readonly CreateChannelReq: {
            readonly config_meta?: components["schemas"]["ChannelConfigMeta"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly is_enabled?: components["schemas"]["IsEnabled"];
            readonly status?: components["schemas"]["ChannelStatus"];
            readonly name: components["schemas"]["ChannelName"];
            readonly type: components["schemas"]["ChannelType"];
            readonly platform: components["schemas"]["ChannelPlatform"];
        };
        readonly UpdateChannelReq: {
            readonly config_meta?: components["schemas"]["ChannelConfigMeta"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly is_enabled?: components["schemas"]["IsEnabled"];
            readonly name?: components["schemas"]["ChannelName"];
            readonly status?: components["schemas"]["ChannelStatus"];
        };
        readonly UpsertMultipleChannelsCurrencyAssignmentsReq: readonly components["schemas"]["CurrencyRequiredWithChannelId"][];
        readonly CreateMultipleListingsReq: readonly components["schemas"]["UpsertListingWithoutListingIdReq"][];
        readonly UpdateMultipleListingsReq: readonly components["schemas"]["UpsertListingWithListingIdReq"][];
        /** Details about assigning a product to a specific channel. */
        readonly UpsertListingWithoutListingIdReq: {
            readonly product_id: components["schemas"]["ProductId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state: components["schemas"]["ListingState"];
            readonly name?: components["schemas"]["ChannelProductName"];
            readonly description?: components["schemas"]["ChannelProductDescription"];
            readonly variants: components["schemas"]["ChannelProductMultipleVariants"];
        };
        /** Details about assigning a product to a specific channel. */
        readonly UpsertListingWithListingIdReq: {
            readonly listing_id: components["schemas"]["ListingId"];
            readonly product_id: components["schemas"]["ProductId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state: components["schemas"]["ListingState"];
            readonly name?: components["schemas"]["ChannelProductName"];
            readonly description?: components["schemas"]["ChannelProductDescription"];
            readonly variants: components["schemas"]["ChannelProductMultipleVariants"];
        };
        readonly ChannelProductMultipleVariants: readonly components["schemas"]["ChannelProductVariantPartial"][];
        /** Details about a variant of the product for this channel listing. */
        readonly ChannelProductVariantPartial: {
            readonly product_id: components["schemas"]["ProductId"];
            readonly variant_id: components["schemas"]["VariantId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state: components["schemas"]["VariantState"];
            readonly name?: components["schemas"]["ChannelProductVariantName"];
            readonly description?: components["schemas"]["ChannelProductVariantDescription"];
        };
        /** Details about a variant of the product for this channel listing. */
        readonly ChannelProductVariantFull: {
            readonly channel_id?: components["schemas"]["ChannelIdForListing"];
            readonly product_id?: components["schemas"]["ProductId"];
            readonly variant_id?: components["schemas"]["VariantId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state?: components["schemas"]["VariantState"];
            readonly name?: components["schemas"]["ChannelProductVariantName"];
            readonly description?: components["schemas"]["ChannelProductVariantDescription"];
            readonly date_created?: components["schemas"]["ChannelListingVariantDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelListingVariantDateModified"];
        };
        readonly ChannelWithoutCurrencies: {
            readonly config_meta?: components["schemas"]["ChannelConfigMeta"];
            readonly id?: components["schemas"]["ChannelId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly is_enabled?: components["schemas"]["IsEnabled"];
            readonly status?: components["schemas"]["ChannelStatus"];
            readonly name?: components["schemas"]["ChannelName"];
            readonly type?: components["schemas"]["ChannelType"];
            readonly platform?: components["schemas"]["ChannelPlatform"];
            readonly date_created?: components["schemas"]["ChannelDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelDateModified"];
            readonly icon_url?: components["schemas"]["IconUrl"];
        };
        readonly ChannelWithCurrencies: {
            readonly config_meta?: components["schemas"]["ChannelConfigMeta"];
            readonly id?: components["schemas"]["ChannelId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly is_enabled?: components["schemas"]["IsEnabled"];
            readonly status?: components["schemas"]["ChannelStatus"];
            readonly name?: components["schemas"]["ChannelName"];
            readonly type?: components["schemas"]["ChannelType"];
            readonly platform?: components["schemas"]["ChannelPlatform"];
            readonly date_created?: components["schemas"]["ChannelDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelDateModified"];
            readonly icon_url?: components["schemas"]["IconUrl"];
            readonly currencies?: components["schemas"]["CurrencyNotRequiredWithChannelId"];
        };
        /** Details about the Channel's relationship to Themes. */
        readonly ActiveTheme: {
            /** The UUID of the currently active Theme on the Channel. */
            readonly active_theme_uuid?: string;
            /** The UUID of the currently active Theme Configuration on the Channel. */
            readonly active_theme_configuration_uuid?: string;
            /** The UUID of the currently active Theme Version on the Channel. Needed to look up the available Custom Templates for the Theme. */
            readonly active_theme_version_uuid?: string;
            /** The UUID of the most recently saved Theme Configuration. If this is different from the active Theme Configuration UUID, this indicates that some changes have been saved in the control panel Theme Editor that have not yet been published. */
            readonly saved_theme_configuration_uuid?: string;
        };
        readonly Listing: {
            readonly channel_id?: components["schemas"]["ChannelIdForListing"];
            readonly listing_id?: components["schemas"]["ListingId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly product_id?: components["schemas"]["ProductId"];
            readonly state?: components["schemas"]["ListingState"];
            readonly name?: components["schemas"]["ChannelProductName"];
            readonly description?: components["schemas"]["ChannelProductDescription"];
            readonly date_created?: components["schemas"]["ChannelListingDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelListingDateModified"];
            readonly variants?: readonly components["schemas"]["ChannelProductVariantFull"][];
        };
        readonly Error: {
            /** The HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            /** Link to a list of BigCommerce API status codes. */
            readonly type?: string;
            /** Provides more details to errors. */
            readonly errors?: {
                readonly [key: string]: any;
            };
        };
        /** Data about the response, including pagination. */
        readonly MetaWithFullPagination: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /** Data about the response, including pagination. */
        readonly MetaWithPartialPagination: {
            readonly pagination?: components["schemas"]["pagination_Partial"];
        };
        /** Empty meta object; may be used later. */
        readonly EmptyMeta: {
            readonly [key: string]: any;
        };
        /** Data about the pagination. */
        readonly pagination_Full: {
            /** The maximum number of items per page. */
            readonly per_page?: number;
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
            /** The current page number. */
            readonly current_page?: number;
            /** Pagination links for the previous, current, or next parts of the whole collection. */
            readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
            };
        };
        /** Data about the pagination. */
        readonly pagination_Partial: {
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Pagination links for the previous, current, or next parts of the whole collection. */
            readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
            };
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
        };
        readonly site_Put: {
            /** The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
            readonly url?: string;
        };
        readonly site_Post: {
            /** The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
            readonly url?: string;
            /** The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
            readonly channel_id?: number;
        };
        readonly site_Full: {
            readonly id?: number;
            /** The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
            readonly url?: string;
            /** The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
            readonly channel_id?: number;
            /** When was this site created? RFC 3339 */
            readonly created_at?: string;
            /** When was this site defintion last updated? RFC 3339 */
            readonly updated_at?: string;
            /** (optional - if included) collection of routes defined for this site. Limited to 200 routes side loaded (query routes direction via `/routes` for bulk) */
            readonly routes?: readonly {
                /** Unique ID for this route. Required when updating an existing route */
                readonly id?: number;
                /** What type of resource are we routing to? */
                readonly type?: "product" | "brand" | "category" | "page" | "blog" | "home" | "cart" | "checkout" | "search" | "account" | "login" | "returns" | "static";
                /**
                 * (entity_id?) For a given type, which resources should match this route? e.g For a route with the type: "product" and matching: "5" this route would be used for the product with the ID of 5.
                 *
                 * Depending on the type of resource, this may be an ID (matching a specific item), or a "*" wildcard matching all items of that type.
                 */
                readonly matching?: string;
                /**
                 * The route template that will be used to generate the URL for the requested resource.
                 *
                 * Supports several tokens:
                 *
                 * - {id} The ID of the requested item
                 * - {slug} The slug for the requested item (if available). Note: the `slug` value may contain `/` slash
                 * - {language} The language string that the client is using
                 */
                readonly route?: string;
            }[];
        };
    };
    readonly responses: {
        readonly multiple_channels_without_currencies_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["ChannelWithoutCurrencies"][];
                    readonly meta?: components["schemas"]["MetaWithFullPagination"];
                };
            };
        };
        readonly single_channel_without_currencies_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ChannelWithoutCurrencies"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly single_channel_with_currencies_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ChannelWithCurrencies"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly channel_active_theme_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ActiveTheme"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly multiple_channels_currency_assignments_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["CurrencyNotRequiredWithChannelId"][];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly single_channel_currency_assignments_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["CurrencyNotRequiredWithChannelId"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly delete_currency_assignments_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ChannelId"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly single_and_multiple_listings_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["Listing"][];
                    readonly meta?: components["schemas"]["MetaWithPartialPagination"];
                };
            };
        };
        readonly single_listing_resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Listing"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly site_Resp: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["site_Full"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        /** Invalid channel ID is provided. */
        readonly invalid_channel_id_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** Invalid value is provided to the query parameter(s). */
        readonly invalid_filter_value_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** The request is missing one or more required fields or invalid data is submitted. Commonly, an invalid combination of `type` and `platform` was provided. */
        readonly missing_or_invalid_channel_data_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** A *Channel* with the provided ID was not found. */
        readonly channel_not_found_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** A *Channel Listing* with the provided channel ID and listing ID was not found. */
        readonly listing_not_found_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** Active Theme of the *Channel* was not found. */
        readonly active_theme_not_found_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** A *Channel* with the provided ID was not found. */
        readonly channel_entity_not_found_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** A *Channel* with the same combination of `name`, `platform`, and `type` already exists. */
        readonly duplicate_channel_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** When an invalid value or invalid field is submitted, a 422 response will be sent. Note that attempt to update a deleted or terminated channel will also result in 422 response. */
        readonly invalid_channel_update_field_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** The request is missing one or more required fields or invalid data is submitted. */
        readonly missing_or_invalid_multiple_channels_currency_assignments_data_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** The request is missing one or more required fields or invalid data is submitted. */
        readonly missing_or_invalid_single_channel_currency_assignments_data_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** The request is missing one or more required fields or invalid data is submitted. */
        readonly missing_or_invalid_multiple_listings_data_for_post_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** The request is missing one or more required fields or invalid data is submitted. Note that the `group_id` in the Invalid Listing ID example refers to `listing_id`. Please use `listing_id` instead of `group_id` in the request payload. */
        readonly missing_or_invalid_multiple_listings_data_for_put_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** When an invalid value or invalid query parameter is submitted, a 422 response will be sent. */
        readonly invalid_filters_resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
    };
    readonly parameters: {
        /** Channels subresources that can be included in the response. */
        readonly include: "currencies";
        /** Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`. */
        readonly available: boolean;
        /** Filter items by a comma-separated list of statuses. */
        readonly status_in: readonly ("prelaunch" | "active" | "inactive" | "connected" | "disconnected" | "archived" | "deleted" | "terminated")[];
        /** Filter items by a comma-separated list of types. */
        readonly type_in: readonly ("marketplace" | "marketing" | "pos" | "storefront")[];
        /** Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](https://developer.bigcommerce.com/api-reference/store-management/channels#platform). */
        readonly platform_in: readonly string[];
        /** Filter items by date_created. For example, `date_created=2019-09-04T00:00:00`, `date_created=2019-09-04`, or `date_created=1567573200` */
        readonly date_created: string;
        /** Filter items by minimum date_created. For example, `date_created:min=2019-09-04T00:00:00`, `date_created:min=2019-09-04`, or `date_created:min=1567573200` */
        readonly date_created_min: string;
        /** Filter items by maximum date_created. For example, `date_created:max=2019-09-04T00:00:00`, `date_created:max=2019-09-04`, or `date_created:max=1567573200` */
        readonly date_created_max: string;
        /** Filter items by date_modified. For example, `date_modified=2019-09-04T00:00:00`, `date_modified=2019-09-04`, or `date_modified=1567573200` */
        readonly date_modified: string;
        /** Filter items by minimum date_modified. For example, `date_modified:min=2019-09-04T00:00:00`, `date_modified:min=2019-09-04`, or `date_modified:min=1567573200` */
        readonly date_modified_min: string;
        /** Filter items by maximum date_modified. For example, `date_modified:max=2019-09-04T00:00:00`, `date_modified:max=2019-09-04`, or `date_modified:max=1567573200` */
        readonly date_modified_max: string;
        /** Controls the number of items per page for paginated responses. */
        readonly limit: number;
        /** Specifies the page number for a paginated response. */
        readonly page: number;
        /** Specifies the prior listing ID in a limited (paginated) list of listings. */
        readonly after: number;
        /** Filter items by a comma-separated list of product IDs. */
        readonly product_id_in: readonly number[];
        /** The ID of a channel */
        readonly channel_id_path_param: number;
        /** The ID of a channel listing. */
        readonly listing_id_path_param: number;
    };
}
export interface operations {
    /**
     * Returns a list of *Channels*.
     *
     * Will always return the default BigCommerce storefront with an ID of `1`. This storefront is created by default when you provision a BigCommerce store.
     */
    readonly listChannels: {
        readonly parameters: {
            readonly query: {
                /** Channels subresources that can be included in the response. */
                readonly include?: components["parameters"]["include"];
                /** Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`. */
                readonly available?: components["parameters"]["available"];
                /** Filter items by a comma-separated list of statuses. */
                readonly "status:in"?: components["parameters"]["status_in"];
                /** Filter items by a comma-separated list of types. */
                readonly "type:in"?: components["parameters"]["type_in"];
                /** Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](https://developer.bigcommerce.com/api-reference/store-management/channels#platform). */
                readonly "platform:in"?: components["parameters"]["platform_in"];
                /** Filter items by date_created. For example, `date_created=2019-09-04T00:00:00`, `date_created=2019-09-04`, or `date_created=1567573200` */
                readonly date_created?: components["parameters"]["date_created"];
                /** Filter items by minimum date_created. For example, `date_created:min=2019-09-04T00:00:00`, `date_created:min=2019-09-04`, or `date_created:min=1567573200` */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** Filter items by maximum date_created. For example, `date_created:max=2019-09-04T00:00:00`, `date_created:max=2019-09-04`, or `date_created:max=1567573200` */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
                /** Filter items by date_modified. For example, `date_modified=2019-09-04T00:00:00`, `date_modified=2019-09-04`, or `date_modified=1567573200` */
                readonly date_modified?: components["parameters"]["date_modified"];
                /** Filter items by minimum date_modified. For example, `date_modified:min=2019-09-04T00:00:00`, `date_modified:min=2019-09-04`, or `date_modified:min=1567573200` */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** Filter items by maximum date_modified. For example, `date_modified:max=2019-09-04T00:00:00`, `date_modified:max=2019-09-04`, or `date_modified:max=1567573200` */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
                /** Controls the number of items per page for paginated responses. */
                readonly limit?: components["parameters"]["limit"];
                /** Specifies the page number for a paginated response. */
                readonly page?: components["parameters"]["page"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_without_currencies_resp"];
            readonly 422: components["responses"]["invalid_filter_value_resp"];
        };
    };
    /** Creates a *Channel*. */
    readonly createChannel: {
        readonly responses: {
            readonly 200: components["responses"]["single_channel_without_currencies_resp"];
            readonly 422: components["responses"]["missing_or_invalid_channel_data_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateChannelReq"];
            };
        };
    };
    /** Returns a *Channel*. Channel ID `1` returns the default BigCommerce storefront. */
    readonly getChannel: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly query: {
                /** Channels subresources that can be included in the response. */
                readonly include?: components["parameters"]["include"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_with_currencies_resp"];
            readonly 404: components["responses"]["channel_not_found_resp"];
        };
    };
    /**
     * Updates a *Channel*.
     *
     * ## Updatable Fields
     *
     * The following fields can be updated.
     * * `name`
     * * `external_id`
     * * `status`
     * * `is_listable_from_ui`
     * * `is_visible`
     * * `is_enabled`
     * * `config_meta`
     *
     *
     * > ### Note
     * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
     * > * `platform` and `type` cannot be updated after a channel is created.
     * > * A channel with status `deleted` or `terminated` cannot be updated.
     */
    readonly updateChannel: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_without_currencies_resp"];
            readonly 404: components["responses"]["channel_entity_not_found_resp"];
            readonly 409: components["responses"]["duplicate_channel_resp"];
            readonly 422: components["responses"]["invalid_channel_update_field_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateChannelReq"];
            };
        };
    };
    /** Returns active theme details for a specific channel. */
    readonly getChannelActiveTheme: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["channel_active_theme_resp"];
            readonly 404: components["responses"]["active_theme_not_found_resp"];
        };
    };
    /** Returns a list of currency assignments for all channels. */
    readonly listAllCurrencyAssignments: {
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_currency_assignments_resp"];
        };
    };
    /** Updates enabled currencies and default currency for multiple channels. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
    readonly updateMultipleChannelsCurrencyAssignments: {
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_channels_currency_assignments_data_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpsertMultipleChannelsCurrencyAssignmentsReq"];
            };
        };
    };
    /** Sets enabled currencies and default currency for multiple channels. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
    readonly createMultipleChannelsCurrencyAssignments: {
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_channels_currency_assignments_data_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpsertMultipleChannelsCurrencyAssignmentsReq"];
            };
        };
    };
    /** Returns a list of currency assignments for a specific channel. */
    readonly getSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_currency_assignments_resp"];
            readonly 404: components["responses"]["channel_not_found_resp"];
        };
    };
    /** Updates enabled currencies and default currency for a specific channel. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
    readonly updateSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_single_channel_currency_assignments_data_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CurrencyRequiredWithoutChannelId"];
            };
        };
    };
    /** Sets enabled currencies and default currency for a specific channel. Note that currencies must be added first in the Store Setup > Currencies settings from the BigCommerce Control Panel before the currencies can be assigned to a channel. */
    readonly createSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_single_channel_currency_assignments_data_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CurrencyRequiredWithoutChannelId"];
            };
        };
    };
    /** Deletes currency assignments for a specific channel. Once done, this channel will inherit the storeâ€™s currency settings. */
    readonly deleteSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["delete_currency_assignments_resp"];
            readonly 404: components["responses"]["channel_not_found_resp"];
        };
    };
    /** Returns a list of all *Channel Listings* for a specific channel. Note that if the *Channel* is not found or there is no listing associated to the *Channel*, it will return a 200 response with empty data. */
    readonly listChannelListings: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly query: {
                /** Controls the number of items per page for paginated responses. */
                readonly limit?: components["parameters"]["limit"];
                /** Specifies the prior listing ID in a limited (paginated) list of listings. */
                readonly after?: components["parameters"]["after"];
                /** Filter items by a comma-separated list of product IDs. */
                readonly "product_id:in"?: components["parameters"]["product_id_in"];
                /** Filter items by date_created. For example, `date_created=2019-09-04T00:00:00`, `date_created=2019-09-04`, or `date_created=1567573200` */
                readonly date_created?: components["parameters"]["date_created"];
                /** Filter items by minimum date_created. For example, `date_created:min=2019-09-04T00:00:00`, `date_created:min=2019-09-04`, or `date_created:min=1567573200` */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** Filter items by maximum date_created. For example, `date_created:max=2019-09-04T00:00:00`, `date_created:max=2019-09-04`, or `date_created:max=1567573200` */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
                /** Filter items by date_modified. For example, `date_modified=2019-09-04T00:00:00`, `date_modified=2019-09-04`, or `date_modified=1567573200` */
                readonly date_modified?: components["parameters"]["date_modified"];
                /** Filter items by minimum date_modified. For example, `date_modified:min=2019-09-04T00:00:00`, `date_modified:min=2019-09-04`, or `date_modified:min=1567573200` */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** Filter items by maximum date_modified. For example, `date_modified:max=2019-09-04T00:00:00`, `date_modified:max=2019-09-04`, or `date_modified:max=1567573200` */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_and_multiple_listings_resp"];
            readonly 400: components["responses"]["invalid_channel_id_resp"];
            readonly 422: components["responses"]["invalid_filters_resp"];
        };
    };
    /**
     * Updates one or more *Channel Listings* for a specific channel.
     *
     * > ### Note
     * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
     * > * If a new variant is provided, the API will append the variant to the list. If a variant already exists, the API will update the existing variant. Other variants that are not provided in the payload remains unchanged.
     * > * If `listing_id` does not exist, the API will return a 200 response with empty data.
     * > * `listing_id` is required and cannot be less than or equal to zero.
     * > * `product_id` cannot be updated after a channel listing is created.
     * > * `product_id` of a variant must match the `product_id` of the channel listing.
     */
    readonly updateChannelListings: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_and_multiple_listings_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_listings_data_for_put_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateMultipleListingsReq"];
            };
        };
    };
    /** Creates one or more *Channel Listings* for a specific channel. */
    readonly createChannelListings: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_and_multiple_listings_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_listings_data_for_post_resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateMultipleListingsReq"];
            };
        };
    };
    /** Returns a *Channel Listing* for a specific channel. */
    readonly getChannelListing: {
        readonly parameters: {
            readonly path: {
                /** The ID of a channel */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                /** The ID of a channel listing. */
                readonly listing_id: components["parameters"]["listing_id_path_param"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_listing_resp"];
            readonly 404: components["responses"]["listing_not_found_resp"];
        };
    };
    /**
     * Alias of GET /sites?channel_id=channel_id
     *
     * Returns site data for given channel.
     */
    readonly "get-channel-site": {
        readonly parameters: {
            readonly path: {
                readonly channel_id: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["site_Resp"];
        };
    };
    /** Updates a site for provided channel. */
    readonly "put-channel-site": {
        readonly parameters: {
            readonly path: {
                readonly channel_id: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["site_Resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["site_Put"];
            };
        };
    };
    /** Alias of POST `/sites`. Creates a site for provided channel. */
    readonly postChannelSite: {
        readonly parameters: {
            readonly path: {
                readonly channel_id: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["site_Resp"];
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["site_Post"];
            };
        };
    };
}
