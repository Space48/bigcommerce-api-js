/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/customers": {
        /** Returns a list of all *Customers*. Default sorting is by customer id, from lowest to highest. Optional parameters can be passed in. */
        readonly get: operations["getAllCustomers"];
        /**
         * Creates a *Customer*.
         *
         * **Required Fields**
         * *   `first_name`
         * *   `last_name`
         * *   `email`
         *
         * **Read Only Fields**
         * *   `id`
         * *   `date_created`
         * *   `date_modified`
         * *   `accepts_marketing`
         * *   `addresses`
         * *   `form_fields`
         *
         * ## Notes
         *
         * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
         *
         * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
         *
         * ## Updating Passwords
         *
         * To manually update a customer password in the same way as the control panel, supply a value for the password field:
         *
         * ```json
         * {
         *     "_authentication": {
         *         "password": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         *
         * ## Confirming Passwords
         *
         * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
         *
         * ```json
         * {
         *     "_authentication": {
         *        "password": "12w69Y217PYR96J",
         *        "password_confirmation": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         *
         * ## Forcing Password Resets
         *
         * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
         *
         * ```json
         * {
         *     "_authentication": {
         *         "force_reset": true
         *     }
         * }
         */
        readonly post: operations["createANewCustomer"];
        /** By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted. */
        readonly delete: operations["deleteAllCustomers"];
    };
    readonly "/customers/{customer_id}": {
        /** Returns a single *Customer*. */
        readonly get: operations["getACustomer"];
        /**
         * Updates a *Customer*.
         *
         * **Read Only Fields**
         * *   id
         * *   date_created
         * *   date_modified
         * *   accepts_marketing
         * *   addresses
         * *   form_fields
         *
         * ## Notes
         *
         * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
         *
         * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
         *
         * ## Updating Passwords
         *
         * To manually update a customer password in the same way as the control panel, supply a value for the `password` field:
         *
         * ```
         * {
         *     "_authentication": {
         *         "password": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         *
         * #### Confirming Passwords
         *
         * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
         *
         * ```
         * {
         *     "_authentication": {
         *        "password": "12w69Y217PYR96J"
         *        "password_confirmation": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         *
         * #### Forcing Password Resets
         *
         * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
         *
         * ```
         * {
         *     "_authentication": {
         *         "force_reset": true
         *     }
         * }
         * ```
         */
        readonly put: operations["updateACustomer"];
        /** Deletes a *Customer*. */
        readonly delete: operations["deleteACustomer"];
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
        };
    };
    readonly "/customers/count": {
        /** Returns a count of all *Customers*. */
        readonly get: operations["getACountOfCustomers"];
    };
    readonly "/customers/{customer_id}/validate": {
        /**
         * **This endpoint has special rate limiting protections to protect against abuse.**
         *
         * Provided a password, will return a true/false response indicating if the provided password matches the customer’s current password. This endpoint is useful if you want to power the login of another system using BigCommerce’s stored customer accounts, or as a safe way to migrate passwords to another system (by checking them against BigCommerce’s password, and if correct, storing it in another system securely.)If the password matches what’s stored against the customer account, the response will be:
         *
         * ```json
         * {
         *     "success": "true"
         * }
         * ```
         * If the password does NOT match, the response will instead be:
         *
         * ```json
         * {
         *     "success": "false"
         * }
         * ```
         */
        readonly post: operations["validateCustomerPassword"];
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
        };
    };
    readonly "/customers/{customer_id}/addresses": {
        /**
         * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.
         *
         * The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
         */
        readonly get: operations["getAllCustomerAddresses"];
        /**
         * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
         *
         * **Required Fields**
         * *   first_name
         * *   last_name
         * *   phone
         * *   street_1
         * *   city
         * *   state
         * *   zip
         * *   country
         *
         * **Read Only Fields**
         * *   id
         * *   country_iso2
         */
        readonly post: operations["createACustomerAddress"];
        /** By default, it deletes all *Customer Addresses*. */
        readonly delete: operations["deleteAllCustomerAddresses"];
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
        };
    };
    readonly "/customers/{customer_id}/addresses/{customer_address_id}": {
        /** Returns a *Customer Address*. */
        readonly get: operations["getACustomerAddress"];
        /**
         * Updates a *Customer Address*.
         *
         * **Read Only Fields**
         * *   id
         * *   country_iso2
         */
        readonly put: operations["updateACustomerAddress"];
        /** Deletes a *Customer Address*. */
        readonly delete: operations["deletesACustomerAddress"];
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
                /** Id of the customer address. */
                readonly customer_address_id: number;
            };
        };
    };
    readonly "/customers/{customer_id}/addresses/count": {
        /** Returns a count of addresses for a customer. */
        readonly get: operations["getACountofCustomerAddresses"];
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
        };
    };
    readonly "/customer_groups": {
        /** Returns a list of *Customer Groups*. Default sorting is by customer-group id, from lowest to highest. */
        readonly get: operations["getAllCustomerGroups"];
        /**
         * Creates a *Customer Group*.
         *
         * **Required Fields**
         * * name
         */
        readonly post: operations["createACustomerGroup"];
        /**
         * By default, it deletes all *Customer Groups*.
         *
         * All existing customers are unassigned from the group when it is deleted.
         */
        readonly delete: operations["deleteAllCustomerGroups"];
    };
    readonly "/customer_groups/{customer_group_id}": {
        /** Returns a *Customer Group*. */
        readonly get: operations["getACustomerGroup"];
        /**
         * Updates a *Customer Group*.
         *
         * **Notes**
         *
         * Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
         */
        readonly put: operations["updateACustomerGroup"];
        /**
         * Deletes a *Customer Group*.
         *
         * **Notes**
         *
         * All existing customers are unassigned from the group when it is deleted.
         */
        readonly delete: operations["deleteACustomerGroup"];
        readonly parameters: {
            readonly path: {
                /** Id of the customer group */
                readonly customer_group_id: number;
            };
        };
    };
    readonly "/customer_groups/count": {
        /** Returns a count of all *Customer Groups*. */
        readonly get: operations["getACountOfCustomerGroups"];
    };
}
export interface definitions {
    readonly billingAddress_Full: {
        readonly first_name?: string;
        readonly last_name?: string;
        readonly company?: string;
        readonly street_1?: string;
        readonly street_2?: string;
        readonly city?: string;
        readonly state?: string;
        readonly zip?: string;
        readonly country?: string;
        readonly country_iso2?: string;
        readonly phone?: string;
        readonly email?: string;
        readonly form_fields?: readonly {
            /** Name of the form field */
            readonly name?: string;
            /** Value of the form field */
            readonly value?: string;
        }[];
    };
    readonly customerFormFields: {
        /** Name of the form field */
        readonly name?: string;
        /** Value of the form field */
        readonly value?: string;
    };
    readonly shippingAddress_Full: {
        /** URL of the shipping address for api requests */
        readonly url?: string;
        readonly resource?: string;
    };
    readonly customer_Full: {
        /** Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
        readonly id?: number;
        /** Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
        readonly date_created?: string;
        /** Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
        readonly date_modified?: string;
    } & definitions["customer_Base"];
    readonly categoryAccessLevel_Full: {
        /**
         * + `all` - Customers can access all categories
         *  + `specific`  - Customers can access a specific list of categories
         * + `none` - Customers are prevented from viewing any of the categories in this group.
         */
        readonly type?: "all" | "specific" | "none";
        /** Is an array of category IDs and should be supplied only if `type` is specific. */
        readonly categories?: readonly number[];
    };
    readonly count_Full: {
        readonly count?: number;
    };
    readonly customerAddress_Full: {
        /** ID of this customer address. READ-ONLY */
        readonly id?: number;
        /** 2-letter ISO Alpha-2 code for the customer’s country. READ-ONLY */
        readonly country_iso2?: string;
    } & definitions["customerAddress_Base"];
    /** When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [Control Panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing) this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior via API. */
    readonly customerGroup_Full: {
        /** Id of the customer group */
        readonly id?: number;
        /** Name of the group */
        readonly name?: string;
        /** Determines whether new customers are assigned to this group by default. */
        readonly is_default?: boolean;
        readonly category_access?: definitions["categoryAccessLevel_Full"];
        /** A collection of discount rules that are automatically applied to customers who are members of the group */
        readonly discount_rules?: readonly {
            readonly type?: "price_list" | "all" | "category" | "product";
            readonly method?: "percent" | "fixed" | "price";
            /** A float that specifies the value applied to the price modified */
            readonly amount?: string;
            /** If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned. */
            readonly price_list_id?: number;
        }[];
        /** If the groups is for guests. There can only be one customer group for guests at a time. */
        readonly is_group_for_guests?: boolean;
    };
    readonly country_Full: {
        /** Id of the country. */
        readonly id?: number;
        /** Country name. */
        readonly country?: string;
        /** 2-letter country code. */
        readonly country_iso2?: string;
        /** 3-letter country code. */
        readonly country_iso3?: string;
        readonly states?: {
            readonly url?: string;
            readonly resource?: string;
        };
    };
    readonly statesResource_Full: {
        readonly url?: string;
        readonly resource?: string;
    };
    readonly state_Full: {
        /** Numeric ID of the state/province. */
        readonly id?: number;
        /** Name of the state/province. */
        readonly state?: string;
        /** Abbreviation for the state/province. */
        readonly state_abbreviation?: string;
        /** Numeric ID of the state’s/province’s associated country. */
        readonly country_id?: number;
    };
    /** When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [Control Panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing) this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior via API. */
    readonly customerGroup_Post: {
        /** Name of the group */
        readonly name?: string;
        /** Determines whether new customers are assigned to this group by default. */
        readonly is_default?: boolean;
        readonly category_access?: definitions["categoryAccessLevel_Full"];
        /** A collection of discount rules that are automatically applied to customers who are members of the group */
        readonly discount_rules?: readonly {
            readonly type?: "price_list" | "all" | "category" | "product";
            readonly method?: "percent" | "fixed" | "price";
            /** A float that specifies the value applied to the price modified */
            readonly amount?: string;
            /** If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned. */
            readonly price_list_id?: number;
        }[];
        /** If the groups is for guests. There can only be one customer group for guests at a time. */
        readonly is_group_for_guests?: boolean;
    };
    readonly validatePassword: {
        /** Will return `true` or `false` */
        readonly success?: boolean;
    };
    readonly customer_Base: {
        /** Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
        readonly _authentication?: {
            readonly force_reset?: boolean;
            readonly password?: string;
            readonly password_confirmation?: string;
        };
        /** The name of the company for which the customer works. */
        readonly company?: string;
        /** First name of the customer. */
        readonly first_name: string;
        /** Last name of the customer. */
        readonly last_name: string;
        /** Email address of the customer. */
        readonly email: string;
        /** Phone number of the customer. */
        readonly phone?: string;
        /** The amount of credit the customer has. (Float, Float as String, Integer) */
        readonly store_credit?: string;
        /** The customer’s IP address when they signed up. */
        readonly registration_ip_address?: string;
        /** The group to which the customer belongs. */
        readonly customer_group_id?: number;
        /** Store-owner notes on the customer. */
        readonly notes?: string;
        /** If applicable, the tax-exempt category of the shopper's customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
        readonly tax_exempt_category?: string;
        /** If the customer accepts product review emails or abandon cart emails. Read-Only. */
        readonly accepts_marketing?: boolean;
        readonly addresses?: {
            /** Full URL of where the resource is located. */
            readonly url?: string;
            /** Resource being accessed. */
            readonly resource?: string;
        };
        /** Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
        readonly form_fields?: readonly {
            /** Name of the form field */
            readonly name?: string;
            /** Value of the form field */
            readonly value?: string;
        }[];
        /** Force a password change on next login. */
        readonly reset_pass_on_login?: boolean;
    };
    readonly customerAddress_Base: {
        /** ID of the associated customer. */
        readonly customer_id?: number;
        /** The customer’s first name. */
        readonly first_name: string;
        /** The customer’s last name. */
        readonly last_name: string;
        /** The customer’s company name. */
        readonly company?: string;
        /** The customer’s street address, line 1. */
        readonly street_1: string;
        /** The customer’s street address, line 2. */
        readonly street_2?: string;
        /** The customer’s city/town/suburb. */
        readonly city: string;
        /** The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.) */
        readonly state: string;
        /** The customer’s ZIP or postal code. */
        readonly zip: string;
        /** The customer’s country. Must be the full country name. */
        readonly country: string;
        /** The customer’s phone number. */
        readonly phone: string;
        readonly address_type?: "residential" | "commercial";
    };
}
export interface parameters {
    /** Id of the customer */
    readonly customer_id: number;
    /** Id of the customer group */
    readonly customer_group_id: number;
    /** Id of the customer address. */
    readonly customer_address_id: number;
    /** If the groups is for guests. There can only be one customer group for guests at a time. */
    readonly is_group_for_guests: boolean;
}
export interface responses {
}
export interface operations {
    /** Returns a list of all *Customers*. Default sorting is by customer id, from lowest to highest. Optional parameters can be passed in. */
    readonly getAllCustomers: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                readonly first_name?: string;
                readonly last_name?: string;
                readonly company?: string;
                readonly email?: string;
                readonly phone?: string;
                readonly store_credit?: string;
                readonly customer_group_id?: number;
                readonly min_id?: number;
                readonly max_id?: number;
                readonly min_date_created?: string;
                readonly "max_date_created	"?: string;
                readonly min_date_modified?: string;
                readonly max_date_modified?: string;
                readonly tax_exempt_category?: string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: readonly definitions["customer_Full"][];
            };
        };
    };
    /**
     * Creates a *Customer*.
     *
     * **Required Fields**
     * *   `first_name`
     * *   `last_name`
     * *   `email`
     *
     * **Read Only Fields**
     * *   `id`
     * *   `date_created`
     * *   `date_modified`
     * *   `accepts_marketing`
     * *   `addresses`
     * *   `form_fields`
     *
     * ## Notes
     *
     * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
     *
     * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
     *
     * ## Updating Passwords
     *
     * To manually update a customer password in the same way as the control panel, supply a value for the password field:
     *
     * ```json
     * {
     *     "_authentication": {
     *         "password": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * ## Confirming Passwords
     *
     * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
     *
     * ```json
     * {
     *     "_authentication": {
     *        "password": "12w69Y217PYR96J",
     *        "password_confirmation": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * ## Forcing Password Resets
     *
     * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
     *
     * ```json
     * {
     *     "_authentication": {
     *         "force_reset": true
     *     }
     * }
     */
    readonly createANewCustomer: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly body: {
                readonly body: {
                    /** This can vary depending on the action being taken to update, validate or force a password change. See Update Customer */
                    readonly _authentication?: {
                        readonly [key: string]: any;
                    };
                    readonly company?: string;
                    readonly first_name?: string;
                    readonly last_name?: string;
                    readonly phone?: string;
                    readonly date_modified?: string;
                    readonly store_credit?: number;
                    readonly registration_ip_address?: string;
                    readonly customer_group_id?: number;
                    readonly notes?: string;
                    readonly tax_exempt_category?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customer_Full"];
            };
        };
    };
    /** By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted. */
    readonly deleteAllCustomers: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a single *Customer*. */
    readonly getACustomer: {
        readonly parameters: {
            readonly path: {
                /** Unique numeric ID of this customer. */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customer_Full"];
            };
        };
    };
    /**
     * Updates a *Customer*.
     *
     * **Read Only Fields**
     * *   id
     * *   date_created
     * *   date_modified
     * *   accepts_marketing
     * *   addresses
     * *   form_fields
     *
     * ## Notes
     *
     * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
     *
     * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
     *
     * ## Updating Passwords
     *
     * To manually update a customer password in the same way as the control panel, supply a value for the `password` field:
     *
     * ```
     * {
     *     "_authentication": {
     *         "password": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * #### Confirming Passwords
     *
     * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
     *
     * ```
     * {
     *     "_authentication": {
     *        "password": "12w69Y217PYR96J"
     *        "password_confirmation": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * #### Forcing Password Resets
     *
     * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
     *
     * ```
     * {
     *     "_authentication": {
     *         "force_reset": true
     *     }
     * }
     * ```
     */
    readonly updateACustomer: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly body: {
                readonly body?: {
                    /** Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
                    readonly id?: number;
                    /** Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
                    readonly _authentication?: {
                        readonly force_reset?: boolean;
                        readonly password?: string;
                        readonly password_confirmation?: string;
                    };
                    /** The name of the company for which the customer works. */
                    readonly company?: string;
                    /** First name of the customer. */
                    readonly first_name: string;
                    /** Last name of the customer. */
                    readonly last_name: string;
                    /** Email address of the customer. */
                    readonly email: string;
                    /** Phone number of the customer. */
                    readonly phone?: string;
                    /** Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
                    readonly date_created?: string;
                    /** Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
                    readonly date_modified?: string;
                    /** The amount of credit the customer has. (Float, Float as String, Integer) */
                    readonly store_credit?: string;
                    /** The customer’s IP address when they signed up. */
                    readonly registration_ip_address?: string;
                    /** The group to which the customer belongs. */
                    readonly customer_group_id?: number;
                    /** Store-owner notes on the customer. */
                    readonly notes?: string;
                    /** If applicable, the tax-exempt category of the shopper's customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
                    readonly tax_exempt_category?: string;
                    /** If the customer accepts product review emails or abandon cart emails. Read-Only. */
                    readonly accepts_marketing?: boolean;
                    readonly addresses?: {
                        /** Full URL of where the resource is located. */
                        readonly url?: string;
                        /** Resource being accessed. */
                        readonly resource?: string;
                    };
                    /** Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
                    readonly form_fields?: readonly {
                        /** Name of the form field */
                        readonly name?: string;
                        /** Value of the form field */
                        readonly value?: string;
                    }[];
                    /** Force a password change on next login. */
                    readonly reset_pass_on_login?: boolean;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customer_Base"];
            };
        };
    };
    /** Deletes a *Customer*. */
    readonly deleteACustomer: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a count of all *Customers*. */
    readonly getACountOfCustomers: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["count_Full"];
            };
        };
    };
    /**
     * **This endpoint has special rate limiting protections to protect against abuse.**
     *
     * Provided a password, will return a true/false response indicating if the provided password matches the customer’s current password. This endpoint is useful if you want to power the login of another system using BigCommerce’s stored customer accounts, or as a safe way to migrate passwords to another system (by checking them against BigCommerce’s password, and if correct, storing it in another system securely.)If the password matches what’s stored against the customer account, the response will be:
     *
     * ```json
     * {
     *     "success": "true"
     * }
     * ```
     * If the password does NOT match, the response will instead be:
     *
     * ```json
     * {
     *     "success": "false"
     * }
     * ```
     */
    readonly validateCustomerPassword: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly body: {
                readonly body: {
                    /** String to run against customer password. Will return a true or false. */
                    readonly password?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["validatePassword"];
            };
        };
    };
    /**
     * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.
     *
     * The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
     */
    readonly getAllCustomerAddresses: {
        readonly parameters: {
            readonly path: {
                /** ID of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                /** Number of pages */
                readonly page?: number;
                /** Count per page */
                readonly limit?: number;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: readonly definitions["customerAddress_Full"][];
            };
        };
    };
    /**
     * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
     *
     * **Required Fields**
     * *   first_name
     * *   last_name
     * *   phone
     * *   street_1
     * *   city
     * *   state
     * *   zip
     * *   country
     *
     * **Read Only Fields**
     * *   id
     * *   country_iso2
     */
    readonly createACustomerAddress: {
        readonly parameters: {
            readonly path: {
                /** ID of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly body: {
                readonly body: definitions["customerAddress_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customerAddress_Full"];
            };
        };
    };
    /** By default, it deletes all *Customer Addresses*. */
    readonly deleteAllCustomerAddresses: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                /** Number of pages */
                readonly page?: number;
                /** Count per page */
                readonly limit?: number;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a *Customer Address*. */
    readonly getACustomerAddress: {
        readonly parameters: {
            readonly path: {
                /** ID of the customer */
                readonly customer_id: number;
                /** ID of the customer address */
                readonly customer_address_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                /** Number of pages */
                readonly page?: number;
                /** Count per page */
                readonly limit?: number;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customerAddress_Full"];
            };
        };
    };
    /**
     * Updates a *Customer Address*.
     *
     * **Read Only Fields**
     * *   id
     * *   country_iso2
     */
    readonly updateACustomerAddress: {
        readonly parameters: {
            readonly path: {
                /** ID of this customer */
                readonly customer_id: number;
                /** ID of the customer address. */
                readonly customer_address_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly body: {
                readonly body: {
                    /** ID of this customer address. READ-ONLY */
                    readonly id?: number;
                    /** ID of the associated customer. */
                    readonly customer_id?: number;
                    /** The customer’s first name. */
                    readonly first_name: string;
                    /** The customer’s last name. */
                    readonly last_name: string;
                    /** The customer’s company name. */
                    readonly company?: string;
                    /** The customer’s street address, line 1. */
                    readonly street_1: string;
                    /** The customer’s street address, line 2. */
                    readonly street_2?: string;
                    /** The customer’s city/town/suburb. */
                    readonly city: string;
                    /** The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.) */
                    readonly state: string;
                    /** The customer’s ZIP or postal code. */
                    readonly zip: string;
                    /** The customer’s country. Must be the full country name. */
                    readonly country: string;
                    /** 2-letter ISO Alpha-2 code for the customer’s country. READ-ONLY */
                    readonly country_iso2?: string;
                    /** The customer’s phone number. */
                    readonly phone: string;
                    readonly address_type?: "residential" | "commercial";
                };
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customerAddress_Full"];
            };
        };
    };
    /** Deletes a *Customer Address*. */
    readonly deletesACustomerAddress: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
                /** Id of the customer address. */
                readonly customer_address_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a count of addresses for a customer. */
    readonly getACountofCustomerAddresses: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer */
                readonly customer_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                /** Number of pages */
                readonly page?: number;
                /** Count per page */
                readonly limit?: number;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["count_Full"];
            };
        };
    };
    /** Returns a list of *Customer Groups*. Default sorting is by customer-group id, from lowest to highest. */
    readonly getAllCustomerGroups: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                /** Number of pages */
                readonly page?: number;
                /** Count per page */
                readonly limit?: number;
                /** Filter customer groups by exact name match. Can use `name:like` to filter using a fuzzy matching method. This is good for implementing search. */
                readonly name?: string;
                /** If customers who signup are added to this group by default */
                readonly is_default?: boolean;
                /** If the groups is for guests. There can only be one customer group for guests at a time. */
                readonly is_group_for_guests?: parameters["is_group_for_guests"];
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: readonly definitions["customerGroup_Full"][];
            };
        };
    };
    /**
     * Creates a *Customer Group*.
     *
     * **Required Fields**
     * * name
     */
    readonly createACustomerGroup: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
                readonly "X-Auth-Client": string;
                readonly "X-Auth-Token": string;
            };
            readonly body: {
                readonly body: definitions["customerGroup_Post"];
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customerGroup_Full"];
            };
            /** The customer group was created, but the sitewide discount update failed. You may retry the request. */
            readonly 207: {
                readonly schema: {
                    readonly status?: number;
                    readonly message?: string;
                };
            };
        };
    };
    /**
     * By default, it deletes all *Customer Groups*.
     *
     * All existing customers are unassigned from the group when it is deleted.
     */
    readonly deleteAllCustomerGroups: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a *Customer Group*. */
    readonly getACustomerGroup: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer group */
                readonly customer_group_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
            readonly query: {
                /** Number of pages */
                readonly page?: number;
                /** Count per page */
                readonly limit?: number;
                /** Name of the customer groups */
                readonly name?: string;
                /** If customers who signup are added to this group by default */
                readonly is_default?: boolean;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customerGroup_Full"];
            };
        };
    };
    /**
     * Updates a *Customer Group*.
     *
     * **Notes**
     *
     * Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
     */
    readonly updateACustomerGroup: {
        readonly parameters: {
            readonly path: {
                /** Id of the customer group */
                readonly customer_group_id: number;
            };
            readonly header: {
                readonly Accepts: string;
                readonly "Content-Type": string;
            };
            readonly body: {
                readonly body?: definitions["customerGroup_Full"];
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["customerGroup_Full"];
            };
            /** The customer group was updated, but the sitewide discount update failed. You may retry the request. */
            readonly 207: {
                readonly schema: {
                    readonly status: number;
                    readonly message: string;
                };
            };
        };
    };
    /**
     * Deletes a *Customer Group*.
     *
     * **Notes**
     *
     * All existing customers are unassigned from the group when it is deleted.
     */
    readonly deleteACustomerGroup: {
        readonly parameters: {
            readonly path: {
                /** The id of the customer group. */
                readonly customer_group_id: number;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a count of all *Customer Groups*. */
    readonly getACountOfCustomerGroups: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: definitions["count_Full"];
            };
        };
    };
}
