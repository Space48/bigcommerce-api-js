/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/customers": {
        /**
         * Returns a list of Customers. Optional filter parameters can be passed in.
         *
         * **Notes**
         *
         * Attribute names are not available on the customer object.
         */
        readonly get: operations["CustomersGet"];
        /**
         * Updates Customers. Subresource updates are not supported. Multiple customers can be updated in one call.
         *
         * **Required Fields**
         * * id -- ID of the *Customer* This must be included in the request body
         *
         * **Read Only Fields**
         * * id
         * * registration_ip_address
         * * date_created
         * * date_modified
         *
         *
         * **Notes**
         *
         * * Attributes Values can not be updated using Update a Customer. Use the Update a [Customer Attribute Values](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attribute-values/customersattributevaluesput) endpoint.
         * * channel_ids -- Updating the list of channels a customer can access may create some side effects in a multi-storefront situation. This list determines which customer account we will use to authenticate a shopper given a channel.
         */
        readonly put: operations["CustomersPut"];
        /**
         * Creates Customers. Multiple customers can be created in one call.
         *
         * **Required Fields**
         * * last_name
         * * first_name
         * * email
         *
         * **Required Fields Customer Address**
         * * first_name
         * * city
         * * country_code
         * * state_or_province
         * * last_name
         * * address1
         * * postal_code
         *
         * **Required Fields Attributes**
         * * Attributes must be [created](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attributes/customersattributespost) **BEFORE** creating a customer.
         * * attribute_id
         * * attribute_value -- This is input as a string, regardless of the [Type](/api-reference/customer-subscribers/v3-customers-api/models/type).
         *
         * **Notes**
         * A customer can be created with global access or channel-specific access.
         * * **Global access:**
         *   * Make sure the channel has `allow_global_logins` enabled. This is on by default only for the default storefront. Find more info at [Customer Settings > Channel](https://developer.bigcommerce.com/api-reference/store-management/customers-v3/customer-settings-channel/customersettingschannelget)
         *   * Omit `channel_ids` field, or provide `channel_ids: null`.
         * * **Channel-specific access:**
         *   * Provide a `channel_ids` array containing the channels accessible by the customer.
         */
        readonly post: operations["CustomersPost"];
        /**
         * Deletes Customers.
         *
         * **Required Query**
         * * id:in -- ID of the customer
         *
         * **Notes**
         *
         * A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
         */
        readonly delete: operations["CustomersDelete"];
    };
    readonly "/customers/addresses": {
        /** Returns a list of Customer Addresses. Optional filter parameters can be passed in. */
        readonly get: operations["CustomersAddressesGet"];
        /**
         * Updates a Customer Address. Multiple customer addresses can be updated in one call.
         *
         * **Required Fields**
         * * id -- ID of the *Customer Address*
         * * customer_id -- ID of the *Customer*.
         */
        readonly put: operations["CustomersAddressesPut"];
        /**
         * Creates a Customer Address. Multiple customer addresses can be created in one call.
         *
         * **Required Fields**
         * * first_name
         * * city
         * * customer_id
         * * country_code
         * * state_or_province
         * * last_name
         * * address1
         * * postal_code
         */
        readonly post: operations["CustomersAddressesPost"];
        /**
         * Deletes a Customer Address.
         *
         * **Required Query**
         * * id:in -- ID of the *Customer Address*
         */
        readonly delete: operations["CustomersAddressesDelete"];
    };
    readonly "/customers/validate-credentials": {
        /** Validate a customer credentials - This endpoint has special rate limiting protections to protect against abuse */
        readonly post: operations["CustomerValidateCredentials"];
    };
    readonly "/customers/settings": {
        /** Returns the global-level customer settings. */
        readonly get: operations["CustomerSettingsGet"];
        /** Updates the customer settings on the global level. */
        readonly put: operations["CustomerSettingsPut"];
    };
    readonly "/customers/settings/channels/{channel_id}": {
        /**
         * Returns the customer settings per channel.
         *
         * **Notes**
         *
         *  * `null` indicates that there is no override per given channel and values are inherited from the global level.
         */
        readonly get: operations["CustomerSettingsChannelGet"];
        /**
         * Update the customer settings per channel
         *
         * **Required Fields**
         *
         * * `channel_id`
         *
         * **Notes**
         *
         * * Setting `null` will delete override per given channel and values will be inherited from the global level.
         */
        readonly put: operations["CustomerSettingsChannelPut"];
        readonly parameters: {
            readonly path: {
                readonly channel_id: number;
            };
        };
    };
    readonly "/customers/attributes": {
        /** Returns a list of Customer Attributes. You can pass in optional filter parameters. */
        readonly get: operations["CustomersAttributesGet"];
        /**
         * Updates a Customer Attribute. Multiple customer attributes can be updated in one call.
         *
         * **Required Fields**
         * * id -- ID of the *Customer Attribute*
         *
         * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
         */
        readonly put: operations["CustomersAttributesPut"];
        /**
         * Creates a Customer Attribute. Multiple customer attributes can be created in one call.
         *
         * **Required Fields**
         * * name
         * * type
         *
         * **Notes**
         *
         * Once the data type is set, it cannot be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
         *
         * Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.
         *
         * A store cannot have more than 50 customer attributes.
         */
        readonly post: operations["CustomersAttributesPost"];
        /**
         * Deletes Customer Attributes from the store.
         *
         * **Required Query**
         * * id:in -- ID of the *Customer Attribute*
         */
        readonly delete: operations["CustomersAttributesDelete"];
    };
    readonly "/customers/attribute-values": {
        /** Returns a list of Customer Attribute Values. Optional filter parameters can be passed in. */
        readonly get: operations["CustomersAttributeValuesGet"];
        /**
         * Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.
         *
         * Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.
         *
         * Up to 10 per call are allowed.
         */
        readonly put: operations["CustomersAttributeValuesPut"];
        /**
         * Deletes Customer Attribute Values. Deletes the attribute value from the customer.
         *
         * **Required Query**
         * * id:in - ID of the *Customer Attribute Value*
         */
        readonly delete: operations["CustomersAttributeValuesDelete"];
    };
    readonly "/customers/form-field-values": {
        /**
         * Returns a list of form field values for the Customer or Customer Address object.
         *
         * To learn about adding and managing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
         */
        readonly get: operations["CustomerFormFieldsGet"];
        /**
         * Updates form field values on the Customer or Customer Address objects. Multiple form field values can be updated in one call.
         *
         * Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.
         *
         * To learn more about editing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
         */
        readonly put: operations["CustomerFormFieldValuePUT"];
    };
    readonly "/customers/{customerId}/consent": {
        /** Gets the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront. */
        readonly get: operations["CustomersConsentByCustomerId_GET"];
        /** Updates the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront. */
        readonly put: operations["CustomersConsentByCustomerId_PUT"];
    };
    readonly "/customers/{customerId}/stored-instruments": {
        /**
         * Lists all available stored instruments for a customer. This list will include all types of stored instruments namely card, account and bank_account instruments
         *
         * <div class="HubBlock--callout">
         * <div class="CalloutBlock--info">
         * <div class="HubBlock-content">
         *
         * > ### Note
         * > * This endpoint is in beta.
         *
         * </div>
         * </div>
         * </div>
         */
        readonly get: operations["liststoredinstruments"];
    };
}
export interface components {
    readonly schemas: {
        /** Data about the response, including pagination and collection totals. */
        readonly Pagination: {
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
            readonly per_page?: number;
            /** The page you are currently on within the collection. */
            readonly current_page?: number;
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
            readonly links?: components["schemas"]["Links"];
        };
        /** Data about the response, including pagination and collection totals. */
        readonly _metaCollection: {
            readonly pagination?: components["schemas"]["Pagination"];
        };
        readonly ErrorResponse: {
            /** The HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
            readonly errors?: {
                readonly [key: string]: string;
            };
        };
        /** Error payload for the BigCommerce API. */
        readonly _error: {
            /** The HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        readonly customer_Full: {
            /** The email of the customer. Must be unique. */
            readonly email?: string;
            /** The first name of the customer. */
            readonly first_name?: string;
            /** The last name of the customer. */
            readonly last_name?: string;
            /** The company of the customer. */
            readonly company?: string;
            /** The phone number of the customer. */
            readonly phone?: string;
            /** The IP address from which this customer was registered. */
            readonly registration_ip_address?: string;
            /** The customer notes. */
            readonly notes?: string;
            /** The tax exempt category code for the customer. */
            readonly tax_exempt_category?: string;
            /** ID of the group which this customer belongs to. */
            readonly customer_group_id?: number;
            /** The unique numeric ID of the customer. */
            readonly id?: number;
            /** The date on which the customer was modified. */
            readonly date_modified?: string;
            /** The date of which the customer was created. */
            readonly date_created?: string;
            /** Total number of customer addresses */
            readonly address_count?: number;
            /** Total number of customer attributes */
            readonly attribute_count?: number;
            readonly authentication?: {
                /** If `true`, this customer will be forced to change password on next login. */
                readonly force_password_reset?: boolean;
            };
            /** Array of customer addresses. Limited to 10 */
            readonly addresses?: readonly components["schemas"]["address_Full"][];
            /** Array of customer attributes. Limited to 10. */
            readonly attributes?: readonly components["schemas"]["attribute_Full"][];
            /** Array of form fields. Controlled by `formfields` parameter. */
            readonly form_fields?: readonly components["schemas"]["formFieldValue_Full"][];
            readonly store_credit_amounts?: components["schemas"]["CustomerStoredCreditAmounts"];
            /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
            readonly accepts_product_review_abandoned_cart_emails?: boolean;
            readonly channel_ids?: components["schemas"]["customerChannelIds"];
        };
        readonly customer_Post: {
            /** The email of the customer. Must be unique. */
            readonly email: string;
            /** The first name of the customer. */
            readonly first_name: string;
            /** The last name of the customer. */
            readonly last_name: string;
            /** The company of the customer. */
            readonly company?: string;
            /** The phone number of the customer. */
            readonly phone?: string;
            /** The customer notes. */
            readonly notes?: string;
            /** The tax exempt category code for the customer. */
            readonly tax_exempt_category?: string;
            /** ID of the group which this customer belongs to. */
            readonly customer_group_id?: number;
            /** Array of customer addresses. Limited to 10 */
            readonly addresses: readonly components["schemas"]["customerAddresses_Base"][];
            /** Array of customer attributes. Limited to 10. */
            readonly attributes?: readonly components["schemas"]["customerAttributes_Base"][];
            readonly authentication?: components["schemas"]["customerAuthentication_PostPut"];
            /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
            readonly accepts_product_review_abandoned_cart_emails?: boolean;
            readonly store_credit_amounts?: components["schemas"]["CustomerStoredCreditAmounts"];
            /** Channel ID the customer has been created from */
            readonly origin_channel_id?: number;
            /** Array of channels the customer can access */
            readonly channel_ids?: readonly number[];
        };
        readonly customer_Put: {
            /** The email of the customer. Must be unique. */
            readonly email?: string;
            /** The first name of the customer. */
            readonly first_name?: string;
            /** The last name of the customer. */
            readonly last_name?: string;
            /** The company of the customer. */
            readonly company?: string;
            /** The phone number of the customer. */
            readonly phone?: string;
            /** The IP address from which this customer was registered. */
            readonly registration_ip_address?: string;
            /** The customer notes. */
            readonly notes?: string;
            /** The tax exempt category code for the customer. */
            readonly tax_exempt_category?: string;
            /** ID of the group which this customer belongs to. */
            readonly customer_group_id?: number;
            /** The unique numeric ID of the customer. */
            readonly id: number;
            readonly authentication?: components["schemas"]["customerAuthentication_PostPut"];
            /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
            readonly accepts_product_review_abandoned_cart_emails?: boolean;
            readonly store_credit_amounts?: components["schemas"]["CustomerStoredCreditAmounts"];
            /** Arrays of channels the customer can access */
            readonly channel_ids?: readonly number[];
        };
        readonly attributeValue_Full: components["schemas"]["attribueValue_Base"] & {
            /** The date on which the customer attribute value was modified. */
            readonly date_modified?: string;
            /** The date of which the customer attribute value was created. */
            readonly date_created?: string;
        };
        readonly attribueValue_Base: {
            /** Attribute value ID. */
            readonly id?: number;
            /** Attribute ID. */
            readonly attribute_id: number;
            /** Attribute value. This will always be a string, regardless of the attribute's type. */
            readonly value: string;
            /** Customer ID. */
            readonly customer_id: number;
        };
        readonly customerAttributeValue_Full: {
            /** Attribute ID. */
            readonly attribute_id: number;
            /** Attribute value. This will always be a string, regardless of the attributes type. */
            readonly attribute_value: string;
        };
        readonly attribute_Full: {
            /** Attribute name. */
            readonly name: string;
            /** Attribute type should match one of: string, number, date. When doing a */
            readonly type: "string" | "number" | "date";
            /** Attribute ID. */
            readonly id: number;
            /** The date on which the customer attribute was modified. */
            readonly date_modified?: string;
            /** The date of which the customer attribute was created. */
            readonly date_created?: string;
        };
        /** Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer. */
        readonly attribute_Put: {
            /** Attribute name. */
            readonly name: string;
            /** Attribute ID. */
            readonly id: number;
        };
        readonly attribute_Post: {
            /** Attribute name. */
            readonly name: string;
            /** Attribute type should match one of: string, number, date. When doing a */
            readonly type: "string" | "number" | "date";
        };
        readonly address_Full: {
            /** The first name of the customer address. */
            readonly first_name: string;
            /** The last name of the customer address. */
            readonly last_name: string;
            /** The company of the customer address. */
            readonly company?: string;
            /** The address 1 line. */
            readonly address1: string;
            /** The address 2 line. */
            readonly address2?: string;
            /** The city of the customer address. */
            readonly city: string;
            /** The state or province name */
            readonly state_or_province: string;
            /** The postal code of the customer address. */
            readonly postal_code: string;
            /** The country code of the customer address. */
            readonly country_code: string;
            /** The phone number of the customer address. */
            readonly phone?: string;
            /** The address type. Residential or Commercial */
            readonly address_type?: "residential" | "commercial";
            /** The customer ID. */
            readonly customer_id: number;
            /** The unique numeric ID of the address. */
            readonly id: number;
            /** The country name of the customer address. */
            readonly country?: string;
            /** Array of form fields. Controlled by `formfields` parameter. */
            readonly form_fields?: readonly components["schemas"]["formFieldValue_Full"][];
        };
        readonly address_Put: {
            /** The first name of the customer address. */
            readonly first_name: string;
            /** The last name of the customer address. */
            readonly last_name: string;
            /** The company of the customer address. */
            readonly company?: string;
            /** The address 1 line. */
            readonly address1: string;
            /** The address 2 line. */
            readonly address2?: string;
            /** The city of the customer address. */
            readonly city: string;
            /** The state or province name */
            readonly state_or_province: string;
            /** The postal code of the customer address. */
            readonly postal_code: string;
            /** The country code of the customer address. */
            readonly country_code: string;
            /** The phone number of the customer address. */
            readonly phone?: string;
            /** The address type. Residential or Commercial */
            readonly address_type?: "residential" | "commercial";
            /** The customer ID. */
            readonly customer_id: number;
            /** The unique numeric ID of the address. */
            readonly id: number;
        };
        readonly address_Post: {
            /** The first name of the customer address. */
            readonly first_name: string;
            /** The last name of the customer address. */
            readonly last_name: string;
            /** The company of the customer address. */
            readonly company?: string;
            /** The address 1 line. */
            readonly address1: string;
            /** The address 2 line. */
            readonly address2?: string;
            /** The city of the customer address. */
            readonly city: string;
            /** The state or province name */
            readonly state_or_province: string;
            /** The postal code of the customer address. */
            readonly postal_code: string;
            /** The country code of the customer address. */
            readonly country_code: string;
            /** The phone number of the customer address. */
            readonly phone?: string;
            /** The address type. Residential or Commercial */
            readonly address_type?: "residential" | "commercial";
            /** The customer ID. */
            readonly customer_id: number;
        };
        /** The `address` object for the `customer` object's `addresses` array. */
        readonly customerAddresses_Base: {
            /** The first name of the customer address. */
            readonly first_name: string;
            /** The last name of the customer address. */
            readonly last_name: string;
            /** The company of the customer address. */
            readonly company?: string;
            /** The address 1 line. */
            readonly address1: string;
            /** The address 2 line. */
            readonly address2?: string;
            /** The city of the customer address. */
            readonly city: string;
            /** The state or province name */
            readonly state_or_province: string;
            /** The postal code of the customer address. */
            readonly postal_code: string;
            /** The country code of the customer address. */
            readonly country_code: string;
            /** The phone number of the customer address. */
            readonly phone?: string;
            /** The address type. Residential or Commercial */
            readonly address_type?: "residential" | "commercial";
        };
        readonly customerAuthentication_PostPut: {
            /** If `true`, this customer will be forced to change password on next login. */
            readonly force_password_reset?: boolean;
        } & {
            /** New password for customer. Write only field */
            readonly new_password?: string;
        };
        readonly customerAuthentication_Base: {
            /** If `true`, this customer will be forced to change password on next login. */
            readonly force_password_reset?: boolean;
        };
        /** The address type. Residential or Commercial */
        readonly addressType: "residential" | "commercial";
        /** Pagination links for the previous and next parts of the whole collection. */
        readonly Links: {
            /** Link to the previous page returned in the response. */
            readonly previous?: string;
            /** Link to the current page returned in the response. */
            readonly current?: string;
            /** Link to the next page returned in the response. */
            readonly next?: string;
        };
        /** Attribute type should match one of: string, number, date. When doing a */
        readonly Type: "string" | "number" | "date";
        readonly CustomerFormFieldValue: {
            /** The form field name. */
            readonly name: string;
            readonly value: string | number | readonly string[];
        } & {
            readonly customer_id: number;
        };
        readonly formFieldValue_Full: {
            /** The form field name. */
            readonly name: string;
            readonly value: string | number | readonly string[];
            readonly customer_id: number;
        } | {
            /** The form field name. */
            readonly name: string;
            readonly value: string | number | readonly string[];
            /** The Customer Address ID. */
            readonly address_id: number;
        };
        /** Response payload for the BigCommerce API. */
        readonly consent_Full: {
            readonly allow?: readonly components["schemas"]["consentAllow"][];
            readonly deny?: readonly components["schemas"]["Deny"][];
            /** The date of which the customer consent was last updated. */
            readonly updated_at?: string;
        };
        /** Response payload for the BigCommerce API. */
        readonly DeclareCustomerConsentResponse: {
            /** Customer ID. */
            readonly customer_id?: {
                readonly [key: string]: any;
            };
            readonly allow?: readonly components["schemas"]["consentAllow"][];
            readonly deny?: readonly components["schemas"]["Deny"][];
            /** The date of which the customer consent was last updated. */
            readonly updated_at?: string;
        };
        readonly consentAllow: readonly ("essential" | "functional" | "analytics" | "targeting")[];
        readonly Deny: readonly ("essential" | "functional" | "analytics" | "targeting")[];
        /** Request payload for the BigCommerce API. */
        readonly DeclareCustomerConsentRequest: {
            readonly allow?: readonly components["schemas"]["consentAllow"][];
            readonly deny?: readonly components["schemas"]["Deny"][];
        };
        readonly customer_Base: {
            /** The email of the customer. Must be unique. */
            readonly email?: string;
            /** The first name of the customer. */
            readonly first_name?: string;
            /** The last name of the customer. */
            readonly last_name?: string;
            /** The company of the customer. */
            readonly company?: string;
            /** The phone number of the customer. */
            readonly phone?: string;
            /** The customer notes. */
            readonly notes?: string;
            /** The tax exempt category code for the customer. */
            readonly tax_exempt_category?: string;
            /** ID of the group which this customer belongs to. */
            readonly customer_group_id?: number;
        };
        /** Array of customer attributes. Limited to 10 */
        readonly customerAttributes_Full: readonly {
            /** Attribute ID. */
            readonly attribute_id: number;
            /** Attribute value. This will always be a string, regardless of the attributes type. */
            readonly value: string;
            /** Attribute value ID. */
            readonly id?: number;
            /** Customer ID. */
            readonly customer_id: number;
            /** The date on which the customer attribute value was modified. */
            readonly date_modified?: string;
            /** The date of which the customer attribute value was created. */
            readonly date_created?: string;
        }[];
        readonly customerAttributes_Base: {
            /** Attribute ID. */
            readonly attribute_id?: number;
            /** Attribute value. This will always be a string, regardless of the attribute's type. */
            readonly attribute_value?: string;
        };
        readonly attribute_Base: {
            /** Attribute name. */
            readonly name: string;
            /** Attribute type should match one of: string, number, date. When doing a */
            readonly type: "string" | "number" | "date";
            /** Attribute ID. */
            readonly id: number;
            /** The date on which the customer attribute was modified. */
            readonly date_modified?: string;
            /** The date of which the customer attribute was created. */
            readonly date_created?: string;
        };
        /** Array of channel ids the Customer has access to. */
        readonly customerChannelIds: readonly number[];
        /** Details about a stored card instrument which includes details around billing, last 4 digits, issuer, etc. */
        readonly CardInstrument: {
            /** Type of instrument */
            readonly type?: "stored_card";
            /** An identifier representing this stored instrument */
            readonly token?: string;
            /** Identifies whether this stored instrument is default for the customer */
            readonly is_default?: boolean;
            /** Card brand */
            readonly brand?: string;
            /** Expiry month for this card */
            readonly expiry_month?: number;
            /** Expiry year for this card */
            readonly expiry_year?: number;
            /** Issuer identification number for this card */
            readonly issuer_identification_number?: string;
            /** Last four digits of this card */
            readonly last_4?: string;
            readonly billing_address?: components["schemas"]["BillingAddress"];
        };
        /** A PayPal account stored instrument */
        readonly PayPalAccountInstrument: {
            /** Instrument type */
            readonly type?: "stored_paypal_account";
            /** An identifier representing this stored instrument */
            readonly token?: string;
            /** Identifies whether this stored instrument is default for the customer */
            readonly is_default?: boolean;
            /** PayPal email address */
            readonly email?: string;
        };
        /** A stored bank account instrument */
        readonly BankAccountInstrument: {
            /** Instrument type */
            readonly type?: "stored_bank_account";
            /** An identifier representing this stored instrument */
            readonly token?: string;
            /** Identifies whether this stored instrument is default for the customer */
            readonly is_default?: boolean;
            /** A masked bank account number */
            readonly masked_account_number?: string;
            /** Issuer identifier for the account */
            readonly issuer?: string;
        };
        readonly BillingAddress: {
            /** First name of the card holder */
            readonly first_name?: string;
            /** Last name of the card holder */
            readonly last_name?: string;
            readonly email?: string;
            /** Company of the card holder */
            readonly company?: string;
            readonly address1?: string;
            readonly address2?: string;
            readonly city?: string;
            /** Represents state or province */
            readonly state_or_province?: string;
            readonly state_or_province_code?: string;
            /** ISO-3166-1 2 letter country code */
            readonly country_code?: string;
            readonly phone?: string;
        };
        /** Store credit. */
        readonly CustomerStoredCreditAmounts: readonly {
            readonly amount?: number;
        }[];
        /** Customer Settings */
        readonly CustomerSettingsObject: {
            /** Controls the privacy settings */
            readonly privacy_settings?: {
                /** Determines if a customer requires consent for tracking privacy. */
                readonly ask_shopper_for_tracking_consent?: boolean;
                /** The URL for a website's privacy policy */
                readonly policy_url?: string;
            };
            /** The settings for a collection of customers */
            readonly customer_group_settings?: {
                /** The ID for a guest customer group */
                readonly guest_customer_group_id?: number;
                /** The ID for a default customer group */
                readonly default_customer_group_id?: number;
            };
        };
        readonly CustomerChannelSettingsObject: {
            /** Controls the privacy settings */
            readonly privacy_settings?: {
                /** Determines if a customer requires consent for tracking privacy */
                readonly ask_shopper_for_tracking_consent?: boolean;
                /** The URL for a website's privacy policy */
                readonly policy_url?: string;
            };
            /** The settings for a collection of customers */
            readonly customer_group_settings?: {
                /** The ID for a guest customer group */
                readonly guest_customer_group_id?: number;
                /** The ID for a default customer group */
                readonly default_customer_group_id?: number;
            };
            /**
             * * Determines if a channel allows global customer to login
             * * Determines if customers created on this channel will get global access/login
             */
            readonly allow_global_logins?: boolean;
        };
        readonly ValidateCustomerCredentialsObject: {
            /** Customer email address */
            readonly email: string;
            /** Customer password */
            readonly password: string;
            /** ChannelId to check the customer credentials against - If this field is empty we will use channel 1 */
            readonly channel_id?: number;
        };
        readonly ValidateCustomerCredentialsResponseObject: {
            /** returns the customer Id */
            readonly customer_id?: number | null;
            /** indicates if the provided credentials are valid */
            readonly is_valid?: boolean;
        };
    };
    readonly responses: {
        /** Customer Collection Response */
        readonly CustomerCollectionResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["customer_Full"][];
                    readonly meta?: components["schemas"]["_metaCollection"];
                };
            };
        };
        /** Customer Response */
        readonly CustomerResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["customer_Full"][];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
                readonly "with include": unknown;
            };
        };
        readonly AddressCollectionResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /** The first name of the customer address. */
                        readonly first_name: string;
                        /** The last name of the customer address. */
                        readonly last_name: string;
                        /** The company of the customer address. */
                        readonly company?: string;
                        /** The address 1 line. */
                        readonly address1: string;
                        /** The address 2 line. */
                        readonly address2?: string;
                        /** The city of the customer address. */
                        readonly city: string;
                        /** The state or province name */
                        readonly state_or_province: string;
                        /** The postal code of the customer address. */
                        readonly postal_code: string;
                        /** The country code of the customer address. */
                        readonly country_code: string;
                        /** The phone number of the customer address. */
                        readonly phone?: string;
                        /** The address type. Residential or Commercial */
                        readonly address_type?: "residential" | "commercial";
                        /** The customer ID. */
                        readonly customer_id: number;
                        /** The unique numeric ID of the address. */
                        readonly id: number;
                        /** The country name of the customer address. */
                        readonly country?: string;
                        /** Array of form fields. Controlled by `formfields` parameter. */
                        readonly form_fields?: readonly (({
                            /** The form field name. */
                            readonly name: string;
                            readonly value: string | number | readonly string[];
                        } & {
                            readonly customer_id: number;
                        }) | ({
                            /** The form field name. */
                            readonly name: string;
                            readonly value: string | number | readonly string[];
                        } & {
                            /** The Customer Address ID. */
                            readonly address_id: number;
                        }))[];
                    }[];
                    readonly meta?: components["schemas"]["_metaCollection"];
                };
            };
        };
        readonly AddressResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /** The first name of the customer address. */
                        readonly first_name: string;
                        /** The last name of the customer address. */
                        readonly last_name: string;
                        /** The company of the customer address. */
                        readonly company?: string;
                        /** The address 1 line. */
                        readonly address1: string;
                        /** The address 2 line. */
                        readonly address2?: string;
                        /** The city of the customer address. */
                        readonly city: string;
                        /** The state or province name */
                        readonly state_or_province: string;
                        /** The postal code of the customer address. */
                        readonly postal_code: string;
                        /** The country code of the customer address. */
                        readonly country_code: string;
                        /** The phone number of the customer address. */
                        readonly phone?: string;
                        /** The address type. Residential or Commercial */
                        readonly address_type?: "residential" | "commercial";
                        /** The customer ID. */
                        readonly customer_id: number;
                        /** The unique numeric ID of the address. */
                        readonly id: number;
                        /** The country name of the customer address. */
                        readonly country?: string;
                        /** Array of form fields. Controlled by `formfields` parameter. */
                        readonly form_fields?: readonly (({
                            /** The form field name. */
                            readonly name: string;
                            readonly value: string | number | readonly string[];
                        } & {
                            readonly customer_id: number;
                        }) | ({
                            /** The form field name. */
                            readonly name: string;
                            readonly value: string | number | readonly string[];
                        } & {
                            /** The Customer Address ID. */
                            readonly address_id: number;
                        }))[];
                    }[];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
        };
        readonly CustomerAttributeValueCollectionResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /** Attribute ID. */
                        readonly attribute_id: number;
                        /** Attribute value. This will always be a string, regardless of the attributes type. */
                        readonly attribute_value: string;
                        /** Attribute value ID. */
                        readonly id?: number;
                        /** Customer ID. */
                        readonly customer_id: number;
                        /** The date on which the customer attribute value was modified. */
                        readonly date_modified?: string;
                        /** The date of which the customer attribute value was created. */
                        readonly date_created?: string;
                    }[];
                    /** Data about the response, including pagination and collection totals. */
                    readonly meta?: {
                        /** Data about the response, including pagination and collection totals. */
                        readonly pagination?: {
                            /** Total number of items in the result set. */
                            readonly total?: number;
                            /** Total number of items in the collection response. */
                            readonly count?: number;
                            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
                            readonly per_page?: number;
                            /** The page you are currently on within the collection. */
                            readonly current_page?: number;
                            /** The total number of pages in the collection. */
                            readonly total_pages?: number;
                            /** Pagination links for the previous and next parts of the whole collection. */
                            readonly links?: {
                                /** Link to the previous page returned in the response. */
                                readonly previous?: string;
                                /** Link to the current page returned in the response. */
                                readonly current?: string;
                                /** Link to the next page returned in the response. */
                                readonly next?: string;
                            };
                        };
                    };
                };
            };
        };
        readonly CustomerAttributeValueResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /** Attribute ID. */
                        readonly attribute_id: number;
                        /** Attribute value. This will always be a string, regardless of the attributes type. */
                        readonly value: string;
                        /** Attribute value ID. */
                        readonly id?: number;
                        /** Customer ID. */
                        readonly customer_id: number;
                        /** The date on which the customer attribute value was modified. */
                        readonly date_modified?: string;
                        /** The date of which the customer attribute value was created. */
                        readonly date_created?: string;
                    }[];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
        };
        readonly CustomerAttributeCollectionResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /** Attribute ID. */
                        readonly attribute_id: number;
                        /** Attribute value. This will always be a string, regardless of the attributes type. */
                        readonly value: string;
                        /** Attribute value ID. */
                        readonly id?: number;
                        /** Customer ID. */
                        readonly customer_id: number;
                        /** The date on which the customer attribute value was modified. */
                        readonly date_modified?: string;
                        /** The date of which the customer attribute value was created. */
                        readonly date_created?: string;
                    }[];
                    /** Data about the response, including pagination and collection totals. */
                    readonly meta?: {
                        readonly pagination?: any;
                    };
                };
            };
        };
        readonly CustomerAttributesResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /** Attribute name. */
                        readonly name: string;
                        /** Attribute type should match one of: string, number, date. When doing a */
                        readonly type: "string" | "number" | "date";
                        /** Attribute ID. */
                        readonly id: number;
                        /** The date on which the customer attribute was modified. */
                        readonly date_modified?: string;
                        /** The date of which the customer attribute was created. */
                        readonly date_created?: string;
                    }[];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
        };
        readonly FormFieldValueCollectionResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly (({
                        /** The form field name. */
                        readonly name: string;
                        readonly value: string | number | readonly string[];
                    } & {
                        readonly customer_id: number;
                    }) | ({
                        /** The form field name. */
                        readonly name: string;
                        readonly value: string | number | readonly string[];
                    } & {
                        /** The Customer Address ID. */
                        readonly address_id: number;
                    }))[];
                    /** Data about the response, including pagination and collection totals. */
                    readonly meta?: {
                        /** Data about the response, including pagination and collection totals. */
                        readonly pagination?: {
                            /** Total number of items in the result set. */
                            readonly total?: number;
                            /** Total number of items in the collection response. */
                            readonly count?: number;
                            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
                            readonly per_page?: number;
                            /** The page you are currently on within the collection. */
                            readonly current_page?: number;
                            /** The total number of pages in the collection. */
                            readonly total_pages?: number;
                            /** Pagination links for the previous and next parts of the whole collection. */
                            readonly links?: {
                                /** Link to the previous page returned in the response. */
                                readonly previous?: string;
                                /** Link to the current page returned in the response. */
                                readonly current?: string;
                                /** Link to the next page returned in the response. */
                                readonly next?: string;
                            };
                        };
                    };
                };
            };
        };
        readonly FormFieldValuesResponse: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly (({
                        /** The form field name. */
                        readonly name: string;
                        readonly value: string | number | readonly string[];
                    } & {
                        readonly customer_id: number;
                    }) | ({
                        /** The form field name. */
                        readonly name: string;
                        readonly value: string | number | readonly string[];
                    } & {
                        /** The Customer Address ID. */
                        readonly address_id: number;
                    }))[];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
        };
        readonly consent_Resp: {
            readonly content: {
                readonly "application/json": components["schemas"]["consent_Full"];
            };
        };
    };
    readonly parameters: {
        readonly customerId: string;
        /** Filter items by first_name and last_name. `name=moriarty,holmes` */
        readonly FilterNameParam: readonly string[];
        /** Filter items by email. `email:in=janedoe@example.com` */
        readonly FilterEmailParam: string;
        /**
         * Filter items by substring in first_name and last_name (%substring% - use with % symbols).
         * `name:like=moriarty&name:like=doe`
         */
        readonly FilterNameLikeParam: readonly string[];
        /**
         * Filter items by substring in first_name and last_name (%substring% - use with % symbols).
         * `name:like=moriarty,doe`
         */
        readonly FilterAttributeNameLikeParam: string;
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         */
        readonly FilterIdParam: readonly number[];
        /** Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
        readonly FilterDateModifiedParam: string;
        /** Filter items by mininum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
        readonly FilterDateModifiedMinParam: string;
        /** Filter items by maximum date_modified `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
        readonly FilterDateModifiedMaxParam: string;
        /** Filter items by date_created. `date_created=2018-09-05T13:43:54` */
        readonly FilterDateCreatedParam: string;
        /** Filter items by date_created. `date_created:min=2018-09-05` */
        readonly FilterDateCreatedMinParam: string;
        /** Filter items by maximum date_created. `date_created:max=2018-09-10` */
        readonly FilterDateCreatedMaxParam: string;
        /**
         * Filter items by registration_ip_address. If the customer was created using the API, then registration address is blank.
         * `registration_ip_address:in=12.345.6.789`
         */
        readonly FilterCustomerRegistrationIPAddressParam: readonly number[];
        /** Filter items by company. `company:in=bigcommerce,commongood` */
        readonly FilterCompanyParam: readonly string[];
        /** Filter items by customer_group_id. `customer_group_id:in=5,6` */
        readonly FilterCustomerGroupParam: readonly string[];
        /** The type of the customer attribute. `type=string` */
        readonly FilterCustomerAttributeTypeParam: "string" | "number" | "date";
        /** The attribute name for which we should return values. `name=age` */
        readonly FilterAttributeValueByNameParam: string;
        /** Page number. `page=1` */
        readonly FilterPageParam: number;
        /** Items count per page. `limit=50` */
        readonly FilterLimitParam: number;
        /**
         * Indicates whether to include customer sub-resources:
         *  * `addresses` - customer addresses
         *  * `storecredit` - store credit
         *  * `attributes` - customer attributes and address attributes
         *  * `formfields` - customer and address form fields
         *
         *  `include=addresses,storecredit,attributes,formfields`
         */
        readonly FilterCustomerIncludeParam: "addresses" | "storecredit" | "attributes" | "formfields";
        /**
         * Indicates whether to include customer address sub-resources:
         * * `formfields` - address form fields
         * `include=formfields`
         */
        readonly FilterAddressIncludeParam: "formfields";
        readonly Accept: string;
        readonly "Content-Type": string;
        /** The ID of the customer. `customer_id:in=23,24,55` */
        readonly FilterCustomerIdParam: readonly number[];
        /** The attribute ID for which we should return values. `attribute_id:in=1,2` */
        readonly FilterAttributeIdParam: readonly number[];
        /** The ID of the *Customer*. */
        readonly FilterCustomerIdEqualsParam: number;
        /** The ID of the *Customer Address*. */
        readonly FilterAddressIdEqualsParam: number;
        /** The fields name. */
        readonly FilterFormFieldNameParam: string;
        /**
         * The field type.
         *  * `checkboxes` - checkboxes field
         *  * `date` - date field
         *  * `multiline` - multiline text field
         *  * `numbers` - numbers only field
         *  * `password` - password field
         *  * `radiobuttons` - radio buttons field
         *  * `text` - text field
         *  * `picklist` - pick list field
         */
        readonly FilterFormFieldTypeParam: "checkboxes" | "date" | "multiline" | "numbers" | "password" | "radiobuttons" | "text" | "picklist";
    };
}
export interface operations {
    /**
     * Returns a list of Customers. Optional filter parameters can be passed in.
     *
     * **Notes**
     *
     * Attribute names are not available on the customer object.
     */
    readonly CustomersGet: {
        readonly parameters: {
            readonly query: {
                /** Page number. `page=1` */
                readonly page?: number;
                /** Items count per page. `limit=50` */
                readonly limit?: number;
                /**
                 * Filter items by ID.
                 * `id:in=4,5,6`
                 */
                readonly "id:in"?: readonly number[];
                /** Filter items by company. `company:in=bigcommerce,commongood` */
                readonly "company:in"?: readonly string[];
                /** Filter items by customer_group_id. `customer_group_id:in=5,6` */
                readonly "customer_group_id:in"?: readonly string[];
                /** Filter items by date_created. `date_created=2018-09-05T13:43:54` */
                readonly date_created?: string;
                /** Filter items by maximum date_created. `date_created:max=2018-09-10` */
                readonly "date_created:max"?: string;
                /** Filter items by date_created. `date_created:min=2018-09-05` */
                readonly "date_created:min"?: string;
                /** Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
                readonly date_modified?: string;
                /** Filter items by mininum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
                readonly "date_modified:min"?: string;
                /** Filter items by maximum date_modified `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
                readonly "date_modified:max"?: string;
                /** Filter items by email. `email:in=janedoe@example.com` */
                readonly "email:in"?: string;
                /** Filter items by first_name and last_name. `name=james moriarty` */
                readonly "name:in"?: readonly string[];
                /**
                 * Filter items by substring in first_name and last_name.
                 * `name:like=moriarty, sherlock`
                 * Concatenates the first_name and last_name fields.
                 */
                readonly "name:like"?: readonly string[];
                /**
                 * Filter items by registration_ip_address. If the customer was created using the API, then registration address is blank.
                 * `registration_ip_address:in=12.345.6.789`
                 */
                readonly "registration_ip_address:in"?: readonly number[];
                /**
                 * Indicates whether to include customer sub-resources:
                 *  * `addresses` - customer addresses
                 *  * `storecredit` - store credit
                 *  * `attributes` - customer attributes and address attributes
                 *  * `formfields` - customer and address form fields
                 *
                 *  `include=addresses,storecredit,attributes,formfields`
                 */
                readonly include?: "addresses" | "storecredit" | "attributes" | "formfields";
                /**
                 * Sort items by date_created or last_name:
                 * * `date_created:asc` - date created, ascending
                 * * `date_created:desc` - date created, descending
                 * * `last_name:asc` - last name, ascending
                 * * `last_name:desc` - last name, descending
                 *
                 * Example: `sort=last_name:asc`
                 */
                readonly sort?: "date_created:asc" | "date_created:desc" | "last_name:asc" | "last_name:desc";
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomerCollectionResponse"];
        };
    };
    /**
     * Updates Customers. Subresource updates are not supported. Multiple customers can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer* This must be included in the request body
     *
     * **Read Only Fields**
     * * id
     * * registration_ip_address
     * * date_created
     * * date_modified
     *
     *
     * **Notes**
     *
     * * Attributes Values can not be updated using Update a Customer. Use the Update a [Customer Attribute Values](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attribute-values/customersattributevaluesput) endpoint.
     * * channel_ids -- Updating the list of channels a customer can access may create some side effects in a multi-storefront situation. This list determines which customer account we will use to authenticate a shopper given a channel.
     */
    readonly CustomersPut: {
        readonly responses: {
            readonly 200: components["responses"]["CustomerCollectionResponse"];
            /** The `Customer` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["customer_Put"][];
            };
        };
    };
    /**
     * Creates Customers. Multiple customers can be created in one call.
     *
     * **Required Fields**
     * * last_name
     * * first_name
     * * email
     *
     * **Required Fields Customer Address**
     * * first_name
     * * city
     * * country_code
     * * state_or_province
     * * last_name
     * * address1
     * * postal_code
     *
     * **Required Fields Attributes**
     * * Attributes must be [created](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attributes/customersattributespost) **BEFORE** creating a customer.
     * * attribute_id
     * * attribute_value -- This is input as a string, regardless of the [Type](/api-reference/customer-subscribers/v3-customers-api/models/type).
     *
     * **Notes**
     * A customer can be created with global access or channel-specific access.
     * * **Global access:**
     *   * Make sure the channel has `allow_global_logins` enabled. This is on by default only for the default storefront. Find more info at [Customer Settings > Channel](https://developer.bigcommerce.com/api-reference/store-management/customers-v3/customer-settings-channel/customersettingschannelget)
     *   * Omit `channel_ids` field, or provide `channel_ids: null`.
     * * **Channel-specific access:**
     *   * Provide a `channel_ids` array containing the channels accessible by the customer.
     */
    readonly CustomersPost: {
        readonly responses: {
            readonly 200: components["responses"]["CustomerCollectionResponse"];
            /** The *Customer* was not valid. This is the result of missing required fields or trying to edit a read only field. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["customer_Post"][];
            };
        };
    };
    /**
     * Deletes Customers.
     *
     * **Required Query**
     * * id:in -- ID of the customer
     *
     * **Notes**
     *
     * A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
     */
    readonly CustomersDelete: {
        readonly parameters: {
            readonly query: {
                /**
                 * Filter items by ID.
                 * `id:in=4,5,6`
                 */
                readonly "id:in": readonly number[];
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a list of Customer Addresses. Optional filter parameters can be passed in. */
    readonly CustomersAddressesGet: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly query: {
                /** Page number. `page=1` */
                readonly page?: number;
                /** Items count per page. `limit=50` */
                readonly limit?: number;
                /** Filter items by company. `company:in=bigcommerce,commongood` */
                readonly "company:in"?: readonly string[];
                /** Filter items by first_name and last_name. `name:in=James+Moriarty` */
                readonly "name:in"?: readonly string[];
                /** Filter by the ID of the customer. Also accepts comma-separated IDs to filter for multiple customers. `customer_id:in=23,24,55` */
                readonly "customer_id:in"?: readonly number[];
                /**
                 * Indicates whether to include customer address sub-resources:
                 * * `formfields` - address form fields
                 * `include=formfields`
                 */
                readonly include?: "formfields";
                /**
                 * Filter items by ID.
                 * `id:in=4,5,6`
                 */
                readonly "id:in"?: readonly number[];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["AddressCollectionResponse"];
        };
    };
    /**
     * Updates a Customer Address. Multiple customer addresses can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer Address*
     * * customer_id -- ID of the *Customer*.
     */
    readonly CustomersAddressesPut: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["AddressCollectionResponse"];
            /** The `Address` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["address_Put"][];
            };
        };
    };
    /**
     * Creates a Customer Address. Multiple customer addresses can be created in one call.
     *
     * **Required Fields**
     * * first_name
     * * city
     * * customer_id
     * * country_code
     * * state_or_province
     * * last_name
     * * address1
     * * postal_code
     */
    readonly CustomersAddressesPost: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["AddressCollectionResponse"];
            /** The `Address` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["address_Post"][];
            };
        };
    };
    /**
     * Deletes a Customer Address.
     *
     * **Required Query**
     * * id:in -- ID of the *Customer Address*
     */
    readonly CustomersAddressesDelete: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly query: {
                /**
                 * Filter items by ID.
                 * `id:in=4,5,6`
                 */
                readonly "id:in": readonly number[];
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Validate a customer credentials - This endpoint has special rate limiting protections to protect against abuse */
    readonly CustomerValidateCredentials: {
        readonly responses: {
            /** Returns if the customer credentials provided are valid or not */
            readonly 200: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ValidateCustomerCredentialsResponseObject"];
                };
            };
            /** This is the result of missing required fields. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
            /** Allowed number of requests exceeded */
            readonly 429: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["ValidateCustomerCredentialsObject"];
            };
        };
    };
    /** Returns the global-level customer settings. */
    readonly CustomerSettingsGet: {
        readonly responses: {
            /** Returns customer settings values for global level */
            readonly 200: {
                readonly content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CustomerSettingsObject"];
                        readonly meta?: {
                            readonly [key: string]: any;
                        };
                    };
                };
            };
        };
    };
    /** Updates the customer settings on the global level. */
    readonly CustomerSettingsPut: {
        readonly responses: {
            /** Customer settings are returned on a global level. */
            readonly 200: {
                readonly content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CustomerSettingsObject"];
                        readonly meta?: {
                            readonly [key: string]: any;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CustomerSettingsObject"];
            };
        };
    };
    /**
     * Returns the customer settings per channel.
     *
     * **Notes**
     *
     *  * `null` indicates that there is no override per given channel and values are inherited from the global level.
     */
    readonly CustomerSettingsChannelGet: {
        readonly parameters: {
            readonly path: {
                readonly channel_id: number;
            };
        };
        readonly responses: {
            /** Customer settings for this channel are returned. */
            readonly 200: {
                readonly content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CustomerChannelSettingsObject"];
                        readonly meta?: {
                            readonly [key: string]: any;
                        };
                    };
                };
            };
        };
    };
    /**
     * Update the customer settings per channel
     *
     * **Required Fields**
     *
     * * `channel_id`
     *
     * **Notes**
     *
     * * Setting `null` will delete override per given channel and values will be inherited from the global level.
     */
    readonly CustomerSettingsChannelPut: {
        readonly parameters: {
            readonly path: {
                readonly channel_id: number;
            };
        };
        readonly responses: {
            /** Customer settings are returned. */
            readonly 200: {
                readonly content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CustomerSettingsObject"];
                        readonly meta?: {
                            readonly [key: string]: any;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CustomerChannelSettingsObject"];
            };
        };
    };
    /** Returns a list of Customer Attributes. You can pass in optional filter parameters. */
    readonly CustomersAttributesGet: {
        readonly parameters: {
            readonly query: {
                /** Page number. `page=1` */
                readonly page?: number;
                /** Items count per page. `limit=50` */
                readonly limit?: number;
                /** Filter items by customer attribute name `name=Date+Joined` */
                readonly name?: string;
                /** Filter items by substring in customer attribute name. `name:like=join` */
                readonly "name:like"?: string;
                /** The type of the customer attribute. */
                readonly type?: string;
                /** Filter items by `date_created`. `date_created=2021-01-07T20:28:16Z` */
                readonly date_created?: string;
                /** Filter items by maximum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_created:max"?: string;
                /** Filter items by minimum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_created:min"?: string;
                /** Filter items by `date_modified`. */
                readonly date_modified?: string;
                /** Filter items by maximum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_modified:max"?: string;
                /** Filter items by minimum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_modified:min"?: string;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomerAttributesResponse"];
        };
    };
    /**
     * Updates a Customer Attribute. Multiple customer attributes can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer Attribute*
     *
     * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     */
    readonly CustomersAttributesPut: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomerAttributesResponse"];
            /** The `Attribute` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["attribute_Put"][];
            };
        };
    };
    /**
     * Creates a Customer Attribute. Multiple customer attributes can be created in one call.
     *
     * **Required Fields**
     * * name
     * * type
     *
     * **Notes**
     *
     * Once the data type is set, it cannot be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     *
     * Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.
     *
     * A store cannot have more than 50 customer attributes.
     */
    readonly CustomersAttributesPost: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomerAttributesResponse"];
            /** The `Attribute` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["attribute_Post"][];
            };
        };
    };
    /**
     * Deletes Customer Attributes from the store.
     *
     * **Required Query**
     * * id:in -- ID of the *Customer Attribute*
     */
    readonly CustomersAttributesDelete: {
        readonly parameters: {
            readonly query: {
                /** Filter items by ID. */
                readonly "id:in": readonly number[];
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a list of Customer Attribute Values. Optional filter parameters can be passed in. */
    readonly CustomersAttributeValuesGet: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly query: {
                /** Page number. `page=1` */
                readonly page?: number;
                /** Items count per page. `limit=50` */
                readonly limit?: number;
                /** Filter items by the customer ID. `customer_id:in=23,24,55` */
                readonly "customer_id:in"?: readonly number[];
                /** Filter items by the attribute ID. `attribute_id:in=1,2` */
                readonly "attribute_id:in"?: readonly number[];
                /** Filter items by the attribute name. `name=age` */
                readonly name?: string;
                /** Filter items by `date_created`. `date_created=2018-09-05T13:43:54` */
                readonly date_created?: string;
                /** Filter items by maximum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_created:max"?: string;
                /** Filter items by minimum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_created:min"?: string;
                /** Filter items by `date_modified`. `date_modified=2018-09-05T13:45:03` */
                readonly date_modified?: string;
                /** Filter items by maximum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_modified:max"?: string;
                /** Filter items by mininum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
                readonly "date_modified:min"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomerAttributeValueCollectionResponse"];
        };
    };
    /**
     * Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.
     *
     * Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.
     *
     * Up to 10 per call are allowed.
     */
    readonly CustomersAttributeValuesPut: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomerAttributeValueCollectionResponse"];
            /** The `CustomerAttributeValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["attribueValue_Base"][];
            };
        };
    };
    /**
     * Deletes Customer Attribute Values. Deletes the attribute value from the customer.
     *
     * **Required Query**
     * * id:in - ID of the *Customer Attribute Value*
     */
    readonly CustomersAttributeValuesDelete: {
        readonly parameters: {
            readonly query: {
                /**
                 * Filter items by ID.
                 * `id:in=4,5,6`
                 */
                readonly "id:in": readonly number[];
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /**
     * Returns a list of form field values for the Customer or Customer Address object.
     *
     * To learn about adding and managing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
     */
    readonly CustomerFormFieldsGet: {
        readonly parameters: {
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly query: {
                /** Page number. `page=1` */
                readonly page?: number;
                /** Items count per page. `limit=50` */
                readonly limit?: number;
                /** Filter by the customer ID. */
                readonly customer_id?: number;
                /** Filter by the ID of the customer address. */
                readonly address_id?: number;
                /** Filter by the field name. */
                readonly field_name?: string;
                /**
                 * Filter by the field type.
                 *  * `checkboxes` - checkboxes field
                 *  * `date` - date field
                 *  * `multiline` - multiline text field
                 *  * `numbers` - numbers only field
                 *  * `password` - password field
                 *  * `radiobuttons` - radio buttons field
                 *  * `text` - text field
                 *  * `picklist` - pick list field
                 */
                readonly field_type?: "checkboxes" | "date" | "multiline" | "numbers" | "password" | "radiobuttons" | "text" | "picklist";
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["FormFieldValueCollectionResponse"];
            /** The form field value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
    };
    /**
     * Updates form field values on the Customer or Customer Address objects. Multiple form field values can be updated in one call.
     *
     * Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.
     *
     * To learn more about editing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
     */
    readonly CustomerFormFieldValuePUT: {
        readonly responses: {
            readonly 200: components["responses"]["FormFieldValuesResponse"];
            /** The form field value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["formFieldValue_Full"][];
            };
        };
    };
    /** Gets the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront. */
    readonly CustomersConsentByCustomerId_GET: {
        readonly parameters: {
            readonly path: {
                readonly customerId: components["parameters"]["customerId"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["consent_Resp"];
            /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            readonly 401: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            readonly 403: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** Invalid JSON request body - missing or invalid data. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /** Updates the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront. */
    readonly CustomersConsentByCustomerId_PUT: {
        readonly parameters: {
            readonly header: {
                readonly "Content-Type"?: string;
            };
            readonly path: {
                readonly customerId: components["parameters"]["customerId"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["consent_Resp"];
            /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            readonly 401: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            readonly 403: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** Invalid JSON request body - missing or invalid data. */
            readonly 422: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["DeclareCustomerConsentRequest"];
            };
        };
    };
    /**
     * Lists all available stored instruments for a customer. This list will include all types of stored instruments namely card, account and bank_account instruments
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > * This endpoint is in beta.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly liststoredinstruments: {
        readonly parameters: {
            readonly path: {
                readonly customerId: components["parameters"]["customerId"];
            };
        };
        readonly responses: {
            /** OK */
            readonly 200: {
                readonly content: {
                    readonly "application/json": readonly (components["schemas"]["CardInstrument"] | components["schemas"]["PayPalAccountInstrument"] | components["schemas"]["BankAccountInstrument"])[];
                };
            };
            /** Unauthorized */
            readonly 401: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            readonly 403: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
