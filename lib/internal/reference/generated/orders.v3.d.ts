/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/orders/{order_id}/transactions": {
        /**
         * Returns an **order's** transactions.
         *
         * **Usage Notes**
         * * Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).
         * * Transactions are not created for the following payment methods:
         * 	* Test Payment Gateway
         * 	* PayPal Express
         * 	* Amazon Pay
         */
        readonly get: operations["getTransactions"];
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: number;
            };
        };
    };
    readonly "/orders/payment_actions/refunds": {
        /** Returns a list of refunds ordered by refund ID in ascending order. */
        readonly get: operations["getrefunds"];
        /** Creates a refund. This endpoint will accept a batch of one or more. */
        readonly post: operations["postrefunds"];
    };
    readonly "/orders/{order_id}/payment_actions/refund_quotes": {
        /** Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund. */
        readonly post: operations["postrefundquote"];
        readonly parameters: {
            readonly path: {
                readonly order_id: string;
            };
        };
    };
    readonly "/orders/{order_id}/payment_actions/refunds": {
        /** Returns a list of refunds ordered by refund ID in ascending order for the given order. */
        readonly get: operations["getorderrefunds"];
        /** Creates a refund. */
        readonly post: operations["postrefund"];
        readonly parameters: {
            readonly path: {
                readonly order_id: string;
            };
        };
    };
    readonly "/orders/payment_actions/refund_quotes": {
        /**
         * Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund.
         *
         * This endpoint will accept a batch of one or more.
         */
        readonly post: operations["postrefundquotes"];
    };
    readonly "/orders/{order_id}/metafields": {
        /** Gets a `Metafield` object list, by `order_id`. */
        readonly get: operations["getOrderMetafieldsByOrderId"];
        /** Creates an order `Metafield`. */
        readonly post: operations["createOrderMetafield"];
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
            };
        };
    };
    readonly "/orders/{order_id}/metafields/{metafield_id}": {
        /** Gets a `Metafield`, by `order_id`. */
        readonly get: operations["getOrderMetafieldByOrderIdAndMetafieldId"];
        /** Updates a `Metafield` object. */
        readonly put: operations["updateOrderMetafield"];
        /** Deletes a `Metafield`. */
        readonly delete: operations["deleteOrderMetafieldById"];
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
                /** The ID of the `Metafield`. */
                readonly metafield_id: parameters["MetafieldIdParam"];
            };
        };
    };
}
export interface definitions {
    readonly GetReturnsSettings: {
        readonly reasons?: readonly definitions["Reason"][];
        readonly preferred_outcomes?: readonly definitions["PreferredOutcome"][];
    };
    readonly Reason: {
        readonly id?: number;
        /** A description of the reason */
        readonly label?: string;
        /** Indicates whether or not the reason has been archived */
        readonly is_archived?: boolean;
    };
    readonly PreferredOutcome: {
        readonly id?: number;
        /** A description of the outcome */
        readonly label?: string;
        /** Indicates whether or not the outcome has been archived */
        readonly is_archived?: boolean;
    };
    readonly CreateReturnRequest: {
        /** A collection of items to be returned */
        readonly items: readonly definitions["CreateReturnRequestItem"][];
        /** A comment provided to the merchant for review */
        readonly comment?: string;
    };
    readonly CreateReturnRequestItem: {
        readonly reference_id: definitions["ItemReferenceId"];
        readonly quantity: number;
        readonly preferred_outcome_id: number;
        readonly reason_id: number;
    };
    readonly CreateReturn: definitions["Return_Full"];
    /** A view of a return */
    readonly Return_Full: {
        readonly items?: readonly definitions["ReturnItem"][];
        /** The total price of the items being returned */
        readonly total?: string;
        /** The transactional currency of the return and the associated order */
        readonly currency?: string;
        readonly customer?: {
            readonly id?: number;
            readonly email?: string;
        };
        /** A comment provided to the merchant for review */
        readonly comment?: string;
        readonly status?: definitions["Status_Full"];
        readonly date_modified?: string;
    };
    /** A view of a return item */
    readonly ReturnItem: {
        /** The unique identifier of this return item */
        readonly id?: number;
        readonly reference_id?: definitions["ItemReferenceId"];
        /** The quantity of items for which a return was requested */
        readonly quantity?: number;
        /** The total price of the line item */
        readonly total?: string;
        readonly preferred_outcome?: {
            /** Unique identifier of the preferred outcome */
            readonly id?: number;
            /** A displayable label for the preferred outcome */
            readonly label?: string;
        };
        readonly reason?: {
            /** Unique identifier of the reason */
            readonly id?: number;
            /** A displayable label for the reason */
            readonly label?: string;
        };
        readonly received_state?: {
            /** The quantity of items marked as received by the merchant */
            readonly received_quantity?: number;
            /** The quantity of items pending receipt by the merchant */
            readonly pending_quantity?: number;
        };
        readonly review_state?: {
            /** The quantity of items approved for return by the merchant */
            readonly approved_quantity?: number;
            /** The quantity of items pending receipt by the merchant */
            readonly pending_quantity?: number;
            /** The quantity of items rejected by the merchant */
            readonly rejected_quantity?: number;
        };
    };
    readonly StatusUpdate_Full: {
        /** The ID of the return for which the status should be updated */
        readonly return_id?: number;
        readonly new_status?: definitions["Status_Full"];
    };
    /** The status of the return. */
    readonly Status_Full: "CLOSED" | "OPEN" | "REMOVED";
    readonly UpdateReturnStatusesRequest: readonly definitions["StatusUpdate_Full"][];
    readonly UpdateReturnStatuses: readonly {
        /** The ID of the return for which the status was updated */
        readonly id?: number;
        readonly status?: definitions["Status_Full"];
    }[];
    readonly Problem: {
        /** Status code of the problem */
        readonly status?: number;
        /** A short description of the problem */
        readonly title?: string;
        /** A resource describing the problem */
        readonly type?: string;
    };
    readonly BatchOperationMeta: {
        /** The total number of operations in the batch */
        readonly total?: number;
        /** The number of failed operations in the batch */
        readonly success?: number;
        /** The number of failed operations in the batch */
        readonly failed?: number;
    };
    /** Data about the response, including pagination and collection totals. */
    readonly Pagination: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
        /** Pagination links for the previous and next parts of the whole collection. */
        readonly links?: {
            /** Link to the previous page returned in the response. */
            readonly previous?: string;
            /** Link to the current page returned in the response. */
            readonly current?: string;
            /** Link to the next page returned in the response. */
            readonly next?: string;
        };
    };
    readonly ReceivedItems_Put: readonly {
        /** The ID of the item for which to update the received state */
        readonly item_id: number;
        /** The quantity of items to be marked as received */
        readonly received_quantity: number;
        /** The quantity of items to be marked as pending */
        readonly pending_quantity: number;
    }[];
    readonly ReceivedItems_Base: readonly {
        /** The ID of the item for which received item status was updated */
        readonly item_id?: number;
        /** The quantity of items marked as received */
        readonly received_quantity?: number;
        /** The quantity of items marked as pending */
        readonly pending_quantity?: number;
    }[];
    readonly ReviewedItems_Put: readonly {
        /** The ID of the item for which to update the reviewed state */
        readonly item_id: number;
        /** The quantity of items to be marked as authorized */
        readonly authorized_quantity: number;
        /** The quantity of items to be marked as rejected */
        readonly rejected_quantity: number;
        /** The quantity of items to be marked as pending */
        readonly pending_quantity: number;
    }[];
    readonly ReviewedItems_Base: readonly {
        /** The ID of the item for which reviewed status was updated */
        readonly item_id?: number;
        /** The quantity of items marked as authorized */
        readonly authorized_quantity?: number;
        /** The quantity of items marked as rejected */
        readonly rejected_quantity?: number;
        /** The quantity of items marked as pending */
        readonly pending_quantity?: number;
    }[];
    readonly GetReturnableItems: readonly {
        readonly reference_id?: definitions["ItemReferenceId"];
        /** The name of the order product */
        readonly name?: string;
        /** The maximum quantity of this item that can presently be requested for return */
        readonly returnable_quantity?: number;
        /** The total price of this line item */
        readonly total?: string;
        /** A collection of options configured for the order product */
        readonly options?: readonly {
            /** A displayable name for the option */
            readonly display_name?: string;
            /** A displayable value for the option */
            readonly display_value?: string;
        }[];
    }[];
    readonly ItemReferenceId: {
        /** The reference type */
        readonly type: "ORDER_PRODUCT";
        /** The value identifying the returned item */
        readonly value: string;
    };
    /** Data about the response, including pagination and collection totals. */
    readonly CollectionMeta: {
        /** Data about the response, including pagination and collection totals. */
        readonly pagination?: {
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
            readonly per_page?: number;
            /** The page you are currently on within the collection. */
            readonly current_page?: number;
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
            /** Pagination links for the previous and next parts of the whole collection. */
            readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
            };
        };
    };
    readonly Meta: {
        /** Data about the response, including pagination and collection totals. */
        readonly meta?: {
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
            readonly per_page?: number;
            /** The page you are currently on within the collection. */
            readonly current_page?: number;
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
            /** Pagination links for the previous and next parts of the whole collection. */
            readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
            };
        };
    };
    readonly ErrorResponse: definitions["error_Base"] & {
        readonly errors?: {
            readonly [key: string]: string;
        };
    };
    readonly DetailedErrors: {
        readonly [key: string]: string;
    };
    readonly Transaction_Post: {
        /** Store event that created the transaction. */
        readonly event: "purchase" | "authorization" | "capture" | "refund" | "void" | "pending" | "settled";
        /** The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline. */
        readonly method: "credit_card" | "electronic_wallet" | "gift_certificate" | "store_credit" | "apple_pay_card" | "apple_pay_token" | "token" | "custom" | "offsite" | "offline" | "nonce";
        /** Amount of money in the transaction. */
        readonly amount: number;
        /** Currency used for the transaction. */
        readonly currency: string;
        /** The payment gateway, where applicable. */
        readonly gateway: "2checkout" | "adyen" | "amazon" | "authorizenet" | "bankdeposit" | "braintree" | "cheque" | "cod" | "custom" | "firstdatagge4" | "giftcertificate" | "hps" | "instore" | "klarna" | "migs" | "moneyorder" | "nmi" | "paypalexpress" | "paypalpaymentsprous" | "paypalpaymentsprouk" | "plugnpay" | "qbmsv2" | "securenet" | "square" | "storecredit" | "stripe" | "testgateway" | "usaepay";
        /** The transaction ID returned by the payment gateway for this transaction item. */
        readonly gateway_transaction_id?: string;
        /** The datetime of the transaction. */
        readonly date_created?: string;
        /** True if the transaction performed was a test, or if the gateway is in test mode. */
        readonly test?: boolean;
        /** Status of the transaction. */
        readonly status?: "ok" | "error";
        /** Result of gateway fraud review, if any. Default is `false`. */
        readonly fraud_review?: boolean;
        /** Identifier for an existing transaction upon which this transaction acts. */
        readonly reference_transaction_id?: number;
        readonly offline?: definitions["Offline"];
        readonly custom?: definitions["Custom"];
    };
    /** Error payload for the BigCommerce API. */
    readonly NotFound: {
        /** 404 HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
        readonly instance?: string;
    };
    /** A BigCommerce Transaction object describes a single transaction. */
    readonly Transaction: {
        /** Store event that created the transaction. */
        readonly event: "purchase" | "authorization" | "capture" | "refund" | "void" | "pending" | "settled";
        /** The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline. */
        readonly method: "credit_card" | "electronic_wallet" | "gift_certificate" | "store_credit" | "apple_pay_card" | "apple_pay_token" | "token" | "custom" | "offsite" | "offline" | "nonce";
        /** Amount of money in the transaction. */
        readonly amount: number;
        /** Currency used for the transaction. */
        readonly currency: string;
        /** The payment gateway, where applicable. */
        readonly gateway: "2checkout" | "adyen" | "amazon" | "authorizenet" | "bankdeposit" | "braintree" | "cheque" | "cod" | "custom" | "firstdatagge4" | "giftcertificate" | "hps" | "instore" | "klarna" | "migs" | "moneyorder" | "nmi" | "paypalexpress" | "paypalpaymentsprous" | "paypalpaymentsprouk" | "plugnpay" | "qbmsv2" | "securenet" | "square" | "storecredit" | "stripe" | "testgateway" | "usaepay";
        /** The transaction ID returned by the payment gateway for this transaction item. */
        readonly gateway_transaction_id?: string;
        /** The datetime of the transaction. */
        readonly date_created?: string;
        /** True if the transaction performed was a test, or if the gateway is in test mode. */
        readonly test?: boolean;
        /** Status of the transaction. */
        readonly status?: "ok" | "error";
        /** Result of gateway fraud review, if any. Default is `false`. */
        readonly fraud_review?: boolean;
        /** Identifier for an existing transaction upon which this transaction acts. */
        readonly reference_transaction_id?: number;
        /** Offline payment (e.g., check or purchase order). */
        readonly offline?: {
            /** Display name for the offline payment. */
            readonly display_name?: string;
        };
        /** Custom payment from manual order. */
        readonly custom?: {
            /** Text entered for the payment method in the control panel. */
            readonly payment_method?: string;
        };
        /** The payment method ID used for this transaction */
        readonly payment_method_id?: string;
    } & {
        /** Unique identifier for the transaction. */
        readonly id?: number;
        /** Identifier for the BigCommerce Order with which this transaction is associated. */
        readonly order_id?: string;
        /** The datetime of the transaction. */
        readonly date_created?: string;
        /** This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment. */
        readonly payment_instrument_token?: string;
        /** Address Verification Service (AVS) result from the payment gateway. */
        readonly avs_result?: {
            /** AVS code. */
            readonly code?: string;
            /** AVS message. */
            readonly message?: string;
            /** AVS Code for street matching result. */
            readonly street_match?: string;
            /** AVS Code for postal matching result. */
            readonly postal_match?: string;
        };
        /** Card Verification Value result from the payment gateway. */
        readonly cvv_result?: {
            /** CVV code. */
            readonly code?: string;
            /** CVV message. */
            readonly message?: string;
        };
        readonly credit_card?: definitions["CreditCard"];
        /** A gift-certificate model. */
        readonly gift_certificate?: {
            /** The gift-certificate code. */
            readonly code?: string;
            /** The balance on a gift certificate when it was purchased. */
            readonly original_balance?: number;
            /** The balance on a gift certificate at the time of this purchase. */
            readonly starting_balance?: number;
            /** The remaining balance on a gift certificate. */
            readonly remaining_balance?: number;
            /** The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired. */
            readonly status?: "active" | "pending" | "disabled" | "expired";
        };
        /** A store credit model. */
        readonly store_credit?: {
            /** Remaining balance of shopper's store credit. */
            readonly remaining_balance?: number;
        };
    };
    /** A credit-card model. */
    readonly CreditCard: {
        /** **Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr */
        readonly card_type?: "alelo" | "alia" | "american_express" | "cabal" | "carnet" | "dankort" | "diners_club" | "discover" | "elo" | "forbrugsforeningen" | "jcb" | "maestro" | "master" | "naranja" | "sodexo" | "unionpay" | "visa" | "vr";
        /** The IIN of a credit-card number. */
        readonly card_iin?: string;
        /** The last 4 digits of a credit-card number. */
        readonly card_last4?: string;
        /** The expiry month of a credit-card. */
        readonly card_expiry_month?: number;
        /** The expiry year of a credit-card. */
        readonly card_expiry_year?: number;
    };
    /** A store credit model. */
    readonly StoreCredit: {
        /** Remaining balance of shopper's store credit. */
        readonly remaining_balance?: number;
    };
    /** Custom payment from manual order. */
    readonly Custom: {
        /** Text entered for the payment method in the control panel. */
        readonly payment_method?: string;
    };
    /** Offline payment (e.g., check or purchase order). */
    readonly Offline: {
        /** Display name for the offline payment. */
        readonly display_name?: string;
    };
    /** A gift-certificate model. */
    readonly GiftCertificate: {
        /** The gift-certificate code. */
        readonly code?: string;
        /** The balance on a gift certificate when it was purchased. */
        readonly original_balance?: number;
        /** The balance on a gift certificate at the time of this purchase. */
        readonly starting_balance?: number;
        /** The remaining balance on a gift certificate. */
        readonly remaining_balance?: number;
        /** The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired. */
        readonly status?: "active" | "pending" | "disabled" | "expired";
    };
    /** Address Verification Service (AVS) result from the payment gateway. */
    readonly AVSResult: {
        /** AVS code. */
        readonly code?: string;
        /** AVS message. */
        readonly message?: string;
        /** AVS Code for street matching result. */
        readonly street_match?: string;
        /** AVS Code for postal matching result. */
        readonly postal_match?: string;
    };
    /** Card Verification Value result from the payment gateway. */
    readonly CVVResult: {
        /** CVV code. */
        readonly code?: string;
        /** CVV message. */
        readonly message?: string;
    };
    /** No-content response for the BigCommerce API. */
    readonly NoContent: {
        /** 204 HTTP status code. */
        readonly status?: number;
        /** The error title describing the situation. */
        readonly title?: string;
        readonly type?: string;
        readonly instance?: string;
    };
    readonly metaEmpty_Full: {
        readonly [key: string]: any;
    };
    readonly pagination_Full: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
        readonly links?: definitions["links_Full"];
    };
    readonly metaCollection_Full: {
        readonly pagination?: definitions["pagination_Full"];
    };
    readonly links_Full: {
        /** Link to the previous page returned in the response. */
        readonly previous?: string;
        /** Link to the current page returned in the response. */
        readonly current?: string;
        /** Link to the next page returned in the response. */
        readonly next?: string;
    };
    /** Error payload for the BigCommerce API. */
    readonly error_Base: {
        /** The HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
    };
    readonly errorDetailed_Full: {
        readonly errors?: {
            readonly [key: string]: string;
        };
    };
    /** Request body for batch refund quotes. */
    readonly PostRefundQuotesRequest: readonly definitions["RefundQuote_Post"][];
    /** Request body for refund quotes. */
    readonly RefundQuote_Post: {
        /** Order ID against which this refund will be created. This is optional for creating a single refund request. The order ID is included in the request path. */
        readonly order_id: number;
        readonly items: definitions["ItemsRefund"];
    };
    readonly RefundQuote_Full: {
        /** ID of the order to be refunded */
        readonly order_id?: number;
        readonly total_refund_amount?: definitions["Amount"];
        readonly total_refund_tax_amount?: number;
        /** Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places) */
        readonly rounding?: number;
        readonly adjustment?: definitions["AdjustmentAmount"];
        /** Indicate if total_refund_amount includes tax amount */
        readonly tax_inclusive?: boolean;
        /**
         * An array of available refund methods.
         *
         * Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.
         *
         * For example, if the order was placed by a combination of store credit and bank deposit the refund methods would be:
         * ```json
         * {
         *   "refund_methods": [
         *     [
         *       {
         *         "provider_id": "storecredit",
         *         "provider_description": "Store Credit",
         *         "amount": 119.35,
         *         "offline": false,
         *         "offline_provider": false,
         *         "offline_reason": ""
         *       }
         *     ],
         *     [
         *       {
         *         "provider_id": "custom",
         *         "provider_description": "Custom",
         *         "amount": 119.35,
         *         "offline": true,
         *         "offline_provider": true,
         *         "offline_reason": "This is an offline payment provider."
         *       }
         *     ],
         *     [
         *       {
         *         "provider_id": "bankdeposit",
         *         "provider_description": "Bank Deposit",
         *         "amount": 80.35,
         *         "offline": true,
         *         "offline_provider": true,
         *         "offline_reason": "This is an offline payment provider."
         *       },
         *       {
         *         "provider_id": "storecredit",
         *         "provider_description": "Store Credit",
         *         "amount": 39,
         *         "offline": false,
         *         "offline_provider": false,
         *         "offline_reason": ""
         *       }
         *     ]
         *   ]
         * }
         * ```
         *
         * In this case there are three refund methods available to the merchant:
         * 1. Refund up to the entire order amount to store credit.
         * 2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC ("custom").
         * 3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.
         *
         * >
         */
        readonly refund_methods?: readonly definitions["RefundMethod"][];
    };
    /** Request body for refund requests. */
    readonly RefundRequest_Post: {
        readonly items: definitions["ItemsRefund"];
        /** Reason for refund */
        readonly reason?: string;
        readonly payments: readonly definitions["PaymentRequest"][];
    };
    /** Request body for batch refunds */
    readonly PostRefundsRequest: readonly definitions["RefundRequest_Post"][];
    /** Failed quote response. */
    readonly FailedQuoteError: {
        readonly order_id?: number;
        /** HTTP status code */
        readonly status?: number;
        /** details why the request failed */
        readonly error?: string;
    };
    readonly ItemsRefund: readonly (Partial<definitions["AmountBoundItem"]> & Partial<definitions["QuantityBoundItem"]> & Partial<definitions["TaxExemptItem"]>)[];
    readonly PaymentRequest: {
        /** Reference to payment provider */
        readonly provider_id?: string;
        /** Amount refunded via this provider */
        readonly amount?: number;
        /** Whether the payment was marked as offline or performed through an online payment service. */
        readonly offline?: boolean;
    };
    readonly RefundMethod: readonly definitions["PaymentOption"][];
    /**
     * Quantity Bound Item
     *
     * Type of refund item that capture refunding of items in the order that are of type quantity.
     * * `PRODUCT`
     * * `GIFT_WRAPPING`
     */
    readonly QuantityBoundItem: {
        /** Type of refund. */
        readonly item_type?: "PRODUCT" | "GIFT_WRAPPING";
        /** Order Product ID. */
        readonly item_id?: number;
        readonly quantity?: number;
        /** Reason for refund */
        readonly reason?: string;
    };
    /** Use this to refund a custom value at the order level. When `item_type` is set to `ORDER`, tax is not re-calculated. */
    readonly TaxExemptItem: {
        /** The type of refund. When `item_type` is set to `ORDER`, tax is not re-calculated. */
        readonly item_type?: "ORDER";
        readonly amount?: definitions["Amount"];
        /** Reason for the refund. */
        readonly reason?: string;
        /** Order Product ID. */
        readonly item_id?: number;
    };
    /**
     * Amount Bound Item
     *
     * Type of refund item that capture refunding of items in the order that are of type amount.
     * * `SHIPPING`
     * * `HANDLING`
     */
    readonly AmountBoundItem: {
        /** Type of refund. */
        readonly item_type?: "SHIPPING" | "HANDLING";
        /** Order address ID. */
        readonly item_id?: number;
        readonly amount?: definitions["Amount"];
        readonly reason?: string;
    };
    readonly Refund: {
        /** Refund resource ID */
        readonly id?: number;
        /** Reference to order id */
        readonly order_id?: number;
        /** Reference to the user's id who create this refund. This is automatically populated by BigCommerce. */
        readonly user_id?: number;
        /** Timestamp of when this refund was created */
        readonly created?: string;
        /** Reason for refund */
        readonly reason?: string;
        readonly total_amount?: definitions["Amount"];
        /** Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer */
        readonly total_tax?: number;
        /** Array of items refunded */
        readonly items?: readonly definitions["RefundItem"][];
        /** An array of refund payments made to payment providers */
        readonly payments?: readonly definitions["RefundPayment"][];
    };
    readonly RefundItem: {
        /** Type of item that was refunded */
        readonly item_type?: "PRODUCT" | "GIFT_WRAPPING" | "SHIPPING" | "HANDLING" | "ORDER";
        /** Reference to the item */
        readonly item_id?: number;
        /** Reason for refunding an item */
        readonly reason?: string;
        /** Quantity of item refunded. Note: this will only be populated for item_type PRODUCT */
        readonly quantity?: number;
        readonly requested_amount?: definitions["Amount"];
    };
    readonly RefundPayment: {
        /** Reference to refund payment id */
        readonly id?: number;
        /** Reference to payment provider */
        readonly provider_id?: string;
        readonly amount?: definitions["Amount"];
        /** Indicate whether payment was offline */
        readonly offline?: boolean;
        /** Indicate if this payment has been declined by payment provider */
        readonly is_declined?: boolean;
        /** Message indicate why payment was declined */
        readonly declined_message?: string;
    };
    readonly PaymentOption: {
        /** Name of the payment method */
        readonly provider_id?: string;
        /** Description for payment provider */
        readonly provider_description?: string;
        /** amount to be refunded via this payment provider */
        readonly amount?: number;
        /** Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit. */
        readonly offline?: boolean;
        /** Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit. */
        readonly offline_provider?: boolean;
        /** Reason the payment option is offline only, if applicable. */
        readonly offline_reason?: string;
    };
    /** A non-negative 2 decimal place rounded value that represents the amount that can be charged/refunded via payment providers. */
    readonly Amount: number;
    /** A negative or positive 2 decimal place rounded value that represents the difference between the refund amount requested in the refund quote and the actual amount that is refundable on the order. This value is negative when the refund amount requested in the refund quote is more than the total refundable amount. This value is positive when the total refundable amount has increased, e.g. as a result of rounding. */
    readonly AdjustmentAmount: number;
    /** Describes refund failures, success and totals. */
    readonly MetaRefund: {
        readonly failure?: number;
        readonly success?: number;
        readonly total?: number;
    };
    /** Response payload for the BigCommerce API. */
    readonly MetaFieldCollectionResponse: {
        readonly data?: readonly definitions["Metafield"][];
        readonly meta?: definitions["CollectionMeta"];
    };
    /** Response payload for the BigCommerce API. */
    readonly MetafieldResponse: {
        readonly data?: definitions["Metafield"];
        readonly meta?: definitions["Meta"];
    };
    /** Common Metafield properties. */
    readonly MetafieldBase: {
        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`). */
        readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
        /** Namespace for the metafield, for organizational purposes. */
        readonly namespace?: string;
        /** The name of the field, for example: `location_id`, `color`. */
        readonly key?: string;
        /** The value of the field, for example: `1`, `blue`. */
        readonly value?: string;
        /** Description for the metafields. */
        readonly description?: string;
        /** The type of resource with which the metafield is associated. */
        readonly resource_type?: "category" | "brand" | "product" | "variant";
        /** The unique identifier for the resource with which the metafield is associated. */
        readonly resource_id?: number;
    };
    /** Allows app partners to write custom data to various resources in the API. */
    readonly Metafield: definitions["MetafieldBase"] & {
        /** The unique identifier for the metafields. */
        readonly id?: number;
        /** Date and time of the metafield's creation. */
        readonly created_at?: string;
        /** Date and time when the metafield was last updated. */
        readonly updated_at?: string;
    };
    /** The model for a POST to create metafield. */
    readonly MetafieldPost: definitions["MetafieldBase"];
    /** The model for a PUT to update metafield. */
    readonly MetafieldPut: definitions["MetafieldBase"] & {
        /** The unique identifier for the metafields. */
        readonly id?: number;
    };
}
export interface parameters {
    /** The ID of the `Order` to which the transactions belong. */
    readonly OrderIdParam: number;
    readonly Accept: string;
    readonly "Content-Type": string;
    /** Specifies the page number in a limited (paginated) list of products. */
    readonly PageParam: number;
    /** The ID of the `Metafield`. */
    readonly MetafieldIdParam: number;
    /** Filter based on a metafield's key. */
    readonly MetafieldKeyParam: string;
    /** Filter based on a metafield's key. */
    readonly MetafieldNamespaceParam: string;
    /** Controls the number of items per page in a limited (paginated) list of products. */
    readonly LimitParam: number;
    /** Sort direction. Acceptable values are: `asc`, `desc`. */
    readonly DirectionParam: "asc" | "desc";
}
export interface responses {
    readonly Return_Resp: {
        readonly schema: {
            readonly data?: definitions["Return_Full"];
            readonly meta?: {
                readonly pagination?: definitions["Pagination"];
            };
        };
    };
    readonly ReturnStatus_Resp: {
        readonly schema: {
            readonly data?: definitions["UpdateReturnStatuses"];
            readonly errors?: readonly definitions["Problem"][];
            readonly meta?: definitions["BatchOperationMeta"];
        };
    };
    readonly OrderReturnableItems_Resp: {
        readonly schema: {
            readonly data?: definitions["GetReturnableItems"];
        };
    };
    readonly CreateReturn_Resp: {
        readonly schema: {
            readonly data?: definitions["CreateReturn"];
        };
    };
    readonly ReceivedItems_Resp: {
        readonly schema: {
            readonly data?: definitions["ReceivedItems_Base"];
            readonly errors?: readonly definitions["Problem"][];
            readonly meta?: definitions["BatchOperationMeta"];
        };
    };
    readonly ReviewedItems_Resp: {
        readonly schema: {
            readonly data?: definitions["ReviewedItems_Base"];
            readonly errors?: readonly definitions["Problem"][];
            readonly meta?: definitions["BatchOperationMeta"];
        };
    };
    readonly StoreReturnSettings_Resp: {
        readonly schema: {
            readonly data?: definitions["GetReturnsSettings"];
        };
    };
    /** If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
    readonly "502_GatewayError": {
        readonly schema: definitions["error_Base"];
    };
    /** If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually) */
    readonly "504_GatewayTimeout": {
        readonly schema: definitions["errorDetailed_Full"];
    };
    readonly "403_Unauthorized": {
        readonly schema: definitions["error_Base"];
    };
    /**
     * Malformed request syntax. Typically need to fix the JSON
     * Body to resend successfully.
     */
    readonly "400_BadRequest": {
        readonly schema: definitions["error_Base"];
    };
    /** The resource was not found. */
    readonly "404_NotFound": {
        readonly schema: definitions["error_Base"];
    };
    /** This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
    readonly "422_UnprocessableEntity": {
        readonly schema: definitions["ErrorResponse"];
    };
    /** If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually) */
    readonly "503_ServiceUnavailable": {
        readonly schema: definitions["error_Base"];
    };
    readonly paymentActionsCapture_Resp: {
        readonly schema: {
            readonly [key: string]: any;
        };
    };
    readonly paymentActionsVoid_Resp: {
        readonly schema: {
            readonly [key: string]: any;
        };
    };
    /** Request acknowledged. */
    readonly "201_Acknowledged": {
        readonly schema: {
            readonly [key: string]: any;
        };
    };
    readonly RefundCollection_Resp: {
        readonly schema: {
            /** Collection of Refunds */
            readonly data?: readonly definitions["Refund"][];
            /** Meta data collection */
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
    };
    readonly refundsBATCH_Resp: {
        readonly schema: {
            readonly data?: readonly definitions["Refund"][];
            readonly errors?: readonly definitions["FailedQuoteError"][];
            readonly meta?: definitions["MetaRefund"];
        };
    };
    readonly RefundQuote_Resp: {
        readonly schema: {
            readonly data?: definitions["RefundQuote_Full"];
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
    };
    readonly Refund_Resp: {
        readonly schema: {
            readonly data?: definitions["Refund"];
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
    };
    /** Response payload for the BigCommerce Order Transactions API. */
    readonly TransactionCollection_Resp: {
        readonly schema: {
            readonly data?: readonly definitions["Transaction"][];
            readonly meta?: definitions["metaCollection_Full"];
        };
    };
    /** Response payload for the BigCommerce Order Transactions API single transaction. */
    readonly Transaction_Resp: {
        readonly schema: {
            readonly data?: definitions["Transaction_Post"];
        } & {
            /** Unique identifier for the transaction. */
            readonly id?: number;
            /** Identifier for the BigCommerce Order with which this transaction is associated. */
            readonly order_id?: string;
            /** The datetime of the transaction. */
            readonly date_created?: string;
            /** This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment. */
            readonly payment_instrument_token?: string;
            readonly avs_result?: definitions["AVSResult"];
            readonly cvv_result?: definitions["CVVResult"];
            readonly credit_card?: definitions["CreditCard"];
            readonly gift_certificate?: definitions["GiftCertificate"];
            readonly store_credit?: definitions["StoreCredit"];
        } & {
            readonly meta?: definitions["metaEmpty_Full"];
        };
    };
    readonly RefundQuotesBATCH_Resp: {
        readonly schema: {
            readonly data?: readonly definitions["RefundQuote_Full"][];
            readonly errors?: readonly definitions["FailedQuoteError"][];
            readonly meta?: definitions["Meta"];
        };
    };
}
export interface operations {
    /**
     * Returns an **order's** transactions.
     *
     * **Usage Notes**
     * * Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).
     * * Transactions are not created for the following payment methods:
     * 	* Test Payment Gateway
     * 	* PayPal Express
     * 	* Amazon Pay
     */
    readonly getTransactions: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["TransactionCollection_Resp"];
            /** No content found to fulfill request. */
            readonly 204: {
                readonly schema: {
                    /** 204 HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the situation. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                };
            };
            /** The resource was not found. */
            readonly 404: {
                readonly schema: {
                    /** 404 HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                };
            };
        };
    };
    /** Returns a list of refunds ordered by refund ID in ascending order. */
    readonly getrefunds: {
        readonly parameters: {
            readonly query: {
                /** Filter by `order_id`. Accepts multiple as comma-separated values. */
                readonly "order_id:in"?: readonly number[];
                /** Filter by refund `id`. Accepts multiple as comma-separated values. */
                readonly "id:in"?: readonly number[];
                /**
                 * Filter results so they are later than or equal to provided date.
                 *
                 *
                 * Must be in url-encoded RFC 3339 format.
                 * e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
                 * Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`
                 */
                readonly "created:min"?: string;
                /**
                 * Filter results so they are earlier than or equal to provided date.
                 *
                 *
                 * Must be in url-encoded RFC 3339 format.
                 * e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
                 * Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`
                 */
                readonly "created:max"?: string;
                /** Specifies the page number in a limited (paginated) list of items. */
                readonly page?: number;
                /** Controls the number of items per page in a limited (paginated) list of items. */
                readonly limit?: number;
            };
            readonly header: {
                readonly Accept?: parameters["Accept"];
                readonly "Content-Type"?: parameters["Content-Type"];
            };
        };
        readonly responses: {
            readonly 200: responses["RefundCollection_Resp"];
        };
    };
    /** Creates a refund. This endpoint will accept a batch of one or more. */
    readonly postrefunds: {
        readonly parameters: {
            readonly body: {
                readonly body: definitions["PostRefundsRequest"];
            };
            readonly header: {
                readonly Accept?: parameters["Accept"];
                readonly "Content-Type"?: parameters["Content-Type"];
            };
        };
        readonly responses: {
            readonly 201: responses["refundsBATCH_Resp"];
            /** Partial success/failure response. HTTP status for the entire response to roll up to the most severe individual failure to the whole request. */
            readonly 422: {
                readonly schema: {
                    readonly data?: readonly definitions["Refund"][];
                    readonly errors?: readonly definitions["FailedQuoteError"][];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
            /** All failure response. */
            readonly 503: {
                readonly schema: {
                    readonly data?: readonly definitions["Refund"][];
                    readonly errors?: readonly definitions["FailedQuoteError"][];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
        };
    };
    /** Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund. */
    readonly postrefundquote: {
        readonly parameters: {
            readonly path: {
                /** Order id */
                readonly order_id: number;
            };
            readonly body: {
                readonly body: definitions["RefundQuote_Post"];
            };
            readonly header: {
                readonly Accept?: parameters["Accept"];
                readonly "Content-Type"?: parameters["Content-Type"];
            };
        };
        readonly responses: {
            readonly 201: responses["RefundQuote_Resp"];
            readonly 422: responses["422_UnprocessableEntity"];
        };
    };
    /** Returns a list of refunds ordered by refund ID in ascending order for the given order. */
    readonly getorderrefunds: {
        readonly parameters: {
            readonly path: {
                readonly order_id: string;
            };
            readonly header: {
                readonly Accept?: parameters["Accept"];
                readonly "Content-Type"?: parameters["Content-Type"];
            };
        };
        readonly responses: {
            readonly 200: responses["RefundCollection_Resp"];
        };
    };
    /** Creates a refund. */
    readonly postrefund: {
        readonly parameters: {
            readonly path: {
                /** order id */
                readonly order_id: number;
            };
            readonly body: {
                readonly body: definitions["RefundRequest_Post"];
            };
            readonly header: {
                readonly Accept?: parameters["Accept"];
                readonly "Content-Type"?: parameters["Content-Type"];
            };
        };
        readonly responses: {
            readonly 201: responses["Refund_Resp"];
            /** Service Unavailable */
            readonly 503: {
                readonly schema: {
                    readonly data?: readonly definitions["FailedQuoteError"][];
                    readonly meta?: definitions["Meta"];
                };
            };
        };
    };
    /**
     * Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund.
     *
     * This endpoint will accept a batch of one or more.
     */
    readonly postrefundquotes: {
        readonly parameters: {
            readonly body: {
                readonly body: definitions["PostRefundQuotesRequest"];
            };
            readonly header: {
                readonly Accept?: parameters["Accept"];
                readonly "Content-Type"?: parameters["Content-Type"];
            };
        };
        readonly responses: {
            readonly 201: responses["RefundQuotesBATCH_Resp"];
            /** Partial success/failure response. Status to roll up to the most severe individual failure to the whole request. */
            readonly 422: {
                readonly schema: {
                    readonly data?: readonly definitions["RefundQuote_Full"][];
                    readonly errors?: readonly definitions["FailedQuoteError"][];
                    readonly meta?: definitions["Meta"];
                };
            };
            /** Status to roll up to the most severe individual failure to the whole request. Example shows that severe error status is rolled up to the overall response status code. */
            readonly 503: {
                readonly schema: {
                    readonly data?: readonly definitions["RefundQuote_Full"][];
                    readonly errors?: readonly definitions["FailedQuoteError"][];
                    readonly meta?: definitions["Meta"];
                };
            };
        };
    };
    /** Gets a `Metafield` object list, by `order_id`. */
    readonly getOrderMetafieldsByOrderId: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
            };
            readonly query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                readonly page?: parameters["PageParam"];
                /** Controls the number of items per page in a limited (paginated) list of products. */
                readonly limit?: parameters["LimitParam"];
                /** Filter based on a metafield's key. */
                readonly key?: parameters["MetafieldKeyParam"];
                /** Filter based on a metafield's key. */
                readonly namespace?: parameters["MetafieldNamespaceParam"];
                /** Sort direction. Acceptable values are: `asc`, `desc`. */
                readonly direction?: parameters["DirectionParam"];
            };
        };
        readonly responses: {
            /** An array of metafields and metadata. */
            readonly 200: {
                readonly schema: definitions["MetaFieldCollectionResponse"];
            };
            /** The resource was not found. */
            readonly 404: {
                readonly schema: definitions["NotFound"];
            };
        };
    };
    /** Creates an order `Metafield`. */
    readonly createOrderMetafield: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
            };
            readonly body: {
                /** A `Metafield` object. */
                readonly Metafield: definitions["MetafieldPost"];
            };
        };
        readonly responses: {
            /** A `Metafield` object. */
            readonly 200: {
                readonly schema: definitions["MetafieldResponse"];
            };
            /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
            readonly 409: {
                readonly schema: definitions["ErrorResponse"];
            };
            /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly schema: definitions["ErrorResponse"];
            };
        };
    };
    /** Gets a `Metafield`, by `order_id`. */
    readonly getOrderMetafieldByOrderIdAndMetafieldId: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
                /** The ID of the `Metafield`. */
                readonly metafield_id: parameters["MetafieldIdParam"];
            };
        };
        readonly responses: {
            /** A `Metafield` object. */
            readonly 200: {
                readonly schema: definitions["MetafieldResponse"];
            };
            /** The resource was not found. */
            readonly 404: {
                readonly schema: definitions["NotFound"];
            };
        };
    };
    /** Updates a `Metafield` object. */
    readonly updateOrderMetafield: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
                /** The ID of the `Metafield`. */
                readonly metafield_id: parameters["MetafieldIdParam"];
            };
            readonly body: {
                /** A `Metafield` object. */
                readonly Metafield: definitions["MetafieldPut"];
            };
        };
        readonly responses: {
            /** A metafield and metadata. */
            readonly 200: {
                readonly schema: definitions["MetafieldResponse"];
            };
            /** The resource was not found. */
            readonly 404: {
                readonly schema: definitions["NotFound"];
            };
        };
    };
    /** Deletes a `Metafield`. */
    readonly deleteOrderMetafieldById: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Order` to which the transactions belong. */
                readonly order_id: parameters["OrderIdParam"];
                /** The ID of the `Metafield`. */
                readonly metafield_id: parameters["MetafieldIdParam"];
            };
        };
        readonly responses: {
            /** An empty response. */
            readonly 204: never;
        };
    };
}
