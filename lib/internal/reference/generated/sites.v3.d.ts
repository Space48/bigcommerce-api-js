/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/sites": {
        /**
         * Get sites linked to a [headless storefront](https://developer.bigcommerce.com/api-docs/storefronts/developers-guide-headless) sales channels.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly get: {
            readonly parameters: {
                readonly query: {
                    /** Specifies the page number in a limited (paginated) list of items. */
                    readonly page?: number;
                    /** Controls the number of items per page in a limited (paginated) list of items. */
                    readonly limit?: number;
                };
            };
            readonly responses: {
                readonly 200: responses["site_RespCollection"];
            };
        };
        /**
         * Create a site that links a [headless storefront](https://developer.bigcommerce.com/api-docs/storefronts/developers-guide-headless) to a sales [channel](https://developer.bigcommerce.com/api-reference/cart-checkout/channels-listings-api).
         *
         * - [Authorization](#authorization)
         * - [Request Body](#request-body)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly post: operations["post-site"];
    };
    readonly "/sites/{site_id}": {
        /**
         * Get a site with site ID `{site_id}`.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly get: operations["get-site"];
        /**
         * Update a site with site ID `{site_id}`.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Request Body](#request-body)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly put: operations["put-site"];
        /**
         * Delete a site with site ID `{site_id}`.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly delete: operations["delete-site"];
    };
    readonly "/sites/{site_id}/routes": {
        /**
         * Get a site's routes.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Request Body](#request-body)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly get: operations["index-site-routes"];
        /**
         * Upsert routes for site with ID `{site_id}`.
         *
         * - [Usage notes](#usage-notes)
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Request Body](#request-body)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         *
         * ## Usage Notes
         * * `id` is required when updating an existing route.
         */
        readonly put: {
            readonly parameters: {
                readonly path: {
                    readonly site_id: number;
                };
                readonly body: {
                    readonly body?: readonly definitions["siteRoute_Full"][];
                };
            };
            readonly responses: {
                readonly 200: {
                    readonly schema: {
                        readonly data?: readonly definitions["siteRoute_Full"][];
                        readonly meta?: definitions["_metaCollection"];
                    };
                };
                readonly 422: responses["BulkErrorResponse"];
            };
        };
        /**
         * Create routes that tell BigCommerce how to link to pages on a [headless storefront](https://developer.bigcommerce.com/api-docs/storefronts/developers-guide-headless).
         *
         * - [Usage notes](#usage-notes)
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Request Body](#request-body)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         *
         * ## Usage Notes
         * * For a list of supported route types, see [Route types](https://developer.bigcommerce.com/api-reference/store-management/sites#route-types).
         */
        readonly post: operations["post-site-route"];
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
            };
        };
    };
    readonly "/sites/{site_id}/routes/{route_id}": {
        /**
         * Get a site's route.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly get: operations["get-site-route"];
        /**
         * Update a site's route.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Request Body](#request-body)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly put: operations["put-site-route"];
        /**
         * Delete a site's route.
         *
         * - [Authorization](#authorization)
         * - [Request Parameters](#request-parameters)
         * - [Responses](#responses)
         * - [Send a Test Request](#send-a-test-request)
         */
        readonly delete: operations["delete-route"];
    };
}
export interface definitions {
    /** Meta data relating to pagination */
    readonly _metaCollection: {
        readonly pagination?: {
            /** Total number of items returned. */
            readonly total?: number;
            /** Number of items returned on per page. */
            readonly count?: number;
            /** Number of items to be displayed per page. */
            readonly per_page?: number;
            /** Current page number. */
            readonly current_page?: number;
            /** Total number of pages. */
            readonly total_page?: number;
            readonly links?: {
                /** Query string appended to the resource to return to the previous page. */
                readonly previous?: string;
                /** Query string appended to the resource to proceed to the next page. */
                readonly next?: string;
                /** Query string appended to the resource to show the current page. */
                readonly current?: string;
            };
        };
    };
    /** Route object used in responses. */
    readonly siteRoute_Full: {
        /** Unique ID for this route. Required when updating an existing route */
        readonly id?: number;
    } & definitions["siteRoute_Base"];
    readonly put_Site: {
        /** The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
        readonly url?: string;
    };
    readonly _site: {
        readonly id?: number;
        /** The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
        readonly url?: string;
        /** The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
        readonly channel_id?: number;
        /** When was this site created? RFC 3339 */
        readonly created_at?: string;
        /** When was this site defintion last updated? RFC 3339 */
        readonly updated_at?: string;
        /** (optional - if included) collection of routes defined for this site. Limited to 200 routes side loaded (query routes direction via `/routes` for bulk) */
        readonly routes?: readonly definitions["siteRoute_Full"][];
    };
    /** Empty meta object; may be used later. */
    readonly _metaEmpty: {
        readonly [key: string]: any;
    };
    /** Data about the response, including pagination and collection totals. */
    readonly _pagination: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
        /** Pagination links for the previous and next parts of the whole collection. */
        readonly links?: {
            /** Link to the previous page returned in the response. */
            readonly previous?: string;
            /** Link to the current page returned in the response. */
            readonly current?: string;
            /** Link to the next page returned in the response. */
            readonly next?: string;
        };
    };
    /** The keys and values in an errors object will vary depending on the error received. */
    readonly _errors: {
        readonly [key: string]: any;
    };
    readonly error_Full: {
        /** The HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
    };
    readonly errorDetailed_Full: {
        readonly errors?: {
            readonly [key: string]: string;
        };
    };
    readonly post_Site: {
        /** The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
        readonly url?: string;
        /** The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
        readonly channel_id?: number;
    };
    readonly siteRoute_Base: {
        /** The type of resource being routed to; [supported types](https://developer.bigcommerce.com/api-reference/cart-checkout/sites-routes-api#route-types). */
        readonly type?: "product" | "brand" | "category" | "page" | "blog" | "home" | "cart" | "checkout" | "search" | "account" | "login" | "returns" | "static";
        /**
         * (entity_id?) For a given type, which resources should match this route? e.g For a route with the type: "product" and matching: "5" this route would be used for the product with the ID of 5.
         *
         * Depending on the type of resource, this may be an ID (matching a specific item), or a "*" wildcard matching all items of that type.
         */
        readonly matching?: string;
        /**
         * The route template that will be used to generate the URL for the requested resource.
         *
         * Supports several tokens:
         * - `{id}` The **ID** of the requested item
         * - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash
         * - `{language}` The **language** string that the client is using
         */
        readonly route?: string;
    };
}
export interface parameters {
}
export interface responses {
    /** If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
    readonly "502_GatewayError": {
        readonly schema: definitions["error_Full"];
    };
    /** If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually) */
    readonly "504_GatewayTimeout": {
        readonly schema: definitions["error_Full"];
    };
    readonly "403_Unauthorized": {
        readonly schema: definitions["error_Full"];
    };
    /**
     * Malformed request syntax. Typically need to fix the JSON
     * Body to resend successfully.
     */
    readonly "400_BadRequest": {
        readonly schema: definitions["error_Full"];
    };
    /** Requested resource not founded. */
    readonly "404_NotFound": {
        readonly schema: definitions["error_Full"];
    };
    /** This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
    readonly "422_UnprocessableEntity": {
        readonly schema: definitions["errorDetailed_Full"];
    };
    /** If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually) */
    readonly "503_ServiceUnavailable": {
        readonly schema: definitions["error_Full"];
    };
    readonly response_Site: {
        readonly schema: {
            readonly data?: definitions["_site"];
            readonly meta?: definitions["_metaEmpty"];
        };
    };
    readonly BulkErrorResponse: {
        readonly schema: {
            /** The HTTP status code. */
            readonly status?: number;
            readonly title?: string;
            readonly errors?: definitions["_errors"];
            readonly meta?: definitions["_metaEmpty"];
            readonly type?: string;
        };
    };
    readonly ErrorResponse: {
        readonly schema: {
            /** General error message */
            readonly title?: string;
            /** HTTP status code */
            readonly status?: string;
            readonly errors?: definitions["_errors"];
            readonly type?: string;
        };
    };
    readonly site_RespCollection: {
        readonly schema: {
            readonly data?: readonly definitions["_site"][];
            readonly meta?: definitions["_metaCollection"];
        };
    };
    readonly siteRoute_Resp: {
        readonly schema: {
            readonly data?: definitions["siteRoute_Full"];
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
    };
}
export interface operations {
    /**
     * Create a site that links a [headless storefront](https://developer.bigcommerce.com/api-docs/storefronts/developers-guide-headless) to a sales [channel](https://developer.bigcommerce.com/api-reference/cart-checkout/channels-listings-api).
     *
     * - [Authorization](#authorization)
     * - [Request Body](#request-body)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "post-site": {
        readonly parameters: {
            readonly body: {
                readonly body: definitions["post_Site"];
            };
        };
        readonly responses: {
            readonly 201: responses["response_Site"];
            readonly 400: responses["400_BadRequest"];
            readonly 403: responses["403_Unauthorized"];
            readonly 404: responses["404_NotFound"];
            readonly 502: unknown;
            readonly 504: responses["504_GatewayTimeout"];
        };
    };
    /**
     * Get a site with site ID `{site_id}`.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "get-site": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
            };
        };
        readonly responses: {
            readonly 200: responses["response_Site"];
        };
    };
    /**
     * Update a site with site ID `{site_id}`.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Request Body](#request-body)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "put-site": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
            };
            readonly body: {
                readonly body: definitions["put_Site"];
            };
        };
        readonly responses: {
            readonly 200: responses["response_Site"];
        };
    };
    /**
     * Delete a site with site ID `{site_id}`.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "delete-site": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /**
     * Get a site's routes.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Request Body](#request-body)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "index-site-routes": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
            };
            readonly query: {
                /** Filter routes by a given resource type */
                readonly type?: string;
                /** Specifies the page number in a limited (paginated) list of items. */
                readonly page?: number;
                /** Controls the number of items per page in a limited (paginated) list of items. */
                readonly limit?: number;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: {
                    readonly data?: readonly definitions["siteRoute_Full"][];
                    readonly meta?: definitions["_metaCollection"];
                };
            };
        };
    };
    /**
     * Create routes that tell BigCommerce how to link to pages on a [headless storefront](https://developer.bigcommerce.com/api-docs/storefronts/developers-guide-headless).
     *
     * - [Usage notes](#usage-notes)
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Request Body](#request-body)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     *
     * ## Usage Notes
     * * For a list of supported route types, see [Route types](https://developer.bigcommerce.com/api-reference/store-management/sites#route-types).
     */
    readonly "post-site-route": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
            };
            readonly body: {
                readonly body: definitions["siteRoute_Base"];
            };
        };
        readonly responses: {
            readonly 201: responses["siteRoute_Resp"];
            readonly 422: responses["ErrorResponse"];
            readonly 502: responses["502_GatewayError"];
        };
    };
    /**
     * Get a site's route.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "get-site-route": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
                readonly route_id: number;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly schema: {
                    readonly data?: definitions["siteRoute_Full"];
                    readonly meta?: {
                        readonly [key: string]: any;
                    };
                };
            };
        };
    };
    /**
     * Update a site's route.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Request Body](#request-body)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "put-site-route": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
                readonly route_id: number;
            };
            readonly body: {
                readonly body: definitions["siteRoute_Full"];
            };
        };
        readonly responses: {
            readonly 201: responses["siteRoute_Resp"];
        };
    };
    /**
     * Delete a site's route.
     *
     * - [Authorization](#authorization)
     * - [Request Parameters](#request-parameters)
     * - [Responses](#responses)
     * - [Send a Test Request](#send-a-test-request)
     */
    readonly "delete-route": {
        readonly parameters: {
            readonly path: {
                readonly site_id: number;
                readonly route_id: number;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
}
