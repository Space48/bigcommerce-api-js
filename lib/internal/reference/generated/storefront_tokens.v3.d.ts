/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/storefront/api-token": {
        /**
         * Creates a Storefront API token.
         *
         * **Required Scopes**
         * * `Manage` `Storefront API Tokens`
         */
        readonly post: operations["createToken"];
        /** Revoke access for a Storefront API token. */
        readonly delete: operations["revokeToken"];
    };
    readonly "/storefront/api-token-customer-impersonation": {
        /**
         * Creates a Storefront API token that allows for customer impersonation.
         *
         * **Required Scopes**
         * * `Manage` `Storefront API Customer Impersonation Tokens`
         *
         * **Headers**:
         * * `X-Bc-Customer-Id` - The ID of the Customer to impersonate
         */
        readonly post: operations["createTokenWithCustomerImpersonation"];
    };
}
export interface definitions {
    readonly TokenPostImpersonation: {
        /** Channel ID for requested token */
        readonly channel_id: number;
        /** Unix timestamp (UTC time) defining when the token should expire. */
        readonly expires_at: number;
    };
    readonly TokenPostSimple: {
        /** List of allowed domains for Cross-Origin Request Sharing. Currently only accepts a single element. */
        readonly allowed_cors_origins?: readonly string[];
    };
    readonly Token_Full: {
        readonly data?: definitions["Token_Base"];
        readonly meta?: {
            readonly [key: string]: any;
        };
    };
    readonly Token_Base: {
        /** JWT Token for accessing the Storefront API */
        readonly token?: string;
    };
    readonly ErrorResponse: definitions["BaseError"] & {
        readonly errors?: definitions["DetailedErrors"];
    };
    /** Error payload for the BigCommerce API. */
    readonly BaseError: {
        /** The HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
    };
    readonly DetailedErrors: {
        readonly [key: string]: string;
    };
}
export interface responses {
    readonly TokenResponse: {
        readonly schema: definitions["Token_Full"];
    };
}
export interface operations {
    /**
     * Creates a Storefront API token.
     *
     * **Required Scopes**
     * * `Manage` `Storefront API Tokens`
     */
    readonly createToken: {
        readonly parameters: {
            readonly body: {
                readonly body?: definitions["TokenPostSimple"] & definitions["TokenPostImpersonation"];
            };
        };
        readonly responses: {
            readonly 200: responses["TokenResponse"];
            /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            readonly 401: unknown;
            /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            readonly 403: unknown;
            /** Invalid JSON request body - missing or invalid data. */
            readonly 422: unknown;
        };
    };
    /** Revoke access for a Storefront API token. */
    readonly revokeToken: {
        readonly parameters: {
            readonly header: {
                /** An existing JWT token that you want to revoke. */
                readonly "Sf-Api-Token": string;
            };
        };
        readonly responses: {
            /** A storefront API token revocation has been scheduled. */
            readonly 200: unknown;
            /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            readonly 401: unknown;
            /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            readonly 403: unknown;
            /** Invalid JWT Token provided or missing JWT token header */
            readonly 422: unknown;
        };
    };
    /**
     * Creates a Storefront API token that allows for customer impersonation.
     *
     * **Required Scopes**
     * * `Manage` `Storefront API Customer Impersonation Tokens`
     *
     * **Headers**:
     * * `X-Bc-Customer-Id` - The ID of the Customer to impersonate
     */
    readonly createTokenWithCustomerImpersonation: {
        readonly parameters: {
            readonly header: {
                /** Ther Customer ID for the customer to impersonate */
                readonly "X-Bc-Customer-Id": number;
            };
            readonly body: {
                readonly body?: definitions["TokenPostImpersonation"];
            };
        };
        readonly responses: {
            readonly 200: responses["TokenResponse"];
            /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            readonly 401: unknown;
            /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            readonly 403: unknown;
            /** Invalid JSON request body - missing or invalid data */
            readonly 422: unknown;
        };
    };
}
