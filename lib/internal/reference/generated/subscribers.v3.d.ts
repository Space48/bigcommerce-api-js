/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/customers/subscribers": {
        /** Returns a list of *Subscribers*. Optional filter parameters can be passed in. */
        readonly get: operations["getSubscribers"];
        /**
         * Creates a *Subscriber*.
         *
         * **Required Fields**
         * * email
         *
         * **Read Only Fields**
         * * id
         */
        readonly post: operations["createSubscriber"];
        /** By default, it deletes all *Subscribers*. A filter should be added to avoid deleting all subscribers in a store. */
        readonly delete: operations["deleteSubscribers"];
    };
    readonly "/customers/subscribers/{subscriber_id}": {
        /** Returns a *Subscriber*. */
        readonly get: operations["getSubscriberById"];
        /**
         * Updates a *Subscriber*.
         *
         * **Read Only Fields**
         * * id
         */
        readonly put: operations["updateSubscriber"];
        /** Deletes a *Subscriber*. */
        readonly delete: operations["deleteSubscriberById"];
        readonly parameters: {
            readonly path: {
                /** The ID of the `Subscriber` requested. */
                readonly subscriber_id: number;
            };
        };
    };
}
export interface definitions {
    /** Full subscriber object returned in responses. */
    readonly subscriber_Full: definitions["subscriber_Base"] & {
        /** The unique numeric ID of the subscriber; increments sequentially. */
        readonly id?: number;
        /** The date on which the subscriber was modified. */
        readonly date_modified?: string;
        /** The date of which the subscriber was created. */
        readonly date_created?: string;
    };
    /** Common Subscriber properties. */
    readonly subscriber_Base: {
        /** The email of the subscriber. Must be unique. */
        readonly email?: string;
        /** The first name of the subscriber. */
        readonly first_name?: string;
        /** The last name of the subscriber. */
        readonly last_name?: string;
        /** The source of the subscriber. Values are: `storefront`, `order`, or `custom`. */
        readonly source?: string;
        /** The ID of the source order, if source was an order. */
        readonly order_id?: number;
        /** The channel ID where the subscriber was created. */
        readonly channel_id?: number;
    };
    readonly Subscriber: {
        /** The unique numeric ID of the subscriber; increments sequentially. */
        readonly id?: number;
        /** The email of the subscriber. Must be unique. */
        readonly email?: string;
        /** The first name of the subscriber. */
        readonly first_name?: string;
        /** The last name of the subscriber. */
        readonly last_name?: string;
        /** The source of the subscriber. Values are: `storefront`, `order`, or `custom`. */
        readonly source?: string;
        /** The ID of the source order, if source was an order. */
        readonly order_id?: number;
    } & {
        /** The date on which the subscriber was modified. */
        readonly date_modified?: string;
        /** The date of which the subscriber was created. */
        readonly date_created?: string;
    };
    /** The model for a POST to create a subscriber. */
    readonly subscriber_Post: definitions["subscriber_Base"];
    /** The model for a PUT to update a subscriber. */
    readonly subscriber_Put: definitions["subscriber_Base"];
    /** Data about the response, including pagination and collection totals. */
    readonly CollectionMeta: {
        /** Data about the response, including pagination and collection totals. */
        readonly pagination?: {
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
            readonly per_page?: number;
            /** The page you are currently on within the collection. */
            readonly current_page?: number;
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
            /** Pagination links for the previous and next parts of the whole collection. */
            readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
            };
        };
    };
    /** Data about the response, including pagination and collection totals. */
    readonly Pagination: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
        /** Pagination links for the previous and next parts of the whole collection. */
        readonly links?: {
            /** Link to the previous page returned in the response. */
            readonly previous?: string;
            /** Link to the current page returned in the response. */
            readonly current?: string;
            /** Link to the next page returned in the response. */
            readonly next?: string;
        };
    };
    /** Empty meta object; may be used later. */
    readonly Meta: {
        readonly [key: string]: any;
    };
    readonly ErrorResponse: {
        /** The HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
        readonly instance?: string;
    } & {
        readonly errors?: {
            readonly additionalProperties?: string;
        };
    };
    /** Error payload for the BigCommerce API. */
    readonly BaseError: {
        /** The HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
        readonly instance?: string;
    };
    /** Error payload for the BigCommerce API. */
    readonly NotFound: {
        /** 404 HTTP status code. */
        readonly status?: number;
        /** The error title describing the particular error. */
        readonly title?: string;
        readonly type?: string;
        readonly instance?: string;
    };
    readonly DetailedErrors: {
        readonly additionalProperties?: string;
    };
}
export interface parameters {
    /** Filter items by email. */
    readonly FilterEmailParam: string;
    /** Filter items by first_name. */
    readonly FilterFirstNameParam: string;
    /** Filter items by last_name. */
    readonly FilterLastNameParam: string;
    /** Filter items by source. */
    readonly FilterSourceParam: string;
    /** Filter items by order_id. */
    readonly FilterOrderIdParam: number;
    /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
    readonly FilterDateModifiedParam: string;
    /** Filter items by date_created. */
    readonly FilterDateCreatedParam: string;
    /** Specifies the page number in a limited (paginated) list of products. */
    readonly PageParam: number;
    /** Controls the number of items per page in a limited (paginated) list of products. */
    readonly LimitParam: number;
    /** Scripts field name to sort by. */
    readonly ScriptsSortKeyParam: "name" | "description" | "date_created" | "date_modified";
    /** Sort direction. Acceptable values are: `asc`, `desc`. */
    readonly DirectionParam: "asc" | "desc";
    /** The ID of the `Subscriber` requested. */
    readonly SubscriberIdParam: number;
    readonly Accept: string;
    readonly "Content-Type": string;
}
export interface responses {
    readonly subrscriberCollection_Resp: {
        readonly schema: {
            readonly data?: readonly definitions["subscriber_Full"][];
            readonly meta?: definitions["CollectionMeta"];
        };
    };
    readonly subscriber_Resp: {
        readonly schema: {
            readonly data?: definitions["subscriber_Full"];
            /** Empty meta object; may be used later. */
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
    };
}
export interface operations {
    /** Returns a list of *Subscribers*. Optional filter parameters can be passed in. */
    readonly getSubscribers: {
        readonly parameters: {
            readonly query: {
                /** Filter items by email. */
                readonly email?: string;
                /** Filter items by first_name. */
                readonly first_name?: string;
                /** Filter items by last_name. */
                readonly last_name?: string;
                /** Filter items by source. */
                readonly source?: string;
                /** Filter items by order_id. */
                readonly order_id?: number;
                /** Filter items by date_created. */
                readonly date_created?: string;
                /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
                readonly date_modified?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                readonly page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                readonly limit?: number;
                /** Filter items by id. */
                readonly id?: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["subrscriberCollection_Resp"];
        };
    };
    /**
     * Creates a *Subscriber*.
     *
     * **Required Fields**
     * * email
     *
     * **Read Only Fields**
     * * id
     */
    readonly createSubscriber: {
        readonly parameters: {
            readonly body: {
                readonly subscriber: definitions["subscriber_Post"];
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["subscriber_Resp"];
            /** The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as email. */
            readonly 409: {
                readonly schema: {
                    /** The HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                } & {
                    readonly errors?: {
                        readonly additionalProperties?: string;
                    };
                };
            };
            /** The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly schema: {
                    /** The HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                } & {
                    readonly errors?: {
                        readonly additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** By default, it deletes all *Subscribers*. A filter should be added to avoid deleting all subscribers in a store. */
    readonly deleteSubscribers: {
        readonly parameters: {
            readonly query: {
                /** Filter items by email. */
                readonly email?: string;
                /** Filter items by first_name. */
                readonly first_name?: string;
                /** Filter items by last_name. */
                readonly last_name?: string;
                /** Filter items by source. */
                readonly source?: string;
                /** Filter items by order_id. */
                readonly order_id?: number;
                /** Filter items by date_created. */
                readonly date_created?: string;
                /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
                readonly date_modified?: string;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
    /** Returns a *Subscriber*. */
    readonly getSubscriberById: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Subscriber` requested. */
                readonly subscriber_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["subscriber_Resp"];
            /** The resource was not found. */
            readonly 404: {
                readonly schema: {
                    /** 404 HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Subscriber*.
     *
     * **Read Only Fields**
     * * id
     */
    readonly updateSubscriber: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Subscriber` requested. */
                readonly subscriber_id: number;
            };
            readonly body: {
                readonly subscriber: definitions["subscriber_Put"];
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["subscriber_Resp"];
            /** The resource was not found. */
            readonly 404: {
                readonly schema: {
                    /** 404 HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                };
            };
            /** The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`. */
            readonly 409: {
                readonly schema: {
                    /** The HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                } & {
                    readonly errors?: {
                        readonly additionalProperties?: string;
                    };
                };
            };
            /** The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                readonly schema: {
                    /** The HTTP status code. */
                    readonly status?: number;
                    /** The error title describing the particular error. */
                    readonly title?: string;
                    readonly type?: string;
                    readonly instance?: string;
                } & {
                    readonly errors?: {
                        readonly additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Subscriber*. */
    readonly deleteSubscriberById: {
        readonly parameters: {
            readonly path: {
                /** The ID of the `Subscriber` requested. */
                readonly subscriber_id: number;
            };
            readonly header: {
                readonly "Content-Type"?: string;
                readonly Accept?: string;
            };
        };
        readonly responses: {
            readonly 204: never;
        };
    };
}
