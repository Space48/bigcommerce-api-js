/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/themes": {
        /** Returns a list of store *Themes*. */
        readonly get: operations["getStoreThemes"];
        /**
         * Uploads a new *Theme* to your BigCommerce store.
         *
         * **Required Fields**
         * * file
         */
        readonly post: operations["uploadTheme"];
    };
    readonly "/themes/{uuid}": {
        /** Returns a store *Theme*. The theme variation is not available at this endpoint. */
        readonly get: operations["getStoreTheme"];
        /**
         * Deletes a store *Theme*.
         * Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
         */
        readonly delete: operations["deleteStoreTheme"];
        readonly parameters: {
            readonly path: {
                /** The theme identifier. */
                readonly uuid: components["parameters"]["ThemeIdParam"];
            };
        };
    };
    readonly "/themes/{uuid}/actions/download": {
        /** Downloads a stores *Theme*. */
        readonly post: operations["downloadTheme"];
        readonly parameters: {
            readonly path: {
                /** The theme identifier. */
                readonly uuid: components["parameters"]["ThemeIdParam"];
            };
        };
    };
    readonly "/themes/actions/activate": {
        /**
         * Actives a store *Theme*.
         *
         * This returns a 204 response upon success.
         */
        readonly post: operations["activateStoreTheme"];
    };
    readonly "/themes/jobs/{job_id}": {
        /** Returns a theme *Job*. If job is completed, the result is included in the response. */
        readonly get: operations["getJob"];
    };
    readonly "/themes/{uuid}/configurations": {
        /**
         * Returns a list of theme's configurations.
         *
         * **Usage Notes**:
         * * At least one filter must be provided.
         */
        readonly get: {
            readonly parameters: {
                readonly query: {
                    /** Filter configurations by a list of site_ids */
                    readonly "site_id:in": readonly number[];
                    /** Filter configurations by a list of configuration UUIDs. */
                    readonly "uuid:in"?: readonly string[];
                    /** Filter configurations by a variation_uuid. */
                    readonly variation_uuid?: string;
                    /** Specifies the page number in a limited (paginated) list. */
                    readonly page?: components["parameters"]["PageParam"];
                    /** Controls the number of items per page in a limited (paginated) list of products. */
                    readonly limit?: components["parameters"]["LimitParam"];
                    /** Filter configurations by a list of channel_ids. */
                    readonly "channel_id:in"?: readonly number[];
                };
                readonly path: {
                    /** The theme identifier. */
                    readonly uuid: components["parameters"]["ThemeIdParam"];
                };
            };
            readonly responses: {
                readonly 200: components["responses"]["themesConfigurations_RespCollection"];
            };
        };
        readonly parameters: {
            readonly query: {
                /** Filter configurations by a list of site_ids */
                readonly "site_id:in": readonly number[];
                /** Filter configurations by a list of configuration UUIDs */
                readonly "uuid:in"?: readonly string[];
                /** Filter configurations by a variation_uuid */
                readonly variation_uuid?: string;
                /** Specifies the page number in a limited (paginated) list. */
                readonly page?: components["parameters"]["PageParam"];
                /** Controls the number of items per page in a limited (paginated) list of products. */
                readonly limit?: components["parameters"]["LimitParam"];
            };
        };
    };
    readonly "/themes/{uuid}/configurations/validate": {
        /** Validates a theme configuration against the theme's schema without creating it. Useful for testing schemas before creation. */
        readonly post: {
            readonly parameters: {
                readonly path: {
                    /** The theme identifier. */
                    readonly uuid: components["parameters"]["ThemeIdParam"];
                };
            };
            readonly responses: {
                /** Theme passes validation. */
                readonly 200: {
                    readonly content: {
                        readonly "application/json": {
                            readonly [key: string]: any;
                        };
                    };
                };
                /** Theme failed validation, detailed errors in response. */
                readonly 422: {
                    readonly content: {
                        readonly "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly "application/json": components["schemas"]["themeConfiguration_Write"];
                };
            };
        };
        readonly parameters: {
            readonly path: {
                /** The theme identifier. */
                readonly uuid: components["parameters"]["ThemeIdParam"];
            };
        };
    };
    readonly "/themes/custom-templates/{version_uuid}": {
        /** Enumerate available custom templates for in the theme files in a specific theme version for each supported entity type. */
        readonly get: operations["get-themes-theme_uuid-custom-templates"];
        readonly parameters: {
            readonly path: {
                readonly version_uuid: string;
            };
        };
    };
}
export interface components {
    readonly schemas: {
        /** Data about the response, including pagination and collection totals. */
        readonly CollectionMeta: {
            /** Data about the response, including pagination and collection totals. */
            readonly pagination?: {
                /** Total number of items in the result set. */
                readonly total?: number;
                /** Total number of items in the collection response. */
                readonly count?: number;
                /** The amount of items returned in the collection per page, controlled by the limit parameter. */
                readonly per_page?: number;
                /** The page you are currently on within the collection. */
                readonly current_page?: number;
                /** The total number of pages in the collection. */
                readonly total_pages?: number;
                /** Pagination links for the previous and next parts of the whole collection. */
                readonly links?: {
                    /** Link to the previous page returned in the response. */
                    readonly previous?: string;
                    /** Link to the current page returned in the response. */
                    readonly current?: string;
                    /** Link to the next page returned in the response. */
                    readonly next?: string;
                };
            };
        };
        /** Data about the response, including pagination and collection totals. */
        readonly Pagination: {
            /** Total number of items in the result set. */
            readonly total?: number;
            /** Total number of items in the collection response. */
            readonly count?: number;
            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
            readonly per_page?: number;
            /** The page you are currently on within the collection. */
            readonly current_page?: number;
            /** The total number of pages in the collection. */
            readonly total_pages?: number;
            /** Pagination links for the previous and next parts of the whole collection. */
            readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
            };
        };
        /** Data about the response, including pagination and collection totals. */
        readonly Meta: {
            /** Data about the response, including pagination and collection totals. */
            readonly pagination?: {
                /** Total number of items in the result set. */
                readonly total?: number;
                /** Total number of items in the collection response. */
                readonly count?: number;
                /** The amount of items returned in the collection per page, controlled by the limit parameter. */
                readonly per_page?: number;
                /** The page you are currently on within the collection. */
                readonly current_page?: number;
                /** The total number of pages in the collection. */
                readonly total_pages?: number;
                /** Pagination links for the previous and next parts of the whole collection. */
                readonly links?: {
                    /** Link to the previous page returned in the response. */
                    readonly previous?: string;
                    /** Link to the current page returned in the response. */
                    readonly current?: string;
                    /** Link to the next page returned in the response. */
                    readonly next?: string;
                };
            };
        };
        readonly ErrorResponse: {
            /** The HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        } & {
            readonly errors?: {
                readonly [key: string]: string;
            };
        };
        /** Error payload for the BigCommerce API. */
        readonly BaseError: {
            /** The HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        readonly DetailedErrors: {
            readonly [key: string]: string;
        };
        /** Error payload for the BigCommerce API. */
        readonly NotFound: {
            /** 404 HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /** The job identifier for theme upload or download. */
        readonly JobId: {
            /** The job identifier. */
            readonly job_id?: string;
        };
        /** No-content response for the BigCommerce API. */
        readonly NoContent: {
            /** 204 HTTP status code. */
            readonly status?: number;
            /** The error title describing the situation. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /** The job for theme upload or download */
        readonly Job: {
            /** The errors. */
            readonly errors?: readonly {
                /** The error. */
                readonly error?: string;
                /** The message. */
                readonly message?: string;
            }[];
            /** The identifier. */
            readonly id?: string;
            /** The percent complete. */
            readonly percent_complete?: number;
            /** The result. */
            readonly result?: {
                readonly theme_id?: string;
            } & {
                readonly [key: string]: string;
            };
            /** The status. */
            readonly status?: "COMPLETED" | "QUEUED" | "WORKING" | "FAILED";
            /** The time. */
            readonly time?: string;
            /** The warnings. */
            readonly warnings?: readonly {
                /** The message. */
                readonly message?: string;
                /** The warning. */
                readonly warning?: string;
            }[];
        };
        /** A theme. */
        readonly Theme: {
            /** The variations. */
            readonly variations?: readonly {
                /** The description. */
                readonly description?: string;
                /** The external identifier. */
                readonly external_id?: string;
                /** The name. */
                readonly name?: string;
                /** The identifier. */
                readonly uuid?: string;
            }[];
            /** The identifier. */
            readonly uuid?: string;
            /** The theme name identifier. */
            readonly name?: string;
            /** Flag to identify private themes. */
            readonly is_private?: boolean;
        };
        /** Request definition for activation endpoint. */
        readonly Activate: {
            /** The identifier for the variation to activate. */
            readonly variation_id: string;
            /** Which configuration to use. */
            readonly which: "original" | "last_activated" | "last_created";
        };
        /** A variation. */
        readonly Variation: {
            /** The description. */
            readonly description?: string;
            /** The external identifier. */
            readonly external_id?: string;
            /** The name. */
            readonly name?: string;
            /** The identifier. */
            readonly uuid?: string;
        };
        /** Response payload for the BigCommerce API. */
        readonly ThemesCollectionResponse: {
            readonly data?: readonly {
                /** The variations. */
                readonly variations?: readonly {
                    /** The description. */
                    readonly description?: string;
                    /** The external identifier. */
                    readonly external_id?: string;
                    /** The name. */
                    readonly name?: string;
                    /** The identifier. */
                    readonly uuid?: string;
                }[];
                /** The identifier. */
                readonly uuid?: string;
                /** The theme name identifier. */
                readonly name?: string;
                /** Flag to identify private themes. */
                readonly is_private?: boolean;
            }[];
            /** Data about the response, including pagination and collection totals. */
            readonly meta?: {
                /** Data about the response, including pagination and collection totals. */
                readonly pagination?: {
                    /** Total number of items in the result set. */
                    readonly total?: number;
                    /** Total number of items in the collection response. */
                    readonly count?: number;
                    /** The amount of items returned in the collection per page, controlled by the limit parameter. */
                    readonly per_page?: number;
                    /** The page you are currently on within the collection. */
                    readonly current_page?: number;
                    /** The total number of pages in the collection. */
                    readonly total_pages?: number;
                    /** Pagination links for the previous and next parts of the whole collection. */
                    readonly links?: {
                        /** Link to the previous page returned in the response. */
                        readonly previous?: string;
                        /** Link to the current page returned in the response. */
                        readonly current?: string;
                        /** Link to the next page returned in the response. */
                        readonly next?: string;
                    };
                };
            };
        };
        /** Response payload for the BigCommerce API. */
        readonly ThemeResponse: {
            readonly data?: components["schemas"]["Theme"];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** Response for /GET Jobs by Id. */
        readonly JobResponse: {
            /** The job for theme upload or download */
            readonly data?: {
                /** The errors. */
                readonly errors?: readonly {
                    /** The error. */
                    readonly error?: string;
                    /** The message. */
                    readonly message?: string;
                }[];
                /** The identifier. */
                readonly id?: string;
                /** The percent complete. */
                readonly percent_complete?: number;
                /** The result. */
                readonly result?: {
                    readonly theme_id?: string;
                } & {
                    readonly [key: string]: string;
                };
                /** The status. */
                readonly status?: "COMPLETED" | "QUEUED" | "WORKING" | "FAILED";
                /** The time. */
                readonly time?: string;
                /** The warnings. */
                readonly warnings?: readonly {
                    /** The message. */
                    readonly message?: string;
                    /** The warning. */
                    readonly warning?: string;
                }[];
            };
            /** Empty meta object; may be used later. */
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
        /** An object specifying which theme to download. One of: `original`: the original Marketplace or uploaded custom theme; `last_activated`: the theme version most recently applied to the store; `last_created`: the theme version most recently created. */
        readonly WhichThemeToDownload: {
            /** Which revision to use. */
            readonly which?: "original" | "last_activated" | "last_created";
        };
        /** These are the minium request headers needed for BigCommerce. */
        readonly RequestHeaders: {
            readonly "X-Auth-Client"?: string;
            readonly Accepts?: string;
        };
        /** A theme. */
        readonly themeConfiguration_Full: {
            readonly uuid?: string;
            /** The Theme to which the Configuration belongs. */
            readonly theme_uuid?: string;
            /** The Variation to which the Configuration belongs. */
            readonly variation_id?: string;
            /** The content of the configuration, which is a JSON object which will vary in structure from theme to theme. */
            readonly settings?: {
                readonly [key: string]: any;
            };
            readonly date_created?: string;
            /** Site ID to which this configuration belongs. Will be 0 for the original configuration for a Theme. */
            readonly site_id?: number;
        };
        /** A theme. */
        readonly themeConfiguration_Write: {
            /** The Variation to which the Configuration belongs. */
            readonly variation_id?: string;
            /** The content of the configuration, which is a JSON object which will vary in structure from theme to theme. */
            readonly settings?: {
                readonly [key: string]: any;
            };
        };
    };
    readonly responses: {
        readonly themesConfigurations_RespCollection: {
            readonly content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["themeConfiguration_Full"][];
                    readonly meta?: components["schemas"]["CollectionMeta"];
                };
            };
        };
    };
    readonly parameters: {
        /** The job identifier. */
        readonly JobIdParam: string;
        /** The theme identifier. */
        readonly ThemeIdParam: string;
        readonly Accept: string;
        readonly "Content-Type": string;
        /** Specifies the page number in a limited (paginated) list. */
        readonly PageParam: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly LimitParam: number;
    };
}
export interface operations {
    /** Returns a list of store *Themes*. */
    readonly getStoreThemes: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ThemesCollectionResponse"];
                };
            };
        };
    };
    /**
     * Uploads a new *Theme* to your BigCommerce store.
     *
     * **Required Fields**
     * * file
     */
    readonly uploadTheme: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            /** Job ID for the background job processing the theme upload. */
            readonly 201: {
                readonly content: {
                    readonly "application/json": components["schemas"]["JobId"];
                };
            };
            /** Error message. */
            readonly default: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    } & {
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** The file. */
                    readonly file: string;
                };
            };
        };
    };
    /** Returns a store *Theme*. The theme variation is not available at this endpoint. */
    readonly getStoreTheme: {
        readonly parameters: {
            readonly path: {
                /** The theme identifier. */
                readonly uuid: string;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly content: {
                    readonly "application/json": components["schemas"]["ThemeResponse"];
                };
            };
            /** Error message. */
            readonly default: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    } & {
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
    };
    /**
     * Deletes a store *Theme*.
     * Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
     */
    readonly deleteStoreTheme: {
        readonly parameters: {
            readonly path: {
                /** The theme identifier. */
                readonly uuid: string;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 204: never;
            /** Error message. */
            readonly default: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    } & {
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
    };
    /** Downloads a stores *Theme*. */
    readonly downloadTheme: {
        readonly parameters: {
            readonly path: {
                /** The theme identifier. */
                readonly uuid: components["parameters"]["ThemeIdParam"];
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            /** Job ID for the background job processing the download. */
            readonly 200: {
                readonly content: {
                    readonly "application/json": components["schemas"]["JobId"];
                };
            };
            /** Error message. */
            readonly default: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    } & {
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["WhichThemeToDownload"];
            };
        };
    };
    /**
     * Actives a store *Theme*.
     *
     * This returns a 204 response upon success.
     */
    readonly activateStoreTheme: {
        readonly parameters: {
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            /** This returns when the request is successful. */
            readonly 204: {
                readonly content: {
                    readonly "application/json": components["schemas"]["NoContent"];
                };
            };
            /** Error message. */
            readonly default: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    } & {
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
        /** Request parameters. */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["Activate"];
            };
        };
    };
    /** Returns a theme *Job*. If job is completed, the result is included in the response. */
    readonly getJob: {
        readonly parameters: {
            readonly path: {
                /** The job identifier. */
                readonly job_id: string;
            };
            readonly header: {
                readonly Accept: string;
                readonly "Content-Type": string;
            };
        };
        readonly responses: {
            readonly 200: {
                readonly content: {
                    readonly "application/json": components["schemas"]["JobResponse"];
                };
            };
            /** Error message. */
            readonly default: {
                readonly content: {
                    readonly "application/json": {
                        /** The HTTP status code. */
                        readonly status?: number;
                        /** The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    } & {
                        readonly errors?: {
                            readonly [key: string]: string;
                        };
                    };
                };
            };
        };
    };
    /** Enumerate available custom templates for in the theme files in a specific theme version for each supported entity type. */
    readonly "get-themes-theme_uuid-custom-templates": {
        readonly parameters: {
            readonly path: {
                readonly version_uuid: string;
            };
        };
        readonly responses: {
            /** OK */
            readonly 200: {
                readonly content: {
                    readonly "application/json": {
                        readonly data?: {
                            readonly product?: readonly string[];
                            readonly category?: readonly string[];
                            readonly brand?: readonly string[];
                            readonly page?: readonly string[];
                        };
                        readonly meta?: {
                            readonly [key: string]: any;
                        };
                    };
                };
            };
        };
    };
}
