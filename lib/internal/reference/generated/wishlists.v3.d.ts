/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    readonly "/wishlists": {
        /** Returns a list of wishlists. Optional filter parameters can be passed in. */
        readonly get: operations["WishlistsGet"];
        /**
         * Creates a wishlist and wishlist item. More than one item can be added in the POST.
         *
         * **Required Fields**
         * * name
         * * customer_id
         */
        readonly post: operations["WishlistsPost"];
    };
    readonly "/wishlists/{wishlist_id}/items/{item_id}": {
        /** Deletes a wishlist item. */
        readonly delete: operations["WishlistsItemsByIdDelete"];
        readonly parameters: {
            readonly path: {
                readonly wishlist_id: string;
                readonly item_id: string;
            };
        };
    };
    readonly "/wishlists/{wishlist_id}": {
        /** Returns a single wishlist. */
        readonly get: operations["WishlistsByIdGet"];
        /**
         * Updates a wishlist.
         *
         * Use this endpoint to update existing wishlist items, change the wishlist's name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](https://developer.bigcommerce.com/api-reference/store-management/wishlists/wishlists-items).
         *
         * **Required Fields**
         * * customer_id
         */
        readonly put: operations["WishlistsByIdPut"];
        /** Deletes a wishlist. */
        readonly delete: operations["WishlistsByIdDelete"];
        readonly parameters: {
            readonly path: {
                readonly wishlist_id: string;
            };
        };
    };
    readonly "/wishlists/{wishlist_id}/items": {
        /** Adds a wishlist item. More than one item can be added at a time. */
        readonly post: operations["WishlistsItemsByIdPost"];
        readonly parameters: {
            readonly path: {
                readonly wishlist_id: string;
            };
        };
    };
}
export interface definitions {
    readonly wishlist_Post: {
        /** The customer id. */
        readonly customer_id: number;
        /** Whether the wishlist is available to the public. */
        readonly is_public?: boolean;
        /** The title of the wishlist. */
        readonly name?: string;
        /** Array of wishlist items. */
        readonly items?: readonly {
            /** The ID of the product. */
            readonly product_id?: number;
            /** The variant ID of the product. */
            readonly variant_id?: number;
        }[];
    };
    readonly wishlist_Put: {
        /** The customer ID. A read-only value. */
        readonly customer_id: number;
        /** Whether the wishlist is available to the public. */
        readonly is_public?: boolean;
        /** The title of the wishlist. */
        readonly name?: string;
        /** Array of wishlist items. */
        readonly items?: readonly {
            /** The ID of the item. */
            readonly id?: number;
            /** The ID of the product. */
            readonly product_id?: number;
            /** The variant ID of the product. */
            readonly variant_id?: number;
        }[];
    };
    readonly wishlist_Full: {
        /** Wishlist ID, provided after creating a wishlist with a POST. */
        readonly id?: number;
        /** The ID the customer to which the wishlist belongs. */
        readonly customer_id?: number;
        /** The name of the wishlist. */
        readonly name?: string;
        /** Whether the wishlist is available to the public. */
        readonly is_public?: boolean;
        /** The token of the wishlist. This is created internally within BigCommerce. The wishlist ID is to be used for external apps. Read-Only. */
        readonly token?: string;
        /** Array of wishlist items. */
        readonly items?: readonly definitions["wishlistItem_Full"][];
    };
    readonly wishlistItem_Full: {
        /** The ID of the item. */
        readonly id?: number;
        /** The ID of the product. */
        readonly product_id?: number;
        /** The variant ID of the product. */
        readonly variant_id?: number;
    };
    readonly wishlistItem_Post: {
        /** The ID of the product. */
        readonly product_id?: number;
        /** The variant ID of the product. */
        readonly variant_id?: number;
    };
    /** Data about the response, including pagination and collection totals. */
    readonly pagination: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
    };
    readonly error: {
        readonly status?: number;
        readonly title?: string;
        readonly type?: string;
    };
    readonly metaCollection: {
        readonly pagination?: definitions["pagination"];
    };
}
export interface parameters {
    /** All wishlists relating to the customer. */
    readonly FilterCustomerID: number;
    /** The page number of results per page. 1 is the default and starts from record 0. */
    readonly FilterPage: number;
    /** The numbers of items to return per page. Default is 50 and maximum is 250. */
    readonly FilterLimit: number;
    /** ID of the Wishlist */
    readonly WishlistID: number;
    readonly "Content-Type": string;
    readonly Accept: string;
}
export interface responses {
    readonly Wishlist_Resp: {
        readonly schema: {
            readonly data?: definitions["wishlist_Full"];
            readonly meta?: {
                readonly [key: string]: any;
            };
        };
    };
    readonly wishlist_Resp_Collection: {
        readonly schema: {
            readonly data?: readonly definitions["wishlist_Full"][];
            readonly meta?: definitions["metaCollection"];
        };
    };
    /** Authentication information is missing or invalid. */
    readonly Unauthorized: {
        readonly schema: {
            readonly status?: number;
            readonly title?: string;
            readonly type?: string;
        };
    };
}
export interface operations {
    /** Returns a list of wishlists. Optional filter parameters can be passed in. */
    readonly WishlistsGet: {
        readonly parameters: {
            readonly query: {
                /** All wishlists relating to the customer. */
                readonly customer_id?: number;
                /** The page number of results per page. 1 is the default and starts from record 0. */
                readonly page?: number;
                /** The numbers of items to return per page. Default is 50 and maximum is 250. */
                readonly limit?: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["wishlist_Resp_Collection"];
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Internal server error. */
            readonly 500: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
    };
    /**
     * Creates a wishlist and wishlist item. More than one item can be added in the POST.
     *
     * **Required Fields**
     * * name
     * * customer_id
     */
    readonly WishlistsPost: {
        readonly parameters: {
            readonly body: {
                readonly body: definitions["wishlist_Post"];
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 201: responses["Wishlist_Resp"];
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Internal server error. */
            readonly 500: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
    };
    /** Deletes a wishlist item. */
    readonly WishlistsItemsByIdDelete: {
        readonly parameters: {
            readonly path: {
                /** ID of the Wishlist */
                readonly wishlist_id: number;
                readonly item_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["Wishlist_Resp"];
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Wishlist not found. */
            readonly 404: {
                readonly schema: {
                    readonly [key: string]: any;
                };
            };
            /** Internal server error. */
            readonly 500: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
    };
    /** Returns a single wishlist. */
    readonly WishlistsByIdGet: {
        readonly parameters: {
            readonly path: {
                /** ID of the Wishlist */
                readonly wishlist_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 200: responses["Wishlist_Resp"];
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Wishlist not found. */
            readonly 404: {
                readonly schema: {
                    readonly [key: string]: any;
                };
            };
            /** Internal server error. */
            readonly 500: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
    };
    /**
     * Updates a wishlist.
     *
     * Use this endpoint to update existing wishlist items, change the wishlist's name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](https://developer.bigcommerce.com/api-reference/store-management/wishlists/wishlists-items).
     *
     * **Required Fields**
     * * customer_id
     */
    readonly WishlistsByIdPut: {
        readonly parameters: {
            readonly path: {
                /** ID of the Wishlist */
                readonly wishlist_id: number;
            };
            readonly body: {
                readonly body: definitions["wishlist_Put"];
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 201: responses["Wishlist_Resp"];
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Internal server error. */
            readonly 500: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
    };
    /** Deletes a wishlist. */
    readonly WishlistsByIdDelete: {
        readonly parameters: {
            readonly path: {
                /** ID of the Wishlist */
                readonly wishlist_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
        };
        readonly responses: {
            readonly 204: never;
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Internal server error. */
            readonly 500: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
    };
    /** Adds a wishlist item. More than one item can be added at a time. */
    readonly WishlistsItemsByIdPost: {
        readonly parameters: {
            readonly path: {
                /** ID of the Wishlist */
                readonly wishlist_id: number;
            };
            readonly header: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly body: {
                readonly body?: definitions["wishlistItem_Post"];
            };
        };
        readonly responses: {
            readonly 201: responses["Wishlist_Resp"];
            /** Authentication information is missing or invalid. */
            readonly 401: {
                readonly schema: {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
            /** Wishlist not found. */
            readonly 404: unknown;
            /** Internal server error. */
            readonly 500: unknown;
        };
    };
}
