/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/carts": {
    /**
     * Creates a **Cart**.
     *
     * **Required Fields**
     *
     * |Field|Details|
     * |-|-|
     * |`line_items`||
     * |`custom_items`|Only required if adding a custom item to the cart.|
     * |`gift_certificates`|Only required if adding a gift certificate to the cart.|
     *
     * **Usage Notes**
     *
     * * A **cart** `id` (UUID) is returned in the response.
     * * A **cart** `id` is the same as a **checkout** `id`.
     * * A cart can be created by adding an existing **catalog item** or a **custom item**.
     * * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart).
     * * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     * * The format and data type of a cart's `option_value` is defined by the `value_data` object of a product’s [variant option value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-option-values/getoptionvaluebyid), [modifier value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-modifier-values/getmodifiervaluebyid), or a combination of both.
     * * Redirect URLs can only be generated from carts created using the **Server-to-Server Carts API**.
     * * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`.
     * * To restore a cart that was created by a shopper or via the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
     */
    readonly post: operations["createACart"];
  };
  readonly "/carts/{cartId}/items": {
    /**
     * Adds line items to the *Cart*.
     *
     * **Usage Notes**
     *
     * To add a custom item use `custom_items`.
     *
     * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     */
    readonly post: operations["addCartLineItem"];
  };
  readonly "/carts/{cartId}/redirect_urls": {
    /**
     * Creates a **Cart** redirect URL for redirecting a shopper to an already created cart using the `cartId`.
     *
     * **Usage Notes**
     *
     * * Redirect URLs can also be created via **Create a Cart** requests by appending `include=redirect_urls`.
     * * A **Carts** redirect URLs may only be used once.
     * * Once a redirect URL has been visited, it will be invalidated and cannot be used again.
     * * If your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.
     * * Redirect URLs can be generated only from carts created using the Server to Server Cart API.
     * * To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
     */
    readonly post: operations["createCartRedirectURL"];
  };
  readonly "/carts/{cartId}/items/{itemId}": {
    /**
     * Updates an existing, single line item in the *Cart*.
     *
     * **Notes**
     *
     * Currently, only updating `list_price` and `quantity` are supported. Updating a product's `list_price` will make that item ineligible for V3 product level promotions.
     *
     * If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.
     *
     * `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.
     *
     * Deleting all line items from the cart will invalidate the cart.
     */
    readonly put: operations["updateCartLineItem"];
    /**
     * Deletes a *Cart* line item.
     *
     * **Notes**
     *
     * Removing the last `line_item` in the *Cart* deletes the *Cart*.
     */
    readonly delete: operations["deleteCartLineItem"];
  };
  readonly "/carts/{cartId}": {
    /** Returns a stores *Cart*. */
    readonly get: operations["getACart"];
    /**
     * Updates a *Carts* `customer_id`.
     *
     * **Notes**
     *
     * Changing the *Cart* `customer_id` will remove any promotions or shipping on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups.
     */
    readonly put: operations["updateACart"];
    /** Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered. */
    readonly delete: operations["deleteACart"];
  };
}

export interface definitions {
  readonly CartUpdateRequest: {
    readonly line_item?: {
      readonly quantity: number;
      readonly product_id: number;
      /** Required if the product has variants */
      readonly variant_id: number;
      readonly list_price?: number;
      readonly option_selections?: readonly {
        readonly option_id?: number;
        readonly option_value?: string;
      }[];
    };
    readonly gift_certificate?: {
      /** Given name for gift certificate line item. */
      readonly name: string;
      /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      readonly theme: string;
      readonly amount: number;
      readonly quantity: number;
      readonly sender: {
        readonly name?: string;
        readonly email?: string;
      };
      readonly recipient: {
        readonly name?: string;
        readonly email?: string;
      };
      /** Message shown to recipient, as provided by sender. */
      readonly message?: string;
    };
  };
  readonly CartCreatePostData: {
    readonly customer_id?: number;
    readonly line_items?:
      | definitions["cart_PostVariant"]
      | definitions["cart_PostModifier"];
    readonly custom_items?: definitions["cart_PostCustomItem"];
    readonly gift_certificates?: readonly {
      /** Given name for gift certificate line item. */
      readonly name: string;
      /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      readonly theme: string;
      readonly amount: number;
      readonly quantity: number;
      readonly sender: {
        readonly name?: string;
        readonly email?: string;
      };
      readonly recipient: {
        readonly name?: string;
        readonly email?: string;
      };
      /** Message shown to recipient, as provided by sender. */
      readonly message?: string;
    }[];
    /** If no channel is specified, defaults to 1. */
    readonly channel_id?: number;
    readonly currency?: {
      /** The [transactional currency](https://developer.bigcommerce.com/api-docs/multi-currency/guide/introduction#multi-currency-definitions) code for the cart as a [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) formatted string; required when multi-currency is enabled. Passing in a non-transactional display currency will result in a `400` error. */
      readonly code?: string;
    };
    /** Accepts string of format `xx` or `xx-YY`. */
    readonly locale?: string;
  };
  readonly CartRequestData: {
    readonly line_items?: readonly {
      readonly quantity: number;
      readonly product_id: number;
      /** Required if the product has variants */
      readonly variant_id: number;
      readonly list_price?: number;
      readonly option_selections?: readonly {
        readonly option_id?: number;
        readonly option_value?: string;
      }[];
    }[];
    readonly gift_certificates?: readonly {
      /** Given name for gift certificate line item. */
      readonly name: string;
      /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      readonly theme: string;
      readonly amount: number;
      readonly quantity: number;
      readonly sender: {
        readonly name?: string;
        readonly email?: string;
      };
      readonly recipient: {
        readonly name?: string;
        readonly email?: string;
      };
      /** Message shown to recipient, as provided by sender. */
      readonly message?: string;
    }[];
    /** If no channel is specified, defaults to 1. */
    readonly channel_id?: number;
  };
  readonly CartUpdatePutRequestData: {
    readonly customer_id?: number;
  };
  readonly LineItemRequestData: {
    readonly quantity: number;
    readonly product_id: number;
    /** Required if the product has variants */
    readonly variant_id: number;
    readonly list_price?: number;
    readonly option_selections?: readonly {
      readonly option_id?: number;
      readonly option_value?: string;
    }[];
  };
  readonly ProductOptionSelection: {
    readonly option_id?: number;
    readonly option_value?: string;
  };
  readonly LineItemGiftCertificateRequestData: {
    /** Given name for gift certificate line item. */
    readonly name: string;
    /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
    readonly theme: string;
    readonly amount: number;
    readonly quantity: number;
    readonly sender: {
      readonly name?: string;
      readonly email?: string;
    };
    readonly recipient: {
      readonly name?: string;
      readonly email?: string;
    };
    /** Message shown to recipient, as provided by sender. */
    readonly message?: string;
  };
  /** A cart contains a collection of items, prices, discounts, etc.. It does not contain customer-related data. */
  readonly Cart_Full: {
    /** Cart ID, provided after creating a cart with a POST. */
    readonly id?: string;
    /** Bundled items will have their parent's item Id. */
    readonly parent_id?: string;
    /** ID of the customer to which the cart belongs. */
    readonly customer_id?: number;
    /** The cart's email. This is the same email that is used in the billing address */
    readonly email?: string;
    /** This will always be the same between cart and checkout. */
    readonly currency?: {
      /** The [transactional currency](https://developer.bigcommerce.com/api-docs/multi-currency/guide/introduction#multi-currency-definitions) code for the cart as a [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) formatted string. */
      readonly code?: string;
    };
    readonly tax_included?: boolean;
    /** Sum of cart line-item amounts before cart-level discounts, coupons, or taxes. */
    readonly base_amount?: number;
    /** Discounted amount. */
    readonly discount_amount?: number;
    /** Sum of cart line-item amounts minus cart-level discounts and coupons. This amount includes taxes (where applicable). */
    readonly cart_amount?: number;
    readonly coupons?: readonly definitions["AppliedCoupon"][];
    readonly discounts?: readonly {
      /** ID of the applied discount. */
      readonly id?: number;
      /** The discounted amount. */
      readonly discounted_amount?: number;
    }[];
    readonly line_items?: readonly {
      readonly physical_items: readonly ({
        /** The line-item ID. */
        readonly id?: string;
        /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
        readonly variant_id: number;
        /** The id of the product. Required in a /POST request. */
        readonly product_id: number;
        /** SKU of the variant. */
        readonly sku?: string;
        /** The item's product name. */
        readonly name?: string;
        /** The product URL. */
        readonly url?: string;
        /** Quantity of this item in the cart. */
        readonly quantity: number;
        /** Whether the item is taxable. */
        readonly is_taxable?: boolean;
        /** Image of the product or variant. */
        readonly image_url?: string;
        readonly discounts?: readonly {
          /** ID of the applied discount. Will return */
          readonly id?: number;
          /** The discounted amount. */
          readonly discounted_amount?: number;
        }[];
        readonly coupons?: readonly {
          /** Required in a /POST request. */
          readonly coupons?: {
            /** The coupon code */
            readonly coupon_code: {
              /** Coupon Id */
              readonly id?: number;
              /** The coupon code. Required in a /POST request. */
              readonly code?: string;
              /** Name given to the coupon in the Control Panel */
              readonly name?: string;
              /**
               * The discount type.
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               */
              readonly discountType?: 0 | 1 | 2 | 3 | 4;
              /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
              readonly discountAmount?: number;
              /** Returns 0 if a expiration date is not set */
              readonly expiresDate?: number;
              /** Total discount amount off cart */
              readonly totalDiscount?: number;
            };
          };
        }[];
        /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
        readonly discount_amount?: number;
        /** The total value of all coupons applied to this item. */
        readonly coupon_amount?: number;
        /** Item's list price, as quoted by the manufacturer/distributor. */
        readonly list_price?: number;
        /** Item's price after all discounts are applied. (The final price before tax calculation.) */
        readonly sale_price?: number;
        /** Item's list price multiplied by the quantity. */
        readonly extended_list_price?: number;
        /** Item's sale price multiplied by the quantity. */
        readonly extended_sale_price?: number;
        /** The list of selected options for this product. */
        readonly options?: readonly {
          /** The product option name. For example, Color or Size */
          readonly name?: string;
          /** The product option identifier. */
          readonly name_id?: number;
          /** The product option value. For example, Red or Medium */
          readonly value?: string;
          /** The product option value identifier. */
          readonly value_id?: number;
        }[];
      } & {
        readonly is_require_shipping?: boolean;
        readonly gift_wrapping?: {
          readonly name?: string;
          readonly message?: string;
          readonly amount?: number;
        };
      })[];
      readonly digital_items: readonly ({
        /** The line-item ID. */
        readonly id?: string;
        /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
        readonly variant_id: number;
        /** The id of the product. Required in a /POST request. */
        readonly product_id: number;
        /** SKU of the variant. */
        readonly sku?: string;
        /** The item's product name. */
        readonly name?: string;
        /** The product URL. */
        readonly url?: string;
        /** Quantity of this item in the cart. */
        readonly quantity: number;
        /** Whether the item is taxable. */
        readonly is_taxable?: boolean;
        /** Image of the product or variant. */
        readonly image_url?: string;
        readonly discounts?: readonly {
          /** ID of the applied discount. Will return */
          readonly id?: number;
          /** The discounted amount. */
          readonly discounted_amount?: number;
        }[];
        readonly coupons?: readonly {
          /** Required in a /POST request. */
          readonly coupons?: {
            /** The coupon code */
            readonly coupon_code: {
              /** Coupon Id */
              readonly id?: number;
              /** The coupon code. Required in a /POST request. */
              readonly code?: string;
              /** Name given to the coupon in the Control Panel */
              readonly name?: string;
              /**
               * The discount type.
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               */
              readonly discountType?: 0 | 1 | 2 | 3 | 4;
              /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
              readonly discountAmount?: number;
              /** Returns 0 if a expiration date is not set */
              readonly expiresDate?: number;
              /** Total discount amount off cart */
              readonly totalDiscount?: number;
            };
          };
        }[];
        /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
        readonly discount_amount?: number;
        /** The total value of all coupons applied to this item. */
        readonly coupon_amount?: number;
        /** Item's list price, as quoted by the manufacturer/distributor. */
        readonly list_price?: number;
        /** Item's price after all discounts are applied. (The final price before tax calculation.) */
        readonly sale_price?: number;
        /** Item's list price multiplied by the quantity. */
        readonly extended_list_price?: number;
        /** Item's sale price multiplied by the quantity. */
        readonly extended_sale_price?: number;
        /** The list of selected options for this product. */
        readonly options?: readonly {
          /** The product option name. For example, Color or Size */
          readonly name?: string;
          /** The product option identifier. */
          readonly name_id?: number;
          /** The product option value. For example, Red or Medium */
          readonly value?: string;
          /** The product option value identifier. */
          readonly value_id?: number;
        }[];
      } & {
        /** URLs to download all product files. */
        readonly download_file_urls?: readonly string[];
        /** The URL for the combined downloads page. */
        readonly download_page_url?: string;
        /** Combined download size, in human-readable style. E.g.: `30MB`. */
        readonly download_size?: string;
      })[];
      readonly gift_certificates?: readonly {
        readonly id?: string;
        /** GiftCertificate-provided name that will appear in the control panel. */
        readonly name?: string;
        /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        readonly theme: string;
        /** Value must be between 1.00 and 1,000.00 in the store's default currency. */
        readonly amount: number;
        readonly is_taxable?: boolean;
        readonly sender: {
          readonly name?: string;
          readonly email?: string;
        };
        readonly recipient: {
          readonly name?: string;
          readonly email?: string;
        };
        /** Limited to 200 characters. */
        readonly message?: string;
      }[];
      readonly custom_items?: readonly {
        /** Custom item id. */
        readonly id?: string;
        /** Custom item sku. */
        readonly sku?: string;
        /** Item's product name. */
        readonly name?: string;
        /** Quantity of this item in the cart. */
        readonly quantity?: number;
        /** Price of the item. With or without tax depending on the store's set up. */
        readonly list_price?: number;
        /** Item's list price multiplied by quantity. */
        readonly extended_list_price?: number;
      }[];
    }[];
    /** Time when the cart was created. */
    readonly created_time?: string;
    /** Time when the cart was last updated. */
    readonly updated_time?: string;
    /** If no channel is specified, defaults to 1. */
    readonly channel_id?: number;
    /** Locale of the cart. */
    readonly locale?: string;
  };
  /** This will always be the same between cart and checkout. */
  readonly Currency: {
    /** ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
    readonly code?: string;
  };
  readonly LineItem: {
    readonly physical_items: readonly ({
      /** The line-item ID. */
      readonly id?: string;
      /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
      readonly variant_id: number;
      /** The id of the product. Required in a /POST request. */
      readonly product_id: number;
      /** SKU of the variant. */
      readonly sku?: string;
      /** The item's product name. */
      readonly name?: string;
      /** The product URL. */
      readonly url?: string;
      /** Quantity of this item in the cart. */
      readonly quantity: number;
      /** Whether the item is taxable. */
      readonly is_taxable?: boolean;
      /** Image of the product or variant. */
      readonly image_url?: string;
      readonly discounts?: readonly {
        /** ID of the applied discount. Will return */
        readonly id?: { readonly [key: string]: any };
        /** The discounted amount. */
        readonly discounted_amount?: number;
      }[];
      readonly coupons?: readonly {
        /** Required in a /POST request. */
        readonly coupons?: {
          /** The coupon code */
          readonly coupon_code: {
            /** Coupon Id */
            readonly id?: number;
            /** The coupon code. Required in a /POST request. */
            readonly code?: string;
            /** Name given to the coupon in the Control Panel */
            readonly name?: string;
            /**
             * The discount type.
             *
             * - type 0: per_item_discount
             * - type 1: percentage_discount
             * - type 2: per_total_discount
             * - type 3: shipping_discount
             * - type 4: free_shipping
             */
            readonly discountType?: 0 | 1 | 2 | 3 | 4;
            /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
            readonly discountAmount?: number;
            /** Returns 0 if a expiration date is not set */
            readonly expiresDate?: number;
            /** Total discount amount off cart */
            readonly totalDiscount?: number;
          };
        };
      }[];
      /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
      readonly discount_amount?: number;
      /** The total value of all coupons applied to this item. */
      readonly coupon_amount?: number;
      /** Item's list price, as quoted by the manufacturer/distributor. Optional price override. */
      readonly list_price?: number;
      /** Item's price after all discounts are applied. (The final price before tax calculation.) */
      readonly sale_price?: number;
      /** Item's list price multiplied by the quantity. */
      readonly extended_list_price?: number;
      /** Item's sale price multiplied by the quantity. */
      readonly extended_sale_price?: number;
      /** The list of selected options for this product. */
      readonly options?: readonly {
        /** The product option name. For example, Color or Size */
        readonly name?: string;
        /** The product option identifier. */
        readonly name_id?: number;
        /** The product option value. For example, Red or Medium */
        readonly value?: string;
        /** The product option value identifier. */
        readonly value_id?: number;
      }[];
    } & {
      readonly is_require_shipping?: boolean;
      readonly gift_wrapping?: {
        readonly name?: string;
        readonly message?: string;
        readonly amount?: number;
      };
    })[];
    readonly digital_items: readonly ({
      /** The line-item ID. */
      readonly id?: string;
      /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
      readonly variant_id: number;
      /** The id of the product. Required in a /POST request. */
      readonly product_id: number;
      /** SKU of the variant. */
      readonly sku?: string;
      /** The item's product name. */
      readonly name?: string;
      /** The product URL. */
      readonly url?: string;
      /** Quantity of this item in the cart. */
      readonly quantity: number;
      /** Whether the item is taxable. */
      readonly is_taxable?: boolean;
      /** Image of the product or variant. */
      readonly image_url?: string;
      readonly discounts?: readonly {
        /** ID of the applied discount. Will return */
        readonly id?: { readonly [key: string]: any };
        /** The discounted amount. */
        readonly discounted_amount?: number;
      }[];
      readonly coupons?: readonly {
        /** Required in a /POST request. */
        readonly coupons?: {
          /** The coupon code */
          readonly coupon_code: {
            /** Coupon Id */
            readonly id?: number;
            /** The coupon code. Required in a /POST request. */
            readonly code?: string;
            /** Name given to the coupon in the Control Panel */
            readonly name?: string;
            /**
             * The discount type.
             *
             * - type 0: per_item_discount
             * - type 1: percentage_discount
             * - type 2: per_total_discount
             * - type 3: shipping_discount
             * - type 4: free_shipping
             */
            readonly discountType?: 0 | 1 | 2 | 3 | 4;
            /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
            readonly discountAmount?: number;
            /** Returns 0 if a expiration date is not set */
            readonly expiresDate?: number;
            /** Total discount amount off cart */
            readonly totalDiscount?: number;
          };
        };
      }[];
      /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
      readonly discount_amount?: number;
      /** The total value of all coupons applied to this item. */
      readonly coupon_amount?: number;
      /** Item's list price, as quoted by the manufacturer/distributor. Optional price override. */
      readonly list_price?: number;
      /** Item's price after all discounts are applied. (The final price before tax calculation.) */
      readonly sale_price?: number;
      /** Item's list price multiplied by the quantity. */
      readonly extended_list_price?: number;
      /** Item's sale price multiplied by the quantity. */
      readonly extended_sale_price?: number;
      /** The list of selected options for this product. */
      readonly options?: readonly {
        /** The product option name. For example, Color or Size */
        readonly name?: string;
        /** The product option identifier. */
        readonly name_id?: number;
        /** The product option value. For example, Red or Medium */
        readonly value?: string;
        /** The product option value identifier. */
        readonly value_id?: number;
      }[];
    } & {
      /** URLs to download all product files. */
      readonly download_file_urls?: readonly string[];
      /** The URL for the combined downloads page. */
      readonly download_page_url?: string;
      /** Combined download size, in human-readable style. E.g.: `30MB`. */
      readonly download_size?: string;
    })[];
    readonly gift_certificates?: readonly {
      readonly id?: string;
      /** GiftCertificate-provided name that will appear in the control panel. */
      readonly name?: string;
      /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      readonly theme: string;
      /** Value must be between 1.00 and 1,000.00 in the store's default currency. */
      readonly amount: number;
      readonly is_taxable?: boolean;
      readonly sender: {
        readonly name?: string;
        readonly email?: string;
      };
      readonly recipient: {
        readonly name?: string;
        readonly email?: string;
      };
      /** Limited to 200 characters. */
      readonly message?: string;
    }[];
    readonly virtual_items?: readonly {
      /** Id of the custom item */
      readonly id?: string;
      /** Custom item sku */
      readonly sku?: string;
      /** Item name */
      readonly name?: string;
      readonly quantity?: string;
      /** Price of the item. With or without tax, depending on your store's setup. Optional price override. */
      readonly list_price?: string;
    }[];
  };
  readonly ItemGiftCertificate: {
    readonly id?: string;
    /** Provided name that will appear in the control panel. */
    readonly name?: string;
    /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
    readonly theme: string;
    /** Value must be between 1.00 and 1,000.00 in the store's default currency. */
    readonly amount: number;
    readonly is_taxable?: boolean;
    readonly sender: {
      readonly name?: string;
      readonly email?: string;
    };
    readonly recipient: {
      readonly name?: string;
      readonly email?: string;
    };
    /** Limited to 200 characters. */
    readonly message?: string;
  };
  readonly ContactEntity: {
    readonly name?: string;
    readonly email?: string;
  };
  readonly ItemDigital: {
    /** The line-item ID. */
    readonly id?: string;
    /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
    readonly variant_id: number;
    /** The id of the product. Required in a /POST request. */
    readonly product_id: number;
    /** SKU of the variant. */
    readonly sku?: string;
    /** The item's product name. */
    readonly name?: string;
    /** The product URL. */
    readonly url?: string;
    /** Quantity of this item in the cart. */
    readonly quantity: number;
    /** Whether the item is taxable. */
    readonly is_taxable?: boolean;
    /** Image of the product or variant. */
    readonly image_url?: string;
    readonly discounts?: readonly {
      /** ID of the applied discount. Will return */
      readonly id?: { readonly [key: string]: any };
      /** The discounted amount. */
      readonly discounted_amount?: number;
    }[];
    readonly coupons?: readonly {
      /** Required in a /POST request. */
      readonly coupons?: {
        /** The coupon code */
        readonly coupon_code: {
          /** Coupon Id */
          readonly id?: number;
          /** The coupon code. Required in a /POST request. */
          readonly code?: string;
          /** Name given to the coupon in the Control Panel */
          readonly name?: string;
          /**
           * The discount type.
           *
           * - type 0: per_item_discount
           * - type 1: percentage_discount
           * - type 2: per_total_discount
           * - type 3: shipping_discount
           * - type 4: free_shipping
           */
          readonly discountType?: 0 | 1 | 2 | 3 | 4;
          /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
          readonly discountAmount?: number;
          /** Returns 0 if a expiration date is not set */
          readonly expiresDate?: number;
          /** Total discount amount off cart */
          readonly totalDiscount?: number;
        };
      };
    }[];
    /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
    readonly discount_amount?: number;
    /** The total value of all coupons applied to this item. */
    readonly coupon_amount?: number;
    /** Item's list price, as quoted by the manufacturer/distributor. Optional price override. */
    readonly list_price?: number;
    /** Item's price after all discounts are applied. (The final price before tax calculation.) */
    readonly sale_price?: number;
    /** Item's list price multiplied by the quantity. */
    readonly extended_list_price?: number;
    /** Item's sale price multiplied by the quantity. */
    readonly extended_sale_price?: number;
    /** The list of selected options for this product. */
    readonly options?: readonly {
      /** The product option name. For example, Color or Size */
      readonly name?: string;
      /** The product option identifier. */
      readonly name_id?: number;
      /** The product option value. For example, Red or Medium */
      readonly value?: string;
      /** The product option value identifier. */
      readonly value_id?: number;
    }[];
  } & {
    /** URLs to download all product files. */
    readonly download_file_urls?: readonly string[];
    /** The URL for the combined downloads page. */
    readonly download_page_url?: string;
    /** Combined download size, in human-readable style. E.g.: `30MB`. */
    readonly download_size?: string;
  };
  readonly ItemPhysical: {
    /** The line-item ID. */
    readonly id?: string;
    /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
    readonly variant_id: number;
    /** The id of the product. Required in a /POST request. */
    readonly product_id: number;
    /** SKU of the variant. */
    readonly sku?: string;
    /** The item's product name. */
    readonly name?: string;
    /** The product URL. */
    readonly url?: string;
    /** Quantity of this item in the cart. */
    readonly quantity: number;
    /** Whether the item is taxable. */
    readonly is_taxable?: boolean;
    /** Image of the product or variant. */
    readonly image_url?: string;
    readonly discounts?: readonly {
      /** ID of the applied discount. Will return */
      readonly id?: { readonly [key: string]: any };
      /** The discounted amount. */
      readonly discounted_amount?: number;
    }[];
    readonly coupons?: readonly {
      /** Required in a /POST request. */
      readonly coupons?: {
        /** The coupon code */
        readonly coupon_code: {
          /** Coupon Id */
          readonly id?: number;
          /** The coupon code. Required in a /POST request. */
          readonly code?: string;
          /** Name given to the coupon in the Control Panel */
          readonly name?: string;
          /**
           * The discount type.
           *
           * - type 0: per_item_discount
           * - type 1: percentage_discount
           * - type 2: per_total_discount
           * - type 3: shipping_discount
           * - type 4: free_shipping
           */
          readonly discountType?: 0 | 1 | 2 | 3 | 4;
          /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
          readonly discountAmount?: number;
          /** Returns 0 if a expiration date is not set */
          readonly expiresDate?: number;
          /** Total discount amount off cart */
          readonly totalDiscount?: number;
        };
      };
    }[];
    /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
    readonly discount_amount?: number;
    /** The total value of all coupons applied to this item. */
    readonly coupon_amount?: number;
    /** Item's list price, as quoted by the manufacturer/distributor. Optional price override. */
    readonly list_price?: number;
    /** Item's price after all discounts are applied. (The final price before tax calculation.) */
    readonly sale_price?: number;
    /** Item's list price multiplied by the quantity. */
    readonly extended_list_price?: number;
    /** Item's sale price multiplied by the quantity. */
    readonly extended_sale_price?: number;
    /** The list of selected options for this product. */
    readonly options?: readonly {
      /** The product option name. For example, Color or Size */
      readonly name?: string;
      /** The product option identifier. */
      readonly name_id?: number;
      /** The product option value. For example, Red or Medium */
      readonly value?: string;
      /** The product option value identifier. */
      readonly value_id?: number;
    }[];
  } & {
    readonly is_require_shipping?: boolean;
    readonly gift_wrapping?: {
      readonly name?: string;
      readonly message?: string;
      readonly amount?: number;
    };
  };
  readonly BaseItem: {
    /** The line-item ID. */
    readonly id?: string;
    /** The id of the variant. Required in the /PUT or /POST if the product has variants. */
    readonly variant_id: number;
    /** The id of the product. Required in a /POST request. */
    readonly product_id: number;
    /** SKU of the variant. */
    readonly sku?: string;
    /** The item's product name. */
    readonly name?: string;
    /** The product URL. */
    readonly url?: string;
    /** Quantity of this item in the cart. */
    readonly quantity: number;
    /** Whether the item is taxable. */
    readonly is_taxable?: boolean;
    /** Image of the product or variant. */
    readonly image_url?: string;
    readonly discounts?: readonly {
      /** ID of the applied discount. Will return */
      readonly id?: { readonly [key: string]: any };
      /** The discounted amount. */
      readonly discounted_amount?: number;
    }[];
    readonly coupons?: readonly {
      /** Required in a /POST request. */
      readonly coupons?: {
        /** The coupon code */
        readonly coupon_code: {
          /** Coupon Id */
          readonly id?: number;
          /** The coupon code. Required in a /POST request. */
          readonly code?: string;
          /** Name given to the coupon in the Control Panel */
          readonly name?: string;
          /**
           * The discount type.
           *
           * - type 0: per_item_discount
           * - type 1: percentage_discount
           * - type 2: per_total_discount
           * - type 3: shipping_discount
           * - type 4: free_shipping
           */
          readonly discountType?: 0 | 1 | 2 | 3 | 4;
          /** The amount of the discount based on the coupon. For example, 3 percent off will show a 3. */
          readonly discountAmount?: number;
          /** Returns 0 if a expiration date is not set */
          readonly expiresDate?: number;
          /** Total discount amount off cart */
          readonly totalDiscount?: number;
        };
      };
    }[];
    /** The total value of all discounts applied to this item. This includes coupons and cart level discounts */
    readonly discount_amount?: number;
    /** The total value of all coupons applied to this item. */
    readonly coupon_amount?: number;
    /** Item's list price, as quoted by the manufacturer/distributor. */
    readonly list_price?: number;
    /** Item's price after all discounts are applied. (The final price before tax calculation.) */
    readonly sale_price?: number;
    /** Item's list price multiplied by the quantity. */
    readonly extended_list_price?: number;
    /** Item's sale price multiplied by the quantity. */
    readonly extended_sale_price?: number;
    /** The list of selected options for this product. */
    readonly options?: readonly {
      /** The product option name. For example, Color or Size */
      readonly name?: string;
      /** The product option identifier. */
      readonly name_id?: number;
      /** The product option value. For example, Red or Medium */
      readonly value?: string;
      /** The product option value identifier. */
      readonly value_id?: number;
    }[];
  };
  readonly ProductOption: {
    /** The product option name. For example, Color or Size */
    readonly name?: string;
    /** The product option identifier. */
    readonly name_id?: number;
    /** The product option value. For example, Red or Medium */
    readonly value?: string;
    /** The product option value identifier. */
    readonly value_id?: number;
  };
  /**
   * |Type `int`|Type Name|
   * |-|-|
   * |`0`|`per_item_discount`|
   * |`1`|`percentage_discount`|
   * |`2`|`per_total_discount`|
   * |`3`|`shipping_discount`|
   * |`4`|`free_shipping`|
   * |`5`|`promotion`|
   */
  readonly AppliedCoupon: {
    /** the coupon code */
    readonly code: string;
    /** The coupon ID. Read Only */
    readonly id?: string;
    /**
     * Key name to identify the type of coupon.
     *
     * type 0: per_item_discount
     * type 1: percentage_discount
     * type 2: per_total_discount
     * type 3: shipping_discount
     * type 4: free_shipping
     * type 5: promotion
     */
    readonly coupon_type?: string;
    /** The discounted amount applied within a given context. */
    readonly discounted_amount?: number;
  };
  readonly AppliedDiscount: {
    /** ID of the applied discount. Will return */
    readonly id?: { readonly [key: string]: any };
    /** The discounted amount. */
    readonly discounted_amount?: number;
  };
  readonly GiftWrapping: {
    readonly name?: string;
    readonly message?: string;
    readonly amount?: number;
  };
  /**
   * Add a custom item to the shoppers cart.
   *
   * * Custom items are not added to the catalog.
   * * The price should be set to match the store settings for taxes.
   */
  readonly ItemCustom: {
    /** Id of the custom item */
    readonly id?: string;
    /** Custom item sku */
    readonly sku?: string;
    /** Item name */
    readonly name?: string;
    readonly quantity?: string;
    /** Price of the item. With or without tax, depending on your store's setup. */
    readonly list_price?: string;
  };
  readonly cart_PostVariant: readonly {
    readonly quantity: number;
    readonly product_id: number;
    /** Optional price override */
    readonly list_price?: number;
    /** Exists only in Catalog V3 */
    readonly variant_id?: number;
    /** Optionally, provide a value to override the product name */
    readonly name?: string;
  }[];
  readonly cart_PostModifier: readonly {
    readonly quantity: number;
    readonly product_id: number;
    /** Optional price override */
    readonly list_price?: number;
    /** Optionally, provide a value to override the product name */
    readonly name?: string;
    /** Needed for Catalog V2 */
    readonly option_selections?: readonly {
      readonly option_id?: number;
      readonly option_value?: string;
      /** Override selected Option or Modifier Name */
      readonly name?: string;
      /** Override selected Option Value */
      readonly value?: string;
      readonly name_id?: number;
      readonly value_id?: number;
    }[];
  }[];
  readonly Cart_Line_Item_Update_Post: {
    readonly line_items?:
      | definitions["cart_PostVariant"]
      | definitions["cart_PostModifier"];
    readonly gift_certificates?: readonly {
      /** Given name for gift certificate line item. */
      readonly name: string;
      /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      readonly theme: string;
      readonly amount: number;
      readonly quantity: number;
      readonly sender: {
        readonly name?: string;
        readonly email?: string;
      };
      readonly recipient: {
        readonly name?: string;
        readonly email?: string;
      };
      /** Message shown to recipient, as provided by sender. */
      readonly message?: string;
    }[];
    readonly custom_items?: definitions["cart_PostCustomItem"];
  };
  readonly cart_PostCustomItem: readonly {
    readonly sku?: string;
    readonly name?: string;
    readonly quantity?: number;
    readonly list_price?: number;
  }[];
}

export interface parameters {
  readonly Accept: string;
  readonly "Content-Type": string;
  /**
   * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
   * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
   * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
   */
  readonly line_items: readonly (
    | "redirect_urls"
    | "line_items.physical_items.options"
    | "line_items.digital_items.options"
  )[];
}

export interface responses {
  readonly CartResponse: {
    readonly schema: {
      readonly data?: definitions["Cart_Full"];
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly CartRedirectResponse: {
    readonly schema: {
      readonly data?: {
        readonly cart_url?: string;
        readonly checkout_url?: string;
      };
      readonly meta?: { readonly [key: string]: any };
    };
  };
}

export interface operations {
  /**
   * Creates a **Cart**.
   *
   * **Required Fields**
   *
   * |Field|Details|
   * |-|-|
   * |`line_items`||
   * |`custom_items`|Only required if adding a custom item to the cart.|
   * |`gift_certificates`|Only required if adding a gift certificate to the cart.|
   *
   * **Usage Notes**
   *
   * * A **cart** `id` (UUID) is returned in the response.
   * * A **cart** `id` is the same as a **checkout** `id`.
   * * A cart can be created by adding an existing **catalog item** or a **custom item**.
   * * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart).
   * * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   * * The format and data type of a cart's `option_value` is defined by the `value_data` object of a product’s [variant option value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-option-values/getoptionvaluebyid), [modifier value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-modifier-values/getmodifiervaluebyid), or a combination of both.
   * * Redirect URLs can only be generated from carts created using the **Server-to-Server Carts API**.
   * * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`.
   * * To restore a cart that was created by a shopper or via the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
   */
  readonly createACart: {
    readonly parameters: {
      readonly body: {
        /**
         * **Examples:**
         *
         * 1. Creating a cart by adding a simple product (a product without option selections).
         * 2. Creating a cart with a variant. This works when a product can be specified purely by a variant, without any other required options.
         * 3. Creating a cart using a date option. The API supports timestamps, “option_value”: 1743570000, and dates as an object literal, “option_value”: {“day”:”01”, “month”:”02”, “year”:”2020”}.
         * 4. Creating a cart with a variant, a checkbox, and a picklist modifier added.
         * 5. Creating a cart using a custom item.
         */
        readonly cartData: definitions["CartCreatePostData"];
      };
      readonly query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         */
        readonly include?: readonly (
          | "redirect_urls"
          | "line_items.physical_items.options"
          | "line_items.digital_items.options"
        )[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 201: responses["CartResponse"];
    };
  };
  /**
   * Adds line items to the *Cart*.
   *
   * **Usage Notes**
   *
   * To add a custom item use `custom_items`.
   *
   * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   */
  readonly addCartLineItem: {
    readonly parameters: {
      readonly path: {
        readonly cartId: string;
      };
      readonly body: {
        readonly ItemData: definitions["Cart_Line_Item_Update_Post"];
      };
      readonly query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         */
        readonly include?: readonly (
          | "redirect_urls"
          | "line_items.physical_items.options"
          | "line_items.digital_items.options"
        )[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 201: responses["CartResponse"];
    };
  };
  /**
   * Creates a **Cart** redirect URL for redirecting a shopper to an already created cart using the `cartId`.
   *
   * **Usage Notes**
   *
   * * Redirect URLs can also be created via **Create a Cart** requests by appending `include=redirect_urls`.
   * * A **Carts** redirect URLs may only be used once.
   * * Once a redirect URL has been visited, it will be invalidated and cannot be used again.
   * * If your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.
   * * Redirect URLs can be generated only from carts created using the Server to Server Cart API.
   * * To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
   */
  readonly createCartRedirectURL: {
    readonly parameters: {
      readonly path: {
        readonly cartId: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 201: responses["CartRedirectResponse"];
    };
  };
  /**
   * Updates an existing, single line item in the *Cart*.
   *
   * **Notes**
   *
   * Currently, only updating `list_price` and `quantity` are supported. Updating a product's `list_price` will make that item ineligible for V3 product level promotions.
   *
   * If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   *
   * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.
   *
   * `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.
   *
   * Deleting all line items from the cart will invalidate the cart.
   */
  readonly updateCartLineItem: {
    readonly parameters: {
      readonly path: {
        readonly cartId: string;
        readonly itemId: string;
      };
      readonly body: {
        readonly lineItem: definitions["Cart_Line_Item_Update_Post"];
      };
      readonly query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         */
        readonly include?: readonly (
          | "redirect_urls"
          | "line_items.physical_items.options"
          | "line_items.digital_items.options"
        )[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["CartResponse"];
    };
  };
  /**
   * Deletes a *Cart* line item.
   *
   * **Notes**
   *
   * Removing the last `line_item` in the *Cart* deletes the *Cart*.
   */
  readonly deleteCartLineItem: {
    readonly parameters: {
      readonly path: {
        readonly cartId: string;
        readonly itemId: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         */
        readonly include?: readonly (
          | "redirect_urls"
          | "line_items.physical_items.options"
          | "line_items.digital_items.options"
        )[];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["Cart_Full"];
      };
      /** If the action's result is an empty cart, the cart gets automatically deleted. */
      readonly 204: never;
    };
  };
  /** Returns a stores *Cart*. */
  readonly getACart: {
    readonly parameters: {
      readonly path: {
        /** The identifier of a specific cart. */
        readonly cartId: string;
      };
      readonly query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         */
        readonly include?: readonly (
          | "redirect_urls"
          | "line_items.physical_items.options"
          | "line_items.digital_items.options"
        )[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["CartResponse"];
      /** Cart not found. */
      readonly 404: unknown;
    };
  };
  /**
   * Updates a *Carts* `customer_id`.
   *
   * **Notes**
   *
   * Changing the *Cart* `customer_id` will remove any promotions or shipping on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups.
   */
  readonly updateACart: {
    readonly parameters: {
      readonly path: {
        readonly cartId: string;
      };
      readonly body: {
        readonly CartUpdateData: definitions["CartUpdatePutRequestData"];
      };
      readonly query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         */
        readonly include?: readonly (
          | "redirect_urls"
          | "line_items.physical_items.options"
          | "line_items.digital_items.options"
        )[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 201: responses["CartResponse"];
    };
  };
  /** Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered. */
  readonly deleteACart: {
    readonly parameters: {
      readonly path: {
        /** This cart's unique ID. */
        readonly cartId: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
}
