/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/catalog/products": {
    /** Returns a list of **Products**. Optional filter parameters can be passed in. */
    readonly get: operations["getProducts"];
    /**
     * Updates products in batches. At the time of writing, batches are limited to 10 products.
     *
     * **Required Fields**
     * * `id` - product `id` is required for batch updates to products.
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     */
    readonly put: operations["updateProducts"];
    /**
     * Creates a *Product*. Only one product can be created at a time.
     *
     * **Required Fields:**
     * - `name`
     * - `type`
     * - `weight`
     * - `price`
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     *
     * **Usage Notes**
     * * `POST` requests to `/products` accepts a single `video` object; to send an array of video objects, see: `/products/{product_id}/videos`.
     */
    readonly post: operations["createProduct"];
    /**
     * To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
     *
     * **Example**:
     * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
     */
    readonly delete: operations["deleteProducts"];
  };
  readonly "/catalog/products/{product_id}": {
    /** Returns a single *Product*. Optional parameters can be passed in. */
    readonly get: operations["getProductById"];
    /**
     * Updates a *Product*.
     *
     * **Read-Only Fields**
     * - id
     * - date_created
     * - date_modified
     * - calculated_price
     * - base_variant_id
     */
    readonly put: operations["updateProduct"];
    /** Deletes a *Product*. */
    readonly delete: operations["deleteProductById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/images": {
    /** Returns a list of *Product Images*. Optional parameters can be passed in. */
    readonly get: operations["getProductImages"];
    /**
     * Creates a *Product Image*.
     *
     *  **Required Fields**
     * - `image_file`, or
     * - `image_url`
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, use the `multipart/form-data` media type
     * - Only one image at a time can be created
     * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
     */
    readonly post: operations["createProductImage"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/images/{image_id}": {
    /** Returns a single *Product Image*. Optional parameters can be passed in. */
    readonly get: operations["getProductImageById"];
    /**
     * Updates a *Product Image*.
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, send a POST request using the `multipart/form-data` media type
     */
    readonly put: operations["updateProductImage"];
    /** Deletes a *Product Image*. */
    readonly delete: operations["deleteProductImage"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Image` that is being operated on. */
        readonly image_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/videos": {
    /** Returns a list of *Product Videos*. Optional parameters can be passed in. */
    readonly get: operations["getProductVideos"];
    /**
     * Creates a *Product Video*.
     *
     * **Required Fields**
     * * video_id - Example: https://www.youtube.com/watch?v=`R12345677`
     *
     * **Read-Only Fields**
     * * id
     *
     * Publicly accessible URLs are valid parameters.
     * Videos must be loaded through YouTube at this time.
     */
    readonly post: operations["createProductVideo"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/videos/{id}": {
    /** Returns a single *Product Video*. Optional parameters can be passed in. */
    readonly get: operations["getProductVideoById"];
    /**
     * Updates a *Product Video.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    readonly put: operations["updateProductVideo"];
    /** Deletes a *Product Video*. */
    readonly delete: operations["deleteProductVideo"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The BigCommerce ID of the `Video` */
        readonly id: parameters["VideoIdParam"];
      };
    };
  };
  readonly "/catalog/products/{product_id}/variants": {
    /** Returns a list of product *Variants*. Optional parameters can be passed in. */
    readonly get: operations["getVariantsByProductId"];
    /**
     * Creates a *Product Variant*.
     *
     * **Required Fields**
     * * sku
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * Variants need to be created one at a time using this endpoint. To use a variant array and create products and variants in the same call use the [Create Products](/api-reference/catalog/catalog-api/products/createproduct) during the initial product creation.
     */
    readonly post: operations["createVariant"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/variants/{variant_id}": {
    /** Returns a single product *Variant*. Optional parameters can be passed in. */
    readonly get: operations["getVariantById"];
    /** Updates a product *Variant*. */
    readonly put: operations["updateVariant"];
    /** Deletes a product *Variant*. */
    readonly delete: operations["deleteVariantById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/variants/{variant_id}/metafields": {
    /** Returns a list of product variant *Metafields*. Optional parameters can be passed in. */
    readonly get: operations["getVariantMetafieldsByProductIdAndVariantId"];
    /**
     * Creates a product variant *Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Read-Only Fields**
     * * id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    readonly post: operations["createVariantMetafield"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}": {
    /** Returns a single product variant *Metafield*. Optional parameters can be passed in. */
    readonly get: operations["getVariantMetafieldByProductIdAndVariantId"];
    /**
     * Updates a product variant *Metafield*.
     *
     * **Required Fields:**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    readonly put: operations["updateVariantMetafield"];
    /** Deletes a product variant *Metafield*. */
    readonly delete: operations["deleteVariantMetafieldById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/variants/{variant_id}/image": {
    /**
     * Creates a *Variant Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts. Files larger than 1 MB are not accepted
     * - image_url: Any publicly available URL
     */
    readonly post: operations["createVariantImage"];
  };
  readonly "/catalog/products/{product_id}/options": {
    /** Returns a list of product *Variant Options*. Optional parameters can be passed in. */
    readonly get: operations["getOptions"];
    /**
     * Creates a *Variant Option*.
     *
     * **Required Fields**
     * * display_name
     * * type
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * **Notes**
     *
     * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
     * * There are several examples listed below that create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
     * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
     * * If more than one variant needs to be created use the [Create a Product](/api-reference/catalog/catalog-api/products/createproduct) endpoint.
     */
    readonly post: operations["createOption"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/options/{option_id}": {
    /** Returns a single *Variant Option*. Optional parameters can be passed in. */
    readonly get: operations["getOptionById"];
    /**
     * Updates a *Variant Option*.
     *
     * **Read-Only Fields**
     * * id
     */
    readonly put: operations["updateOption"];
    /** Deletes a *Variant Option*. */
    readonly delete: operations["deleteOptionById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/options/{option_id}/values": {
    /** Returns a list of all *Variant Option Values*. Optional parameters can be passed in. */
    readonly get: operations["getOptionValues"];
    /**
     * Creates a *Variant Option Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     */
    readonly post: operations["createOptionValue"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/options/{option_id}/values/{value_id}": {
    /** Returns a single *Variant Option Value*. Optional parameters can be passed in. */
    readonly get: operations["getOptionValueById"];
    /**
     * Updates a *Variant Option Value*.
     *
     * **Read-Only Fields**
     * * id
     */
    readonly put: operations["updateOptionValue"];
    /** Deletes a *Variant Option Value*. */
    readonly delete: operations["deleteOptionValueById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/modifiers": {
    /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
    readonly get: operations["getModifiers"];
    /**
     * Creates a *Product Modifier*.
     *
     * **Required Fields**
     * * `required`
     * * `display_name`
     * * `type`
     *
     * **Read-Only Fields**
     * * `id`
     */
    readonly post: operations["createModifier"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/modifiers/{modifier_id}": {
    /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
    readonly get: operations["getModifierById"];
    /** Updates a *Product Modifier*. */
    readonly put: operations["updateModifier"];
    /** Deletes a *Product Modifier*. */
    readonly delete: operations["deleteModifierById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/modifiers/{modifier_id}/values": {
    /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
    readonly get: operations["getModifierValues"];
    /**
     * Creates a *Modifier Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     */
    readonly post: operations["createModifierValue"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}": {
    /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
    readonly get: operations["getModifierValueById"];
    /**
     * Updates a *Modifier Value*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    readonly put: operations["updateModifierValue"];
    /** Deletes a *Modifier Value*. */
    readonly delete: operations["deleteModifierValueById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image": {
    /**
     * Creates a *Modifier Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     */
    readonly post: operations["createModifierImage"];
    /**
     * Deletes a *Modifier Image*.
     *
     * Deletes the image that was set to show when the modifier value is selected.
     */
    readonly delete: operations["deleteModifierImage"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier`. */
        readonly value_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/complex-rules": {
    /** Returns a list of all product *Complex Rules*. Optional parameters may be passed in. */
    readonly get: operations["getComplexRules"];
    /**
     * Creates a product *Complex Rule*.
     *
     * **Required Fields**
     * - modifier_id
     * - modifier_value_id
     * - modifier_value_id
     * - variant_id
     *
     * **Read-Only Fields**
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    readonly post: operations["createComplexRule"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/complex-rules/{complex_rule_id}": {
    /** Returns a single *Complex Rule*. Optional parameters can be passed in. */
    readonly get: operations["getComplexRuleById"];
    /**
     * Updates a *Complex Rule*.
     *
     * **Required Fields**:
     * - none
     *
     * **Read-Only Fields**:
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    readonly put: operations["updateComplexRule"];
    /** Deletes a product *Complex Rule*. */
    readonly delete: operations["deleteComplexRuleById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `ComplexRule`. */
        readonly complex_rule_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/custom-fields": {
    /** Returns a list of product *Custom Fields*. Optional parameters can be passed in. */
    readonly get: operations["getCustomFields"];
    /**
     * Creates a *Custom Field*.
     *
     * **Required Fields:**
     * - name
     * - value
     *
     * **Read-Only:**
     * - id
     */
    readonly post: operations["createCustomField"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/custom-fields/{custom_field_id}": {
    /** Returns a single *Custom Field*. Optional parameters can be passed in. */
    readonly get: operations["getCustomFieldById"];
    /**
     * Updates a *Custom Field*.
     *
     * **Required Fields**
     * - none
     *
     * **Read-Only**
     * - id
     */
    readonly put: operations["updateCustomField"];
    /** Deletes a product *Custom Field*. */
    readonly delete: operations["deleteCustomFieldById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `CustomField`. */
        readonly custom_field_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/bulk-pricing-rules": {
    /** Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in. */
    readonly get: operations["getBulkPricingRules"];
    /**
     * Creates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * - quantity_min
     * - quantity_max
     * - type
     * - amount
     *
     * **Read-Only Fields**
     * - id
     */
    readonly post: operations["createBulkPricingRule"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}": {
    /** Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in. */
    readonly get: operations["getBulkPricingRuleById"];
    /**
     * Updates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    readonly put: operations["updateBulkPricingRule"];
    /** Deletes a *Bulk Pricing Rule*. */
    readonly delete: operations["deleteBulkPricingRuleById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `BulkPricingRule`. */
        readonly bulk_pricing_rule_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/metafields": {
    /** Returns a list of *Product Metafields*. Optional parameters can be passed in. */
    readonly get: operations["getProductMetafieldsByProductId"];
    /**
     * Creates a *Product Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Read-Only Fields**
     * * id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    readonly post: operations["createProductMetafield"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/metafields/{metafield_id}": {
    /** Returns a single *Product Metafield*. Optional parameters can be passed in. */
    readonly get: operations["getProductMetafieldByProductId"];
    /**
     * Updates a *Product Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    readonly put: operations["updateProductMetafield"];
    /** Deletes a *Product Metafield*. */
    readonly delete: operations["deleteProductMetafieldById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/reviews": {
    /** Returns a list of all *Product Reviews*. Optional parameters can be passed in. */
    readonly get: operations["getProductReviews"];
    /**
     * Creates a *Product Review*.
     *
     * **Required Fields**
     * - title
     * - date_reviewed
     *
     * **Read-Only Fields**
     * * id
     */
    readonly post: operations["createProductReview"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
    };
  };
  readonly "/catalog/products/{product_id}/reviews/{review_id}": {
    /** Returns a single *Product Review*. Optional parameters maybe passed in. */
    readonly get: operations["getProductReviewById"];
    /**
     * Updates a *Product Review*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    readonly put: operations["updateProductReview"];
    /** Deletes a *Product Review*. */
    readonly delete: operations["deleteProductReview"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `review` that is being operated on. */
        readonly review_id: number;
      };
    };
  };
  readonly "/catalog/categories": {
    /** Returns a list of *Categories*. Optional filter parameters can be passed in. */
    readonly get: operations["getCategories"];
    /**
     * Creates a *Category*.
     *
     * **Required Fields**:
     * - parent_id:
     * 	- To create a child category, set the parent_id to the parent category.
     * 	- To create a top level category, set the parent_id to 0.
     * - name
     *
     * **Read-Only Fields**:
     * - id
     */
    readonly post: operations["createCategory"];
    /**
     * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
     *
     * **Usage Notes**
     *
     * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
     * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` requst to the `/catalog/products/{product_id}` endpoint before deleting a category.
     */
    readonly delete: operations["deleteCategories"];
  };
  readonly "/catalog/categories/{category_id}": {
    /** Returns a single *Category*. Optional parameters can be passed in. */
    readonly get: operations["getCategoryById"];
    /**
     * Updates a *Category*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    readonly put: operations["updateCategory"];
    /** Deletes a *Category*. */
    readonly delete: operations["deleteCategoryById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
    };
  };
  readonly "/catalog/categories/{category_id}/metafields": {
    /** Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in. */
    readonly get: operations["getCategoryMetafieldsByCategoryId"];
    /**
     * Creates a *Category Metafield*.
     *
     * **Required Fields:**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    readonly post: operations["createCategoryMetafield"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
    };
  };
  readonly "/catalog/categories/{category_id}/metafields/{metafield_id}": {
    /** Returns a single *Category Metafield*. Optional parameters can be passed in. */
    readonly get: operations["getCategoryMetafieldByCategoryId"];
    /**
     * Updates a *Category Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    readonly put: operations["updateCategoryMetafield"];
    /** Deletes a *Category Metafield*. */
    readonly delete: operations["deleteCategoryMetafieldById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
    };
  };
  readonly "/catalog/categories/{category_id}/image": {
    /**
     * Create a *Category Image*.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * Only one image at a time can be created.
     * Limit image size to 1MB.
     * To update a *Category Image*, use the [PUT Categories](/api-reference/catalog/catalog-api/category/updatecategory) and an `image_url`.
     */
    readonly post: operations["createCategoryImage"];
    /** Deletes a *Cateogory Image*. */
    readonly delete: operations["deleteCategoryImage"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
    };
  };
  readonly "/catalog/categories/tree": {
    /** Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API. */
    readonly get: operations["getCategoryTree"];
  };
  readonly "/catalog/brands": {
    /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
    readonly get: operations["getBrands"];
    /**
     * Creates a *Brand*.
     *
     * **Required Fields**
     * - name
     *
     * **Read-Only Fields**
     * - id
     */
    readonly post: operations["createBrand"];
    /** By default, it deletes all *Brand* objects. A filter should be added to avoid deleting all *Brand* objects in a store. */
    readonly delete: operations["deleteBrands"];
  };
  readonly "/catalog/brands/{brand_id}": {
    /** Returns a single *Brand*. Optional filter parameters can be passed in. */
    readonly get: operations["getBrandById"];
    /**
     * Updates a *Brand*.
     *
     * **Required Fields**
     * - None
     *
     * **Read-Only Fields**
     * - id
     *
     * To update a *Brand Image*, send a request with an `image_url`.
     */
    readonly put: operations["updateBrand"];
    /** Deletes a *Brand*. */
    readonly delete: operations["deleteBrandById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
    };
  };
  readonly "/catalog/brands/{brand_id}/metafields": {
    /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
    readonly get: operations["getBrandMetafieldsByBrandId"];
    /**
     * Creates a *Brand Metafield*.
     *
     * **Required Fields**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    readonly post: operations["createBrandMetafield"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
    };
  };
  readonly "/catalog/brands/{brand_id}/metafields/{metafield_id}": {
    /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
    readonly get: operations["getBrandMetafieldByBrandId"];
    /**
     * Updates a *Brand Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     * * The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    readonly put: operations["updateBrandMetafield"];
    /** Deletes a *Brand Metafield*. */
    readonly delete: operations["deleteBrandMetafieldById"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
    };
  };
  readonly "/catalog/brands/{brand_id}/image": {
    /**
     * Creates a *Brand Image*.
     *
     * **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * **Read-Only Fields**
     * - id
     *
     * Only one image at a time can be created. To update a *Brand Image*, use the [PUT Brands](/api-reference/catalog/catalog-api/brands/updatebrand) and an `image_url`.
     */
    readonly post: operations["createBrandImage"];
    /** Deletes a *Brand Image*. */
    readonly delete: operations["deleteBrandImage"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
    };
  };
  readonly "/catalog/variants": {
    /** Returns a list of all variants in your catalog. Optional parameters can be passed in. */
    readonly get: operations["getVariants"];
    /** Creates or updates a batch of `Variant` objects. At the time of writing, the current limit is `50` variants. This limit is subject to change. */
    readonly put: operations["updateVariantsBatch"];
  };
  readonly "/catalog/summary": {
    /**
     * Returns a lightweight inventory summary from the BigCommerce Catalog.
     *
     * The inventory summary includes:
     * * "inventory_count"
     * * "variant_count"
     * * "inventory_value"
     * * "highest_variant_price"
     * * "average_variant_price"
     * * "lowest_variant_price"
     * * "oldest_variant_date"
     * * "newest_variant_date"
     * * "primary_category_id"
     * * "primary_category_name"
     */
    readonly get: operations["getCatalogSummary"];
  };
}

export interface definitions {
  /** Common Modifier properties. */
  readonly productModifier_Base: {
    /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
    readonly type:
      | "date"
      | "checkbox"
      | "file"
      | "text"
      | "multi_line_text"
      | "numbers_only_text"
      | "radio_buttons"
      | "rectangles"
      | "dropdown"
      | "product_list"
      | "product_list_with_images"
      | "swatch";
    /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
    readonly required: boolean;
    /** The order the modifiers display on the product detail page. */
    readonly sort_order?: number;
    readonly config?: definitions["config_Full"];
    /** The name of the option shown on the storefront. */
    readonly display_name?: string;
  };
  /** Product Modifier */
  readonly productModifier_Full: definitions["productModifier_Base"] & {
    /** The unique numeric ID of the modifier; increments sequentially. */
    readonly id?: number;
    /** The unique numeric ID of the product to which the option belongs. */
    readonly product_id?: number;
    /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
    readonly name?: string;
    readonly option_values?: readonly definitions["productModifierOptionValue_Full"][];
  };
  /** The model for a POST to create a modifier on a product. */
  readonly productModifier_Post: {
    /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
    readonly type:
      | "date"
      | "checkbox"
      | "file"
      | "text"
      | "multi_line_text"
      | "numbers_only_text"
      | "radio_buttons"
      | "rectangles"
      | "dropdown"
      | "product_list"
      | "product_list_with_images"
      | "swatch";
    /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
    readonly required: boolean;
    /** The order the modifiers display on the product detail page. */
    readonly sort_order?: number;
    /** The values for option config can vary based on the Modifier created. */
    readonly config?: {
      /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      readonly default_value?: string;
      /** (checkbox) Flag for setting the checkbox to be checked by default. */
      readonly checked_by_default?: boolean;
      /** (checkbox) Label displayed for the checkbox option. */
      readonly checkbox_label?: string;
      /** (date) Flag to limit the dates allowed to be entered on a date option. */
      readonly date_limited?: boolean;
      /** (date) The type of limit that is allowed to be entered on a date option. */
      readonly date_limit_mode?: "earliest" | "range" | "latest";
      /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_earliest_value?: string;
      /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_latest_value?: string;
      /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
      readonly file_types_mode?: "specific" | "all";
      /**
       * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      readonly file_types_supported?: readonly string[];
      /** (file) A list of other file types allowed with the file upload option. */
      readonly file_types_other?: readonly string[];
      /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
      readonly file_max_size?: number;
      /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      readonly text_characters_limited?: boolean;
      /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
      readonly text_min_length?: number;
      /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
      readonly text_max_length?: number;
      /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
      readonly text_lines_limited?: boolean;
      /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
      readonly text_max_lines?: number;
      /** (numbers_only_text) Flag to limit the value of a number option. */
      readonly number_limited?: boolean;
      /** (numbers_only_text) The type of limit on values entered for a number option. */
      readonly number_limit_mode?: "lowest" | "highest" | "range";
      /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
      readonly number_lowest_value?: number;
      /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      readonly number_highest_value?: number;
      /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
      readonly number_integers_only?: boolean;
      /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      readonly product_list_adjusts_inventory?: boolean;
      /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      readonly product_list_adjusts_pricing?: boolean;
      /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
      readonly product_list_shipping_calc?: "none" | "weight" | "package";
    };
    readonly option_values?: readonly (({
      /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      readonly is_default?: boolean;
      /** The text display identifying the value on the storefront. Required in a /POST. */
      readonly label: string;
      /** The order in which the value will be displayed on the product page. Required in a /POST. */
      readonly sort_order: number;
      /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      readonly value_data?: { readonly [key: string]: any };
    } & {
      readonly adjusters?: {
        /** Adjuster for Complex Rules. */
        readonly price?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        /** Adjuster for Complex Rules. */
        readonly weight?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
        readonly image_url?: string;
        readonly purchasing_disabled?: {
          /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
          readonly status?: boolean;
          /** The message displayed on the storefront when the purchasing disabled status is `true`. */
          readonly message?: string;
        };
      };
    }) & {
      /** The unique numeric ID of the value; increments sequentially. */
      readonly id?: number;
    })[];
  } & {
    /** The name of the option shown on the storefront. */
    readonly display_name: string;
  };
  /** The model for a PUT to update a modifier on a product. */
  readonly productModifier_Put: {
    /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
    readonly type:
      | "date"
      | "checkbox"
      | "file"
      | "text"
      | "multi_line_text"
      | "numbers_only_text"
      | "radio_buttons"
      | "rectangles"
      | "dropdown"
      | "product_list"
      | "product_list_with_images"
      | "swatch";
    /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
    readonly required: boolean;
    /** The order the modifiers display on the product detail page. */
    readonly sort_order?: number;
    /** The values for option config can vary based on the Modifier created. */
    readonly config?: {
      /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      readonly default_value?: string;
      /** (checkbox) Flag for setting the checkbox to be checked by default. */
      readonly checked_by_default?: boolean;
      /** (checkbox) Label displayed for the checkbox option. */
      readonly checkbox_label?: string;
      /** (date) Flag to limit the dates allowed to be entered on a date option. */
      readonly date_limited?: boolean;
      /** (date) The type of limit that is allowed to be entered on a date option. */
      readonly date_limit_mode?: "earliest" | "range" | "latest";
      /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_earliest_value?: string;
      /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_latest_value?: string;
      /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
      readonly file_types_mode?: "specific" | "all";
      /**
       * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      readonly file_types_supported?: readonly string[];
      /** (file) A list of other file types allowed with the file upload option. */
      readonly file_types_other?: readonly string[];
      /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
      readonly file_max_size?: number;
      /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      readonly text_characters_limited?: boolean;
      /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
      readonly text_min_length?: number;
      /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
      readonly text_max_length?: number;
      /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
      readonly text_lines_limited?: boolean;
      /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
      readonly text_max_lines?: number;
      /** (numbers_only_text) Flag to limit the value of a number option. */
      readonly number_limited?: boolean;
      /** (numbers_only_text) The type of limit on values entered for a number option. */
      readonly number_limit_mode?: "lowest" | "highest" | "range";
      /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
      readonly number_lowest_value?: number;
      /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      readonly number_highest_value?: number;
      /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
      readonly number_integers_only?: boolean;
      /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      readonly product_list_adjusts_inventory?: boolean;
      /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      readonly product_list_adjusts_pricing?: boolean;
      /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
      readonly product_list_shipping_calc?: "none" | "weight" | "package";
    };
    readonly option_values?: readonly (({
      /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      readonly is_default?: boolean;
      /** The text display identifying the value on the storefront. Required in a /POST. */
      readonly label: string;
      /** The order in which the value will be displayed on the product page. Required in a /POST. */
      readonly sort_order: number;
      /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      readonly value_data?: { readonly [key: string]: any };
    } & {
      readonly adjusters?: {
        /** Adjuster for Complex Rules. */
        readonly price?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        /** Adjuster for Complex Rules. */
        readonly weight?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
        readonly image_url?: string;
        readonly purchasing_disabled?: {
          /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
          readonly status?: boolean;
          /** The message displayed on the storefront when the purchasing disabled status is `true`. */
          readonly message?: string;
        };
      };
    }) & {
      /** The unique numeric ID of the value; increments sequentially. */
      readonly id?: number;
    })[];
  };
  /** Common Product Modifer `option_value` properties. */
  readonly productModifierOptionValue_Base: {
    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
    readonly is_default?: boolean;
    /** The text display identifying the value on the storefront. Required in a /POST. */
    readonly label: string;
    /** The order in which the value will be displayed on the product page. Required in a /POST. */
    readonly sort_order: number;
    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
    readonly value_data?: { readonly [key: string]: any };
    readonly adjusters?: definitions["adjusters_Full"];
  };
  /** Product Modifer `option_value`. */
  readonly productModifierOptionValue_Full: definitions["productModifierOptionValue_Base"] & {
    /** The unique numeric ID of the value; increments sequentially. */
    readonly id?: number;
    readonly option_id?: number;
  };
  /** The model for a POST to create a modifier value on a product. */
  readonly productModifierOptionValue_Post: {
    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
    readonly is_default?: boolean;
    /** The text display identifying the value on the storefront. Required in a /POST. */
    readonly label: string;
    /** The order in which the value will be displayed on the product page. Required in a /POST. */
    readonly sort_order: number;
    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
    readonly value_data?: { readonly [key: string]: any };
  } & {
    readonly adjusters?: {
      /** Adjuster for Complex Rules. */
      readonly price?: {
        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster?: "relative" | "percentage";
        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster_value?: number;
      };
      /** Adjuster for Complex Rules. */
      readonly weight?: {
        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster?: "relative" | "percentage";
        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster_value?: number;
      };
      /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
      readonly image_url?: string;
      readonly purchasing_disabled?: {
        /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
        readonly status?: boolean;
        /** The message displayed on the storefront when the purchasing disabled status is `true`. */
        readonly message?: string;
      };
    };
  };
  /** The model for a PUT to update a modifier value on a product. */
  readonly productModifierOptionValue_Put: ({
    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
    readonly is_default?: boolean;
    /** The text display identifying the value on the storefront. Required in a /POST. */
    readonly label: string;
    /** The order in which the value will be displayed on the product page. Required in a /POST. */
    readonly sort_order: number;
    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
    readonly value_data?: { readonly [key: string]: any };
  } & {
    readonly adjusters?: {
      /** Adjuster for Complex Rules. */
      readonly price?: {
        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster?: "relative" | "percentage";
        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster_value?: number;
      };
      /** Adjuster for Complex Rules. */
      readonly weight?: {
        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster?: "relative" | "percentage";
        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        readonly adjuster_value?: number;
      };
      /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
      readonly image_url?: string;
      readonly purchasing_disabled?: {
        /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
        readonly status?: boolean;
        /** The message displayed on the storefront when the purchasing disabled status is `true`. */
        readonly message?: string;
      };
    };
  }) & {
    /** The unique numeric ID of the value; increments sequentially. */
    readonly id?: number;
  };
  readonly resp_productionOption: {
    readonly data?: definitions["productOption_Full"];
    /** Empty meta object; may be used later. */
    readonly meta?: {
      readonly ""?: string;
    };
  };
  /** Common Option properties. */
  readonly productOption_Base: {
    /** The unique numerical ID of the option, increments sequentially. */
    readonly id?: number;
    /** The unique numerical ID of the product to which the option belongs. */
    readonly product_id?: number;
    /** The name of the option shown on the storefront. */
    readonly display_name?: string;
    /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
    readonly type?:
      | "radio_buttons"
      | "rectangles"
      | "dropdown"
      | "product_list"
      | "product_list_with_images"
      | "swatch";
    readonly config?: definitions["productOptionConfig_Full"];
    /** Order in which the option is displayed on the storefront. */
    readonly sort_order?: number;
    readonly option_values?: definitions["productOptionOptionValue_Full"];
  };
  readonly productOption_Full: definitions["productOption_Base"] & {
    /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
    readonly name?: string;
  };
  /** The model for a POST to create options on a product. */
  readonly productOption_Post: {
    /** The unique numerical ID of the option, increments sequentially. */
    readonly id?: number;
    /** The unique numerical ID of the product to which the option belongs. */
    readonly product_id?: number;
    /** The name of the option shown on the storefront. */
    readonly display_name?: string;
    /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
    readonly type?:
      | "radio_buttons"
      | "rectangles"
      | "dropdown"
      | "product_list"
      | "product_list_with_images"
      | "swatch";
    /** The values for option config can vary based on the Modifier created. */
    readonly config?: {
      /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      readonly default_value?: string;
      /** (checkbox) Flag for setting the checkbox to be checked by default. */
      readonly checked_by_default?: boolean;
      /** (checkbox) Label displayed for the checkbox option. */
      readonly checkbox_label?: string;
      /** (date) Flag to limit the dates allowed to be entered on a date option. */
      readonly date_limited?: boolean;
      /** (date) The type of limit that is allowed to be entered on a date option. */
      readonly date_limit_mode?: "earliest" | "range" | "latest";
      /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_earliest_value?: string;
      /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_latest_value?: string;
      /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
      readonly file_types_mode?: "specific" | "all";
      /**
       * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      readonly file_types_supported?: readonly string[];
      /** (file) A list of other file types allowed with the file upload option. */
      readonly file_types_other?: readonly string[];
      /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
      readonly file_max_size?: number;
      /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      readonly text_characters_limited?: boolean;
      /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
      readonly text_min_length?: number;
      /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
      readonly text_max_length?: number;
      /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
      readonly text_lines_limited?: boolean;
      /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
      readonly text_max_lines?: number;
      /** (numbers_only_text) Flag to limit the value of a number option. */
      readonly number_limited?: boolean;
      /** (numbers_only_text) The type of limit on values entered for a number option. */
      readonly number_limit_mode?: "lowest" | "highest" | "range";
      /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
      readonly number_lowest_value?: number;
      /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      readonly number_highest_value?: number;
      /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
      readonly number_integers_only?: boolean;
      /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      readonly product_list_adjusts_inventory?: boolean;
      /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      readonly product_list_adjusts_pricing?: boolean;
      /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
      readonly product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /** Order in which the option is displayed on the storefront. */
    readonly sort_order?: number;
    readonly option_values?: readonly ({
      /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      readonly is_default?: boolean;
      /** The text display identifying the value on the storefront. Required in a /POST. */
      readonly label: string;
      /** The order in which the value will be displayed on the product page. Required in a /POST. */
      readonly sort_order: number;
      /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      readonly value_data?: { readonly [key: string]: any };
    } & {
      /** The unique numeric ID of the value; increments sequentially. */
      readonly id?: number;
    })[];
    /** Publicly available image url */
    readonly image_url?: string;
  };
  /** The model for a PUT to update options on a product. */
  readonly productOption_Put: {
    /** The unique numerical ID of the option, increments sequentially. */
    readonly id?: number;
    /** The unique numerical ID of the product to which the option belongs. */
    readonly product_id?: number;
    /** The name of the option shown on the storefront. */
    readonly display_name?: string;
    /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
    readonly type?:
      | "radio_buttons"
      | "rectangles"
      | "dropdown"
      | "product_list"
      | "product_list_with_images"
      | "swatch";
    /** The values for option config can vary based on the Modifier created. */
    readonly config?: {
      /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      readonly default_value?: string;
      /** (checkbox) Flag for setting the checkbox to be checked by default. */
      readonly checked_by_default?: boolean;
      /** (checkbox) Label displayed for the checkbox option. */
      readonly checkbox_label?: string;
      /** (date) Flag to limit the dates allowed to be entered on a date option. */
      readonly date_limited?: boolean;
      /** (date) The type of limit that is allowed to be entered on a date option. */
      readonly date_limit_mode?: "earliest" | "range" | "latest";
      /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_earliest_value?: string;
      /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
      readonly date_latest_value?: string;
      /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
      readonly file_types_mode?: "specific" | "all";
      /**
       * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      readonly file_types_supported?: readonly string[];
      /** (file) A list of other file types allowed with the file upload option. */
      readonly file_types_other?: readonly string[];
      /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
      readonly file_max_size?: number;
      /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      readonly text_characters_limited?: boolean;
      /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
      readonly text_min_length?: number;
      /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
      readonly text_max_length?: number;
      /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
      readonly text_lines_limited?: boolean;
      /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
      readonly text_max_lines?: number;
      /** (numbers_only_text) Flag to limit the value of a number option. */
      readonly number_limited?: boolean;
      /** (numbers_only_text) The type of limit on values entered for a number option. */
      readonly number_limit_mode?: "lowest" | "highest" | "range";
      /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
      readonly number_lowest_value?: number;
      /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      readonly number_highest_value?: number;
      /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
      readonly number_integers_only?: boolean;
      /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      readonly product_list_adjusts_inventory?: boolean;
      /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      readonly product_list_adjusts_pricing?: boolean;
      /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
      readonly product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /** Order in which the option is displayed on the storefront. */
    readonly sort_order?: number;
    readonly option_values?: readonly ({
      /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      readonly is_default?: boolean;
      /** The text display identifying the value on the storefront. Required in a /POST. */
      readonly label: string;
      /** The order in which the value will be displayed on the product page. Required in a /POST. */
      readonly sort_order: number;
      /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      readonly value_data?: { readonly [key: string]: any };
    } & {
      /** The unique numeric ID of the value; increments sequentially. */
      readonly id?: number;
    })[];
    /** Publicly available image url */
    readonly image_url?: string;
  };
  /** Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API. */
  readonly categoriesTree_Resp: {
    readonly data?: readonly definitions["categoriesTreeNode_Full"][];
    readonly meta?: definitions["metaEmpty_Full"];
  };
  /** Used to reflect parent <> child category relationships. Used by Category Tree. */
  readonly categoriesTreeNode_Full: {
    /** The unique numeric ID of the category; increments sequentially. */
    readonly id?: number;
    /** The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog. */
    readonly parent_id?: number;
    /** The name displayed for the category. Name is unique with respect to the category's siblings. */
    readonly name?: string;
    /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
    readonly is_visible?: boolean;
    /** The custom URL for the category on the storefront. */
    readonly url?: string;
    /** The list of children of the category. */
    readonly children?: readonly definitions["categoriesTreeNode_Full"][];
  };
  /** Common Category object properties. */
  readonly category_Full: {
    /**
     * Unique ID of the *Category*. Increments sequentially.
     * Read-Only.
     */
    readonly id?: number;
    /**
     * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
     * Required in a POST if creating a child category.
     */
    readonly parent_id: number;
    /**
     * The name displayed for the category. Name is unique with respect to the category's siblings.
     * Required in a POST.
     */
    readonly name: string;
    /** The product description, which can include HTML formatting. */
    readonly description?: string;
    /** Number of views the category has on the storefront. */
    readonly views?: number;
    /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
    readonly sort_order?: number;
    /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
    readonly page_title?: string;
    /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
    readonly search_keywords?: string;
    /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
    readonly meta_keywords?: readonly string[];
    /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
    readonly meta_description?: string;
    /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
    readonly layout_file?: string;
    /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
    readonly is_visible?: boolean;
    /** Determines how the products are sorted on category page load. */
    readonly default_product_sort?:
      | "use_store_settings"
      | "featured"
      | "newest"
      | "best_selling"
      | "alpha_asc"
      | "alpha_desc"
      | "avg_customer_review"
      | "price_asc"
      | "price_desc";
    /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
    readonly image_url?: string;
    readonly custom_url?: definitions["customUrl_Full"];
  };
  /** Common Brand properties. */
  readonly brand_Full: {
    /** Unique ID of the *Brand*. Read-Only. */
    readonly id?: number;
    /**
     * The name of the brand. Must be unique.
     * Required in POST.
     */
    readonly name: string;
    /** The title shown in the browser while viewing the brand. */
    readonly page_title?: string;
    /** Comma-separated list of meta keywords to include in the HTML. */
    readonly meta_keywords?: readonly string[];
    /** A meta description to include. */
    readonly meta_description?: string;
    /** A comma-separated list of keywords that can be used to locate this brand. */
    readonly search_keywords?: string;
    /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
    readonly image_url?: string;
    readonly custom_url?: definitions["customUrl_Full"];
  };
  /** Common Variant properties. */
  readonly productVariant_Base: {
    /** The cost price of the variant. Not affected by Price List prices. */
    readonly cost_price?: number;
    /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
    readonly price?: number;
    /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
    readonly sale_price?: number;
    /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
    readonly retail_price?: number;
    /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
    readonly weight?: number;
    /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
    readonly width?: number;
    /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
    readonly height?: number;
    /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
    readonly depth?: number;
    /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
    readonly is_free_shipping?: boolean;
    /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
    readonly fixed_cost_shipping_price?: number;
    /** If `true`, this variant will not be purchasable on the storefront. */
    readonly purchasing_disabled?: boolean;
    /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
    readonly purchasing_disabled_message?: string;
    /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
    readonly upc?: string;
    /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
    readonly inventory_level?: number;
    /** When the variant hits this inventory level, it is considered low stock. */
    readonly inventory_warning_level?: number;
    /** Identifies where in a warehouse the variant is located. */
    readonly bin_picking_number?: string;
    /** The Manufacturer Part Number (MPN) for the variant. */
    readonly mpn?: string;
  };
  readonly productVariant_Full: definitions["productVariant_Base"] & {
    readonly id?: number;
    readonly product_id?: number;
    readonly sku?: string;
    /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
    readonly sku_id?: number;
    /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
    readonly option_values?: readonly definitions["productVariantOptionValue_Full"][];
    /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
    readonly calculated_price?: number;
    readonly calculated_weight?: number;
  };
  /** The model for a POST to create variants on a product. */
  readonly productVariant_Post: {
    /** The cost price of the variant. Not affected by Price List prices. */
    readonly cost_price?: number;
    /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
    readonly price?: number;
    /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
    readonly sale_price?: number;
    /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
    readonly retail_price?: number;
    /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
    readonly weight?: number;
    /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
    readonly width?: number;
    /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
    readonly height?: number;
    /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
    readonly depth?: number;
    /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
    readonly is_free_shipping?: boolean;
    /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
    readonly fixed_cost_shipping_price?: number;
    /** If `true`, this variant will not be purchasable on the storefront. */
    readonly purchasing_disabled?: boolean;
    /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
    readonly purchasing_disabled_message?: string;
    /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
    readonly upc?: string;
    /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
    readonly inventory_level?: number;
    /** When the variant hits this inventory level, it is considered low stock. */
    readonly inventory_warning_level?: number;
    /** Identifies where in a warehouse the variant is located. */
    readonly bin_picking_number?: string;
    /** Publicly available image url */
    readonly image_url?: string;
  } & {
    readonly product_id?: number;
    readonly sku?: string;
    /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
    readonly option_values?: readonly definitions["productVariantOptionValue_Full"][];
  };
  readonly variantCollection_Put: readonly definitions["productVariant_Full"][];
  /** The model for a PUT to update variants on a product. */
  readonly variant_Put: {
    /** The cost price of the variant. Not affected by Price List prices. */
    readonly cost_price?: number;
    /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
    readonly price?: number;
    /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
    readonly sale_price?: number;
    /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
    readonly retail_price?: number;
    /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
    readonly weight?: number;
    /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
    readonly width?: number;
    /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
    readonly height?: number;
    /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
    readonly depth?: number;
    /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
    readonly is_free_shipping?: boolean;
    /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
    readonly fixed_cost_shipping_price?: number;
    /** If `true`, this variant will not be purchasable on the storefront. */
    readonly purchasing_disabled?: boolean;
    /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
    readonly purchasing_disabled_message?: string;
    /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
    readonly upc?: string;
    /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
    readonly inventory_level?: number;
    /** When the variant hits this inventory level, it is considered low stock. */
    readonly inventory_warning_level?: number;
    /** Identifies where in a warehouse the variant is located. */
    readonly bin_picking_number?: string;
  } & {
    readonly id?: number;
  };
  /** The model for a POST to create variants on a product. */
  readonly productVariant_Post_Product: definitions["productVariant_Base"] & {
    readonly sku?: string;
    readonly option_values?: readonly {
      /** The name of the option. */
      readonly option_display_name?: string;
      /** The label of the option value. */
      readonly label?: string;
    }[];
  };
  /** The model for a PUT to update variants on a product. */
  readonly productVariant_Put_Product: {
    /** The cost price of the variant. Not affected by Price List prices. */
    readonly cost_price?: number;
    /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
    readonly price?: number;
    /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
    readonly sale_price?: number;
    /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
    readonly retail_price?: number;
    /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
    readonly weight?: number;
    /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
    readonly width?: number;
    /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
    readonly height?: number;
    /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
    readonly depth?: number;
    /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
    readonly is_free_shipping?: boolean;
    /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
    readonly fixed_cost_shipping_price?: number;
    /** If `true`, this variant will not be purchasable on the storefront. */
    readonly purchasing_disabled?: boolean;
    /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
    readonly purchasing_disabled_message?: string;
    /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
    readonly upc?: string;
    /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
    readonly inventory_level?: number;
    /** When the variant hits this inventory level, it is considered low stock. */
    readonly inventory_warning_level?: number;
    /** Identifies where in a warehouse the variant is located. */
    readonly bin_picking_number?: string;
    readonly product_id?: number;
    readonly sku?: string;
  };
  readonly productVariantOptionValue_Full: {
    /** The name of the option. */
    readonly option_display_name?: string;
    /** The label of the option value. */
    readonly label?: string;
  } & definitions["productVariantOptionValue_Base"];
  /** The model for a POST to create option values on a product. */
  readonly productOptionValue_Post_Product: {
    /** The name of the option. */
    readonly option_display_name?: string;
    /** The label of the option value. */
    readonly label?: string;
  };
  /** Common Product Variant Option properties. */
  readonly productVariantOptionValue_Base: {
    /** `option_value` ID. */
    readonly id?: number;
    /** `option` ID. */
    readonly option_id?: number;
  };
  /** The model for a POST to create option values on a variant. */
  readonly productVariantOptionValue_Post: {
    readonly id?: number;
    readonly option_id?: number;
  };
  readonly resp_productOptionValue: {
    readonly data?: definitions["productOptionOptionValue_Full"];
    /** Empty meta object; may be used later. */
    readonly meta?: {
      readonly ""?: string;
    };
  };
  /** Common Product Option `option_value` properties. */
  readonly productOptionOptionValue_Base: {
    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
    readonly is_default?: boolean;
    /** The text display identifying the value on the storefront. Required in a /POST. */
    readonly label: string;
    /** The order in which the value will be displayed on the product page. Required in a /POST. */
    readonly sort_order: number;
    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
    readonly value_data?: { readonly [key: string]: any };
  };
  /** Product Option `option_value`. */
  readonly productOptionOptionValue_Full: definitions["productOptionOptionValue_Base"] & {
    /** The unique numeric ID of the value; increments sequentially. */
    readonly id?: number;
  };
  /** The model for a POST to create option values on a product. */
  readonly productOptionValue_Post: {
    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
    readonly is_default?: boolean;
    /** The text display identifying the value on the storefront. Required in a /POST. */
    readonly label: string;
    /** The order in which the value will be displayed on the product page. Required in a /POST. */
    readonly sort_order: number;
    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
    readonly value_data?: { readonly [key: string]: any };
  };
  /** The model for a PUT to update option values on a product. */
  readonly productOptionValue_Put: {
    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
    readonly is_default?: boolean;
    /** The text display identifying the value on the storefront. Required in a /POST. */
    readonly label: string;
    /** The order in which the value will be displayed on the product page. Required in a /POST. */
    readonly sort_order: number;
    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
    readonly value_data?: { readonly [key: string]: any };
  } & {
    /** The unique numeric ID of the value; increments sequentially. */
    readonly id?: number;
  };
  /** Common ProductImage properties. */
  readonly productImage_Base: {
    /** The local path to the original image file uploaded to BigCommerce. */
    readonly image_file?: string;
    /** Flag for identifying whether the image is used as the product's thumbnail. */
    readonly is_thumbnail?: boolean;
    /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
    readonly sort_order?: number;
    /** The description for the image. */
    readonly description?: string;
    /** Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
    readonly image_url?: string;
  };
  /** The model for a POST to create an image on a product. */
  readonly productImage_Post: {
    /** The unique numeric ID of the image; increments sequentially. */
    readonly id?: number;
    /** The unique numeric identifier for the product with which the image is associated. */
    readonly product_id?: number;
    /** The local path to the original image file uploaded to BigCommerce. */
    readonly image_file?: string;
    /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
    readonly url_zoom?: string;
    /** The standard URL for this image. By default, this is used for product-page images. */
    readonly url_standard?: string;
    /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
    readonly url_thumbnail?: string;
    /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
    readonly url_tiny?: string;
    /** The date on which the product image was modified. */
    readonly date_modified?: string;
    /** Flag for identifying whether the image is used as the product's thumbnail. */
    readonly is_thumbnail?: boolean;
    /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
    readonly sort_order?: number;
    /** The description for the image. */
    readonly description?: string;
  } & {
    /** Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
    readonly image_url?: string;
    /** Must be sent as a multipart/form-data field in the request body. */
    readonly image_file?: string;
  };
  /** The model for a PUT to update applicable Product Image fields. */
  readonly productImage_Put: {
    /** The unique numeric ID of the image; increments sequentially. */
    readonly id?: number;
    /** The unique numeric identifier for the product with which the image is associated. */
    readonly product_id?: number;
    /** The local path to the original image file uploaded to BigCommerce. */
    readonly image_file?: string;
    /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
    readonly url_zoom?: string;
    /** The standard URL for this image. By default, this is used for product-page images. */
    readonly url_standard?: string;
    /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
    readonly url_thumbnail?: string;
    /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
    readonly url_tiny?: string;
    /** The date on which the product image was modified. */
    readonly date_modified?: string;
    /** Flag for identifying whether the image is used as the product's thumbnail. */
    readonly is_thumbnail?: boolean;
    /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
    readonly sort_order?: number;
    /** The description for the image. */
    readonly description?: string;
  };
  /** The model for a POST to create a video on a product. */
  readonly productVideo_Base: {
    /** The title for the video. If left blank, this will be filled in according to data on a host site. */
    readonly title?: string;
    /** The description for the video. If left blank, this will be filled in according to data on a host site. */
    readonly description?: string;
    /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
    readonly sort_order?: number;
    /** The video type (a short name of a host site). */
    readonly type?: "youtube";
    /** The ID of the video on a host site. */
    readonly video_id?: string;
  };
  /** A product video model. */
  readonly productVideo_Full: definitions["productVideo_Base"] & {
    /** The unique numeric ID of the product video; increments sequentially. */
    readonly id?: number;
    /** The unique numeric identifier for the product with which the image is associated. */
    readonly product_id?: number;
    /** Length of the video. This will be filled in according to data on a host site. */
    readonly length?: string;
  };
  /** The model for a POST to create a video on a product. */
  readonly productVideo_Post: definitions["productVideo_Base"];
  /** The model for a PUT to update a video on a product. */
  readonly productVideo_Put: definitions["productVideo_Base"] & {
    /** The unique numeric ID of the product video; increments sequentially. */
    readonly id?: number;
  };
  readonly productReview_Base: {
    /**
     * The title for the product review.
     * Required in /POST.
     */
    readonly title: string;
    /** The text for the product review. */
    readonly text?: string;
    /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
    readonly status?: string;
    /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
    readonly rating?: number;
    /** The email of the reviewer. Must be a valid email, or an empty string. */
    readonly email?: string;
    /** The name of the reviewer. */
    readonly name?: string;
    /** Date the product was reviewed. Required in /POST. */
    readonly date_reviewed: string;
  };
  /** A product review model. */
  readonly productReview_Full: definitions["productReview_Base"] & {
    /** The unique numeric ID of the product review; increments sequentially. */
    readonly id?: number;
    /** The unique numeric identifier for the product with which the review is associated. */
    readonly product_id?: number;
    /** Date the product review was created. */
    readonly date_created?: string;
    /** Date the product review was modified. */
    readonly date_modified?: string;
  };
  /** The model for a POST to create a product review. */
  readonly productReview_Post: {
    /**
     * The title for the product review.
     * Required in /POST.
     */
    readonly title: string;
    /** The text for the product review. */
    readonly text?: string;
    /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
    readonly status?: string;
    /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
    readonly rating?: number;
    /** The email of the reviewer. Must be a valid email, or an empty string. */
    readonly email?: string;
    /** The name of the reviewer. */
    readonly name?: string;
    /** Date the product was reviewed. Required in /POST. */
    readonly date_reviewed: string;
  };
  /** The model for a PUT to update a product review. */
  readonly productReview_Put: {
    /**
     * The title for the product review.
     * Required in /POST.
     */
    readonly title: string;
    /** The text for the product review. */
    readonly text?: string;
    /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
    readonly status?: string;
    /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
    readonly rating?: number;
    /** The email of the reviewer. Must be a valid email, or an empty string. */
    readonly email?: string;
    /** The name of the reviewer. */
    readonly name?: string;
    /** Date the product was reviewed. Required in /POST. */
    readonly date_reviewed: string;
  };
  /**
   * Image Response returns for:
   * * Create Variant Image
   * * Create Modifier Image
   * * Create Category Image
   * * Create Brand Image
   */
  readonly resp_productImage: {
    readonly data?: definitions["productImage_Full"];
    /** Empty meta object; may be used later. */
    readonly meta?: { readonly [key: string]: any };
  };
  /** An object containing a publicly accessible image URL, or a form post that contains an image file. */
  readonly resourceImage_Full: {
    /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
    readonly image_url?: string;
  };
  /** The model for a POST to create a product. */
  readonly product_Post: definitions["product_Base"] & {
    readonly variants?: definitions["productVariant_Post_Product"];
  };
  /** The model for a PUT to update a product. */
  readonly product_Put: {
    /** The unique numerical ID of the product; increments sequentially. */
    readonly id?: number;
  } & definitions["product_Base"] & {
      readonly variants?: definitions["productVariant_Put_Product"];
    };
  /** Catalog Summary object describes a lightweight summary of the catalog. */
  readonly catalogSummary_Full: {
    /** A count of all inventory items in the catalog. */
    readonly inventory_count?: number;
    /** Total value of store's inventory. */
    readonly inventory_value?: number;
    /** ID of the category containing the most products. */
    readonly primary_category_id?: number;
    /** Name of the category containing the most products. */
    readonly primary_category_name?: string;
    /** Total number of variants */
    readonly variant_count?: number;
    /** Highest priced variant */
    readonly highest_variant_price?: number;
    /** Average price of all variants */
    readonly average_variant_price?: number;
    /** Lowest priced variant in the store */
    readonly lowest_variant_price?: string;
    readonly oldest_variant_date?: string;
    readonly newest_variant_date?: string;
  };
  /** Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center. */
  readonly metafield_Base: {
    /** Unique ID of the *Metafield*. Read-Only. */
    readonly id?: number;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    readonly permission_set:
      | "app_only"
      | "read"
      | "write"
      | "read_and_sf_access"
      | "write_and_sf_access";
    /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
    readonly namespace: string;
    /** The name of the field, for example: `location_id`, `color`. Required for POST. */
    readonly key: string;
    /** The value of the field, for example: `1`, `blue`. Required for POST. */
    readonly value: string;
    /** Description for the metafields. */
    readonly description?: string;
    /** The type of resource with which the metafield is associated. */
    readonly resource_type?: "category" | "brand" | "product" | "variant";
    /** The ID for the resource with which the metafield is associated. */
    readonly resource_id?: number;
    /** Date and time of the metafield's creation. Read-Only. */
    readonly date_created?: string;
    /** Date and time when the metafield was last updated. Read-Only. */
    readonly date_modified?: string;
  };
  /** Common ComplexRule properties. */
  readonly complexRule_Base: {
    /**
     * The unique numeric ID of the rule; increments sequentially.
     * Read-Only
     */
    readonly id?: number;
    /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
    readonly product_id?: number;
    /** The priority to give this rule when making adjustments to the product properties. */
    readonly sort_order?: number;
    /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
    readonly enabled?: boolean;
    /** Flag for determining whether other rules should not be applied after this rule has been applied. */
    readonly stop?: boolean;
    /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
    readonly purchasing_disabled?: boolean;
    /** Message displayed on the storefront when a rule disables the purchasing of a product. */
    readonly purchasing_disabled_message?: string;
    /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
    readonly purchasing_hidden?: boolean;
    /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
    readonly image_url?: string;
    readonly price_adjuster?: definitions["adjuster_Full"];
    readonly weight_adjuster?: definitions["adjuster_Full"];
    readonly conditions?: readonly definitions["complexRuleConditionBase"][];
  };
  /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
  readonly productCustomField_Base: {
    /**
     * The unique numeric ID of the custom field; increments sequentially.
     * Read-Only
     */
    readonly id?: number;
    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
    readonly name: string;
    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
    readonly value: string;
  };
  /** The model for a POST to create a custom field on a product. */
  readonly productCustomField_Post: {
    /**
     * The unique numeric ID of the custom field; increments sequentially.
     * Read-Only
     */
    readonly id?: number;
    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
    readonly name: string;
    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
    readonly value: string;
  };
  /** The model for a PUT to update a custom field on a product. */
  readonly productCustomField_Put: {
    /**
     * The unique numeric ID of the custom field; increments sequentially.
     * Read-Only
     */
    readonly id?: number;
    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
    readonly name: string;
    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
    readonly value: string;
  };
  /** Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`'s, or else reference a `modifier_value_id` and a `variant_id`. */
  readonly complexRuleConditionBase: {
    /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
    readonly id?: number;
    /**
     * The unique numeric ID of the rule with which the condition is associated.
     * Read-Only
     */
    readonly rule_id?: number;
    /**
     * The unique numeric ID of the modifier with which the rule condition is associated.
     * Required in /POST.
     */
    readonly modifier_id: number;
    /**
     * The unique numeric ID of the modifier value with which the rule condition is associated.
     * Required in /POST.
     */
    readonly modifier_value_id: number;
    /**
     * The unique numeric ID of the variant with which the rule condition is associated.
     * Required in /POST.
     */
    readonly variant_id: number;
    /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
    readonly combination_id?: number;
  };
  /** The custom URL for the product on the storefront. */
  readonly customUrl_Full: {
    /** Product URL on the storefront. */
    readonly url?: string;
    /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
    readonly is_customized?: boolean;
  };
  /** Common Bulk Pricing Rule properties */
  readonly bulkPricingRule_Full: {
    /** Unique ID of the *Bulk Pricing Rule*. Read-Only. */
    readonly id?: number;
    /**
     * The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
     * Required in /POST.
     */
    readonly quantity_min: number;
    /**
     * The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
     * Required in /POST.
     */
    readonly quantity_max: number;
    /**
     * The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
     * Required in /POST.
     */
    readonly type: "price" | "percent" | "fixed";
    /**
     * The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
     * Required in /POST.
     */
    readonly amount: number;
  };
  /** The values for option config can vary based on the Modifier created. */
  readonly productOptionConfig_Full: {
    /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
    readonly default_value?: string;
    /** (checkbox) Flag for setting the checkbox to be checked by default. */
    readonly checked_by_default?: boolean;
    /** (checkbox) Label displayed for the checkbox option. */
    readonly checkbox_label?: string;
    /** (date) Flag to limit the dates allowed to be entered on a date option. */
    readonly date_limited?: boolean;
    /** (date) The type of limit that is allowed to be entered on a date option. */
    readonly date_limit_mode?: "earliest" | "range" | "latest";
    /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
    readonly date_earliest_value?: string;
    /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
    readonly date_latest_value?: string;
    /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
    readonly file_types_mode?: "specific" | "all";
    /**
     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
     *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
     *   `other` - Allows file types defined in the `file_types_other` array.
     */
    readonly file_types_supported?: readonly string[];
    /** (file) A list of other file types allowed with the file upload option. */
    readonly file_types_other?: readonly string[];
    /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
    readonly file_max_size?: number;
    /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
    readonly text_characters_limited?: boolean;
    /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
    readonly text_min_length?: number;
    /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
    readonly text_max_length?: number;
    /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
    readonly text_lines_limited?: boolean;
    /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
    readonly text_max_lines?: number;
    /** (numbers_only_text) Flag to limit the value of a number option. */
    readonly number_limited?: boolean;
    /** (numbers_only_text) The type of limit on values entered for a number option. */
    readonly number_limit_mode?: "lowest" | "highest" | "range";
    /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
    readonly number_lowest_value?: number;
    /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
    readonly number_highest_value?: number;
    /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
    readonly number_integers_only?: boolean;
    /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
    readonly product_list_adjusts_inventory?: boolean;
    /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
    readonly product_list_adjusts_pricing?: boolean;
    /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
    readonly product_list_shipping_calc?: "none" | "weight" | "package";
  };
  /** Adjuster for Complex Rules. */
  readonly adjuster_Full: {
    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
    readonly adjuster?: "relative" | "percentage";
    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
    readonly adjuster_value?: number;
  };
  /** Errors during batch usage for the BigCommerce API. */
  readonly resp_variantBatchError: {
    readonly batch_errors?: readonly (definitions["error_Base"] & {
      readonly errors?: {
        readonly additionalProperties?: string;
      };
    })[];
  };
  /** Data about the response, including pagination and collection totals. */
  readonly metaCollection_Full: {
    readonly pagination?: definitions["pagination_Full"];
  };
  /** Data about the response, including pagination and collection totals. */
  readonly pagination_Full: {
    /** Total number of items in the result set. */
    readonly total?: number;
    /** Total number of items in the collection response. */
    readonly count?: number;
    /** The amount of items returned in the collection per page, controlled by the limit parameter. */
    readonly per_page?: number;
    /** The page you are currently on within the collection. */
    readonly current_page?: number;
    /** The total number of pages in the collection. */
    readonly total_pages?: number;
    /** Pagination links for the previous and next parts of the whole collection. */
    readonly links?: {
      /** Link to the previous page returned in the response. */
      readonly previous?: string;
      /** Link to the current page returned in the response. */
      readonly current?: string;
      /** Link to the next page returned in the response. */
      readonly next?: string;
    };
  };
  /** Empty meta object; may be used later. */
  readonly metaEmpty_Full: { readonly [key: string]: any };
  readonly errorResponse_Full: definitions["error_Base"] & {
    readonly errors?: definitions["detailedErrors"];
  };
  /** Error payload for the BigCommerce API. */
  readonly error_Base: {
    /** The HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  /** Error payload for the BigCommerce API. */
  readonly errorNotFound: {
    /** 404 HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  /** A gift-certificate model. */
  readonly giftCertificate_Full: {
    /** The gift-certificate code. */
    readonly code?: string;
    /** The balance on a gift certificate when it was purchased. */
    readonly original_balance?: number;
    /** The balance on a gift certificate at the time of this purchase. */
    readonly starting_balance?: number;
    /** The remaining balance on a gift certificate. */
    readonly remaining_balance?: number;
    /** The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired. */
    readonly status?: "active" | "pending" | "disabled" | "expired";
  };
  /** No-content response for the BigCommerce API. */
  readonly errorNoContent: {
    /** 204 HTTP status code. */
    readonly status?: number;
    /** The error title describing the situation. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  readonly detailedErrors: {
    readonly additionalProperties?: string;
  };
  readonly product_Full: definitions["product_Base"] & {
    /** The date on which the product was created. */
    readonly date_created?: string;
    /** The date on which the product was modified. */
    readonly date_modified?: string;
    /** ID of the product. Read Only. */
    readonly id?: number;
    /** The unique identifier of the base variant associated with a simple product. This value is `null` for complex products. */
    readonly base_variant_id?: number;
    /** The price of the product as seen on the storefront. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. */
    readonly calculated_price?: number;
    readonly options?: readonly definitions["productOption_Base"][];
    readonly modifiers?: readonly definitions["productModifier_Full"][];
    /** Minimum Advertised Price. */
    readonly map_price?: number;
    /** Indicates that the product is in an Option Set (legacy V2 concept). */
    readonly option_set_id?: number;
    /** Legacy template setting which controls if the option set shows up to the side of or below the product image and description. */
    readonly option_set_display?: string;
  } & {
    readonly variants?: definitions["productVariant_Full"];
  };
  /** Common ProductImage properties. */
  readonly productImage_Full: definitions["productImage_Base"] & {
    /** The unique numeric ID of the image; increments sequentially. */
    readonly id?: number;
    /** The unique numeric identifier for the product with which the image is associated. */
    readonly product_id?: number;
    /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
    readonly url_zoom?: string;
    /** The standard URL for this image. By default, this is used for product-page images. */
    readonly url_standard?: string;
    /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
    readonly url_thumbnail?: string;
    /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
    readonly url_tiny?: string;
    /** The date on which the product image was modified. */
    readonly date_modified?: string;
  };
  readonly metafield_Post: definitions["metafield_Base"];
  /** The model for batch updating products. */
  readonly product_Put_Collection: readonly ({
    /** The unique numerical ID of the product; increments sequentially. Required on batch product `PUT` requests. */
    readonly id: number;
  } & definitions["product_Base"])[];
  /** The values for option config can vary based on the Modifier created. */
  readonly config_Full: {
    /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
    readonly default_value?: string;
    /** (checkbox) Flag for setting the checkbox to be checked by default. */
    readonly checked_by_default?: boolean;
    /** (checkbox) Label displayed for the checkbox option. */
    readonly checkbox_label?: string;
    /** (date) Flag to limit the dates allowed to be entered on a date option. */
    readonly date_limited?: boolean;
    /** (date) The type of limit that is allowed to be entered on a date option. */
    readonly date_limit_mode?: "earliest" | "range" | "latest";
    /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
    readonly date_earliest_value?: string;
    /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
    readonly date_latest_value?: string;
    /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
    readonly file_types_mode?: "specific" | "all";
    /**
     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
     *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
     *   `other` - Allows file types defined in the `file_types_other` array.
     */
    readonly file_types_supported?: readonly string[];
    /** (file) A list of other file types allowed with the file upload option. */
    readonly file_types_other?: readonly string[];
    /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
    readonly file_max_size?: number;
    /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
    readonly text_characters_limited?: boolean;
    /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
    readonly text_min_length?: number;
    /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
    readonly text_max_length?: number;
    /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
    readonly text_lines_limited?: boolean;
    /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
    readonly text_max_lines?: number;
    /** (numbers_only_text) Flag to limit the value of a number option. */
    readonly number_limited?: boolean;
    /** (numbers_only_text) The type of limit on values entered for a number option. */
    readonly number_limit_mode?: "lowest" | "highest" | "range";
    /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
    readonly number_lowest_value?: number;
    /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
    readonly number_highest_value?: number;
    /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
    readonly number_integers_only?: boolean;
    /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
    readonly product_list_adjusts_inventory?: boolean;
    /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
    readonly product_list_adjusts_pricing?: boolean;
    /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
    readonly product_list_shipping_calc?: "none" | "weight" | "package";
  };
  readonly adjusters_Full: {
    readonly price?: definitions["adjuster_Full"];
    readonly weight?: definitions["adjuster_Full"];
    /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
    readonly image_url?: string;
    readonly purchasing_disabled?: {
      /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
      readonly status?: boolean;
      /** The message displayed on the storefront when the purchasing disabled status is `true`. */
      readonly message?: string;
    };
  };
  /**
   * Variant properties used on:
   * * `/catalog/products/variants`
   * * `/catalog/variants`
   */
  readonly variant_Base: {
    /** The cost price of the variant. Not affected by Price List prices. */
    readonly cost_price?: number;
    /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
    readonly price?: number;
    /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
    readonly sale_price?: number;
    /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
    readonly retail_price?: number;
    /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
    readonly weight?: number;
    /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
    readonly width?: number;
    /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
    readonly height?: number;
    /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
    readonly depth?: number;
    /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
    readonly is_free_shipping?: boolean;
    /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
    readonly fixed_cost_shipping_price?: number;
    /** If `true`, this variant will not be purchasable on the storefront. */
    readonly purchasing_disabled?: boolean;
    /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
    readonly purchasing_disabled_message?: string;
    /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
    readonly upc?: string;
    /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
    readonly inventory_level?: number;
    /** When the variant hits this inventory level, it is considered low stock. */
    readonly inventory_warning_level?: number;
    /** Identifies where in a warehouse the variant is located. */
    readonly bin_picking_number?: string;
  };
  /**
   * Shared `Product` properties used in:
   * * `POST`
   * * `PUT`
   * * `GET`
   */
  readonly product_Base: {
    /** The product name. */
    readonly name: string;
    /** The product type. One of: `physical` - a physical stock unit, `digital` - a digital download. */
    readonly type: "physical" | "digital";
    /** User defined product code/stock keeping unit (SKU). */
    readonly sku?: string;
    /** The product description, which can include HTML formatting. */
    readonly description?: string;
    /** Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store */
    readonly weight: number;
    /** Width of the product, which can be used when calculating shipping costs. */
    readonly width?: number;
    /** Depth of the product, which can be used when calculating shipping costs. */
    readonly depth?: number;
    /** Height of the product, which can be used when calculating shipping costs. */
    readonly height?: number;
    /** The price of the product. The price should include or exclude tax, based on the store settings. */
    readonly price: number;
    /** The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store. */
    readonly cost_price?: number;
    /** The retail cost of the product. If entered, the retail cost price will be shown on the product page. */
    readonly retail_price?: number;
    /** If entered, the sale price will be used instead of value in the price field when calculating the product's cost. */
    readonly sale_price?: number;
    /** The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
    readonly tax_class_id?: number;
    /** Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation. */
    readonly product_tax_code?: string;
    /** An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values. */
    readonly categories?: readonly number[];
    /** A product can be added to an existing brand during a product /PUT or /POST. */
    readonly brand_id?: number;
    /** Current inventory level of the product. Simple inventory tracking must be enabled (See the `inventory_tracking` field) for this to take any effect. */
    readonly inventory_level?: number;
    /** Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect. */
    readonly inventory_warning_level?: number;
    /** The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels. */
    readonly inventory_tracking?: "none" | "product" | "variant";
    /** A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
    readonly fixed_cost_shipping_price?: number;
    /** Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero. */
    readonly is_free_shipping?: boolean;
    /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view. */
    readonly is_visible?: boolean;
    /** Flag to determine whether the product should be included in the `featured products` panel when viewing the store. */
    readonly is_featured?: boolean;
    /** An array of IDs for the related products. */
    readonly related_products?: readonly number[];
    /** Warranty information displayed on the product page. Can include HTML formatting. */
    readonly warranty?: string;
    /** The BIN picking number for the product. */
    readonly bin_picking_number?: string;
    /** The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. */
    readonly layout_file?: string;
    /** The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations. */
    readonly upc?: string;
    /** A comma-separated list of keywords that can be used to locate the product when searching the store. */
    readonly search_keywords?: string;
    /** Availability of the product. Availability options are: `available` - the product can be purchased on the storefront; `disabled` - the product is listed in the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders. */
    readonly availability?: "available" | "disabled" | "preorder";
    /** Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.' */
    readonly availability_description?: string;
    /** Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field. */
    readonly gift_wrapping_options_type?: "any" | "none" | "list";
    /** A list of gift-wrapping option IDs. */
    readonly gift_wrapping_options_list?: readonly number[];
    /** Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results. */
    readonly sort_order?: number;
    /** The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`. */
    readonly condition?: "New" | "Used" | "Refurbished";
    /** Flag used to determine whether the product condition is shown to the customer on the product page. */
    readonly is_condition_shown?: boolean;
    /** The minimum quantity an order must contain, to be eligible to purchase this product. */
    readonly order_quantity_minimum?: number;
    /** The maximum quantity an order can contain when purchasing the product. */
    readonly order_quantity_maximum?: number;
    /** Custom title for the product page. If not defined, the product name will be used as the meta title. */
    readonly page_title?: string;
    /** Custom meta keywords for the product page. If not defined, the store's default keywords will be used. */
    readonly meta_keywords?: readonly string[];
    /** Custom meta description for the product page. If not defined, the store's default meta description will be used. */
    readonly meta_description?: string;
    /** The number of times the product has been viewed. */
    readonly view_count?: number;
    /** Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders. */
    readonly preorder_release_date?: string;
    /** Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date. */
    readonly preorder_message?: string;
    /**
     * If set to true then on the preorder release date the preorder status will automatically be removed.
     * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
     * control panel or using the API. Using the API set `availability` to `available`.
     */
    readonly is_preorder_only?: boolean;
    /** False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.) */
    readonly is_price_hidden?: boolean;
    /** By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.) */
    readonly price_hidden_label?: string;
    readonly custom_url?: definitions["customUrl_Full"];
    /** Type of product, defaults to `product`. */
    readonly open_graph_type?:
      | "product"
      | "album"
      | "book"
      | "drink"
      | "food"
      | "game"
      | "movie"
      | "song"
      | "tv_show";
    /** Title of the product, if not specified the product name will be used instead. */
    readonly open_graph_title?: string;
    /** Description to use for the product, if not specified then the meta_description will be used instead. */
    readonly open_graph_description?: string;
    /** Flag to determine if product description or open graph description is used. */
    readonly open_graph_use_meta_description?: boolean;
    /** Flag to determine if product name or open graph name is used. */
    readonly open_graph_use_product_name?: boolean;
    /** Flag to determine if product image or open graph image is used. */
    readonly open_graph_use_image?: boolean;
    /** The brand can be created during a product PUT or POST request. If the brand already exists then the product will be added. If not the brand will be created and the product added. If using `brand_name` it performs a fuzzy match and adds the brand. eg. "Common Good" and "Common good" are the same. Brand name does not return as part of a product response. Only the `brand_id`. */
    readonly "brand_name or brand_id"?: string;
    /** Global Trade Item Number */
    readonly gtin?: string;
    /** Manufacturer Part Number */
    readonly mpn?: string;
    /** The total rating for the product. */
    readonly reviews_rating_sum?: number;
    /** The number of times the product has been rated. */
    readonly reviews_count?: number;
    /** The total quantity of this product sold. */
    readonly total_sold?: number;
    readonly custom_fields?: readonly definitions["productCustomField_Put"][];
    readonly bulk_pricing_rules?: readonly definitions["bulkPricingRule_Full"][];
    readonly images?: readonly definitions["productImage_Full"][];
    readonly videos?: readonly definitions["productVideo_Full"][];
  };
  /** Properties for updating metafields. */
  readonly metafield_Put: {
    /** Unique ID of the *Metafield*. Read-Only. */
    readonly id?: number;
  } & definitions["metafield_Base"];
  readonly metafield_Full: definitions["metafield_Put"] & {
    /** Date and time of the metafield's creation. Read-Only. */
    readonly date_created?: string;
    /** Date and time when the metafield was last updated. Read-Only. */
    readonly date_modified?: string;
  };
  /** The model for a PUT to update variants on a product. */
  readonly productVariant_Put: definitions["productVariant_Base"] & {
    readonly product_id?: number;
    readonly sku?: string;
  };
  readonly errorResponse_409: {
    readonly code?: number;
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
  } & {
    readonly errors?: definitions["detailedErrors"];
  };
  readonly errorResponse_422: {
    readonly code?: number;
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
  } & {
    readonly errors?: definitions["detailedErrors"];
  };
}

export interface parameters {
  /** The template file, for example: `pages/home`. */
  readonly FilterTemplateFileParam: string;
  /** Filter items by id. */
  readonly FilterIdParam: number;
  /** Filter items by sku. */
  readonly FilterSkuParam: string;
  /** Filter items by name. */
  readonly FilterNameParam: string;
  /** Filter items by email. */
  readonly FilterEmailParam: string;
  /** Filter items by source. */
  readonly FilterSourceParam: string;
  /** Filter items by order_id. */
  readonly FilterOrderIdParam: number;
  /** Filter items by upc. */
  readonly FilterUpcParam: string;
  /** Filter items by price. */
  readonly FilterPriceParam: number;
  /** Filter items by sale_price. */
  readonly FilterSalePriceParam: number;
  /** Filter items by retail_price. */
  readonly FilterRetailPriceParam: number;
  /** Filter items by map_price. */
  readonly FilterMapPriceParam: number;
  /** Filter items by calculated_price. */
  readonly FilterCalculatedPriceParam: number;
  /** Filter items by weight. */
  readonly FilterWeightParam: number;
  /** Filter items by condition. */
  readonly FilterConditionParam: "new" | "used" | "refurbished";
  /** Filter items by brand_id. */
  readonly FilterBrandIdParam: number;
  /** Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
  readonly FilterDateModifiedParam: string;
  /** Filter items by date_created. */
  readonly FilterDateCreatedParam: string;
  /** Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
  readonly FilterDateLastImportedParam: string;
  /** Filter items by if visible on the storefront. */
  readonly FilterIsVisibleParam: boolean;
  /** Filter items by is_featured. */
  readonly FilterIsFeaturedParam: number;
  /** Filter items by is_free_shipping. */
  readonly FilterIsFreeShippingParam: number;
  /** Filter items by inventory_level. */
  readonly FilterInventoryLevelParam: number;
  /** Filter items by inventory_low. Values: 1, 0. */
  readonly FilterInventoryLowParam: number;
  /** Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
  readonly FilterOutOfStockParam: number;
  /** Filter items by total_sold. */
  readonly FilterTotalSoldParam: number;
  /** Filter items by type: `physical` or `digital`. */
  readonly ProductFilterTypeParam: "digital" | "physical";
  /**
   * Filter items by categories.
   *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
   */
  readonly FilterCategoriesParam: number;
  /** Filter items by keywords. eg. new, towel, bath */
  readonly FilterKeywordParam: string;
  /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
  readonly ProductFilterKeywordParam: string;
  /** Set context for a product search. */
  readonly ProductFilterKeywordContextParam: "shopper" | "merchant";
  /** Filter items by status. */
  readonly FilterStatusParam: number;
  /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
  readonly FilterIncludeParam: readonly (
    | "variants"
    | "images"
    | "custom_fields"
    | "bulk_pricing_rules"
    | "primary_image"
    | "modifiers"
    | "options"
    | "videos"
  )[];
  /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
  readonly FilterIncludeFieldsParam: string;
  /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
  readonly FilterExcludeFieldsParam: string;
  /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
  readonly FilterParentIdParam: number;
  /** Filter items by page_title. */
  readonly FilterPageTitleParam: string;
  /** Filter items by availability. Values are: available, disabled, preorder. */
  readonly FilterAvailabilityParam: "available" | "disabled" | "preorder";
  /** A comma-separated list of ids of `Product`s whose prices were requested. */
  readonly FilterProductIdParam: string;
  /** The ID of the `Variant` whose prices were requested. */
  readonly FilterVariantIdParam: number;
  /** Filter items by currency. */
  readonly FilterCurrencyParam: string;
  /** Specifies the page number in a limited (paginated) list of products. */
  readonly PageParam: number;
  /** Controls the number of items per page in a limited (paginated) list of products. */
  readonly LimitParam: number;
  /** Sort direction. Acceptable values are: `asc`, `desc`. */
  readonly DirectionParam: "asc" | "desc";
  /** Field name to sort by. */
  readonly ProductSortParam:
    | "id"
    | "name"
    | "sku"
    | "price"
    | "date_modified"
    | "date_last_imported"
    | "inventory_level"
    | "is_visible"
    | "total_sold";
  /** The ID of the `Product` to which the resource belongs. */
  readonly ProductIdParam: number;
  /** The ID of the `review` that is being operated on. */
  readonly ReviewIdParam: number;
  /** The ID of the `Image` that is being operated on. */
  readonly ImageIdParam: number;
  /** The BigCommerce ID of the `Video` */
  readonly VideoIdParam: number;
  /** The ID of the `ComplexRule`. */
  readonly ComplexRuleIdParam: number;
  /** The ID of the `ConfigurableField`. */
  readonly ConfigurableFieldIdParam: number;
  /** The ID of the `CustomField`. */
  readonly CustomFieldIdParam: number;
  /** The ID of the `BulkPricingRule`. */
  readonly BulkPricingRuleIdParam: number;
  /** The ID of the `Modifier`. */
  readonly ModifierIdParam: number;
  /** The ID of the `Modifier/Option Value`. */
  readonly ValueIdParam: number;
  /** The ID of the `Option`. */
  readonly OptionIdParam: number;
  /** ID of the variant on a product, or on an associated Price List Record. */
  readonly VariantIdParam: number;
  /** The ID of the `Category` to which the resource belongs. */
  readonly CategoryIdParam: number;
  /** The ID of the `Brand` to which the resource belongs. */
  readonly BrandIdParam: number;
  /** The ID of the `Metafield`. */
  readonly MetafieldIdParam: number;
  /** Filter based on a metafield's key. */
  readonly MetafieldKeyParam: string;
  /** Filter based on a metafield's namespace. */
  readonly MetafieldNamespaceParam: string;
  /** An image file. Supported MIME types include GIF, JPEG, and PNG. */
  readonly ImageFileParam: { readonly [key: string]: any };
  /** The ID of the `Order` to which the transactions belong. */
  readonly OrderIdParam: number;
  readonly Accept: string;
  readonly "Content-Type": string;
  /**
   * A comma-separated list of ids of Products whose prices were requested. For example:
   * `?product_id=:id`
   * `?product_id:in=77,80,81`
   */
  readonly product_id: string;
  readonly FilterIdIn: readonly number[];
  readonly FilterIdNotIn: readonly number[];
  readonly FilterIdMax: readonly number[];
  readonly FilterIdMin: readonly number[];
  readonly FilterIdGreater: readonly number[];
  readonly FilterIdLess: readonly number[];
}

export interface responses {
  readonly ProductCollectionResponse: {
    readonly schema: {
      readonly data?: readonly definitions["product_Full"][];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly BrandResponse: {
    readonly schema: {
      /** Common Brand properties. */
      readonly data?: {
        /** Unique ID of the *Brand*. Read-Only. */
        readonly id?: number;
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        readonly name: string;
        /** The title shown in the browser while viewing the brand. */
        readonly page_title?: string;
        /** Comma-separated list of meta keywords to include in the HTML. */
        readonly meta_keywords?: readonly string[];
        /** A meta description to include. */
        readonly meta_description?: string;
        /** A comma-separated list of keywords that can be used to locate this brand. */
        readonly search_keywords?: string;
        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
        readonly image_url?: string;
        /** The custom URL for the brand on the storefront. */
        readonly custom_url?: {
          /** Brand URL on the storefront. */
          readonly url?: string;
          /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
          readonly is_customized?: boolean;
        };
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly BrandCollectionResponse: {
    readonly schema: {
      readonly data?: readonly {
        /** Unique ID of the *Brand*. Read-Only. */
        readonly id?: number;
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        readonly name: string;
        /** The title shown in the browser while viewing the brand. */
        readonly page_title?: string;
        /** Comma-separated list of meta keywords to include in the HTML. */
        readonly meta_keywords?: readonly string[];
        /** A meta description to include. */
        readonly meta_description?: string;
        /** A comma-separated list of keywords that can be used to locate this brand. */
        readonly search_keywords?: string;
        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
        readonly image_url?: string;
        /** The custom URL for the brand on the storefront. */
        readonly custom_url?: {
          /** Brand URL on the storefront. */
          readonly url?: string;
          /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
          readonly is_customized?: boolean;
        };
      }[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly BrandImageUpload: {
    readonly schema: {
      readonly data?: {
        readonly image_url?: string;
      };
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly MetafieldCollectionResponse: {
    readonly schema: {
      readonly data?: readonly {
        /** Unique ID of the *Metafield*. Read-Only. */
        readonly id?: number;
        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
        readonly permission_set: "app_only" | "read" | "write";
        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
        readonly namespace: string;
        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
        readonly key: string;
        /** The value of the field, for example: `1`, `blue`. Required for POST. */
        readonly value: string;
        /** Description for the metafields. */
        readonly description?: string;
        /** The type of resource with which the metafield is associated. */
        readonly resource_type?: "category" | "brand" | "product" | "variant";
        /** The ID for the resource with which the metafield is associated. */
        readonly resource_id?: number;
        /** Date and time of the metafield's creation. Read-Only. */
        readonly created_at?: string;
        /** Date and time when the metafield was last updated. Read-Only. */
        readonly updated_at?: string;
      }[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly MetafieldResponse: {
    readonly schema: {
      /** Common Metafield properties. */
      readonly data?: {
        /** Unique ID of the *Metafield*. Read-Only. */
        readonly id?: number;
        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
        readonly permission_set: "app_only" | "read" | "write";
        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
        readonly namespace: string;
        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
        readonly key: string;
        /** The value of the field, for example: `1`, `blue`. Required for POST. */
        readonly value: string;
        /** Description for the metafields. */
        readonly description?: string;
        /** The type of resource with which the metafield is associated. */
        readonly resource_type?: "category" | "brand" | "product" | "variant";
        /** The ID for the resource with which the metafield is associated. */
        readonly resource_id?: number;
        /** Date and time of the metafield's creation. Read-Only. */
        readonly created_at?: string;
        /** Date and time when the metafield was last updated. Read-Only. */
        readonly updated_at?: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly CategoryCollectionResponse: {
    readonly schema: {
      readonly data?: readonly { readonly [key: string]: any }[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly CategoryResponse: {
    readonly schema: {
      readonly data?: definitions["category_Full"];
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ProductResponse: {
    readonly schema: {
      readonly data?: definitions["product_Full"];
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly BulkPricingRuleResponse: {
    readonly schema: {
      readonly data?: definitions["bulkPricingRule_Full"];
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly BulkPricingRuleCollectionResponse: {
    readonly schema: {
      readonly data?: readonly definitions["bulkPricingRule_Full"][];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly ComplexRuleCollectionResponse: {
    readonly schema: {
      readonly data?: readonly {
        /**
         * The unique numeric ID of the rule; increments sequentially.
         * Read-Only
         */
        readonly id?: number;
        /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
        readonly product_id?: number;
        /** The priority to give this rule when making adjustments to the product properties. */
        readonly sort_order?: number;
        /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
        readonly enabled?: boolean;
        /** Flag for determining whether other rules should not be applied after this rule has been applied. */
        readonly stop?: boolean;
        /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
        readonly purchasing_disabled?: boolean;
        /** Message displayed on the storefront when a rule disables the purchasing of a product. */
        readonly purchasing_disabled_message?: string;
        /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
        readonly purchasing_hidden?: boolean;
        /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
        readonly image_url?: string;
        /** Adjuster for Complex Rules. */
        readonly price_adjuster?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        /** Adjuster for Complex Rules. */
        readonly weight_adjuster?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        readonly conditions?: readonly {
          /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
          readonly id?: number;
          /**
           * The unique numeric ID of the rule with which the condition is associated.
           * Read-Only
           */
          readonly rule_id?: number;
          /**
           * The unique numeric ID of the modifier with which the rule condition is associated.
           * Required in /POST.
           */
          readonly modifier_id: number;
          /**
           * The unique numeric ID of the modifier value with which the rule condition is associated.
           * Required in /POST.
           */
          readonly modifier_value_id: number;
          /**
           * The unique numeric ID of the variant with which the rule condition is associated.
           * Required in /POST.
           */
          readonly variant_id: number;
          /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
          readonly combination_id?: number;
        }[];
      }[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly ComplexRuleResponse: {
    readonly schema: {
      /** Common ComplexRule properties. */
      readonly data?: {
        /**
         * The unique numeric ID of the rule; increments sequentially.
         * Read-Only
         */
        readonly id?: number;
        /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
        readonly product_id?: number;
        /** The priority to give this rule when making adjustments to the product properties. */
        readonly sort_order?: number;
        /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
        readonly enabled?: boolean;
        /** Flag for determining whether other rules should not be applied after this rule has been applied. */
        readonly stop?: boolean;
        /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
        readonly purchasing_disabled?: boolean;
        /** Message displayed on the storefront when a rule disables the purchasing of a product. */
        readonly purchasing_disabled_message?: string;
        /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
        readonly purchasing_hidden?: boolean;
        /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
        readonly image_url?: string;
        /** Adjuster for Complex Rules. */
        readonly price_adjuster?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        /** Adjuster for Complex Rules. */
        readonly weight_adjuster?: {
          /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster?: "relative" | "percentage";
          /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          readonly adjuster_value?: number;
        };
        readonly conditions?: readonly {
          /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
          readonly id?: number;
          /**
           * The unique numeric ID of the rule with which the condition is associated.
           * Read-Only
           */
          readonly rule_id?: number;
          /**
           * The unique numeric ID of the modifier with which the rule condition is associated.
           * Required in /POST.
           */
          readonly modifier_id: number;
          /**
           * The unique numeric ID of the modifier value with which the rule condition is associated.
           * Required in /POST.
           */
          readonly modifier_value_id: number;
          /**
           * The unique numeric ID of the variant with which the rule condition is associated.
           * Required in /POST.
           */
          readonly variant_id: number;
          /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
          readonly combination_id?: number;
        }[];
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly CustomFieldCollectionResponse: {
    readonly schema: {
      readonly data?: readonly {
        /**
         * The unique numeric ID of the custom field; increments sequentially.
         * Read-Only
         */
        readonly id?: number;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        readonly name: string;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        readonly value: string;
      }[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly CustomFieldResponse: {
    readonly schema: {
      /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
      readonly data?: {
        /**
         * The unique numeric ID of the custom field; increments sequentially.
         * Read-Only
         */
        readonly id?: number;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        readonly name: string;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        readonly value: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ProductImageCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** The unique numeric ID of the image; increments sequentially. */
        readonly id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        readonly product_id?: number;
        /** The local path to the original image file uploaded to BigCommerce. */
        readonly image_file?: string;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        readonly url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        readonly url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        readonly url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        readonly url_tiny?: string;
        /** The date on which the product image was modified. */
        readonly date_modified?: string;
        /** Flag for identifying whether the image is used as the product's thumbnail. */
        readonly is_thumbnail?: boolean;
        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
        readonly sort_order?: number;
        /** The description for the image. */
        readonly description?: string;
      } & {
        /** The unique numeric ID of the image; increments sequentially. */
        readonly id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        readonly product_id?: number;
        /** The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
        readonly image_file?: string;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        readonly url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        readonly url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        readonly url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        readonly url_tiny?: string;
        /** The date on which the product image was modified. */
        readonly date_modified?: string;
        /**
         * Publically available URL.
         * Use the image_url when creating a product.
         */
        readonly image_url?: string;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly ProductImageResponse: {
    readonly schema: {
      readonly data?: {
        /** The unique numeric ID of the image; increments sequentially. */
        readonly id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        readonly product_id?: number;
        /** The local path to the original image file uploaded to BigCommerce. */
        readonly image_file?: string;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        readonly url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        readonly url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        readonly url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        readonly url_tiny?: string;
        /** The date on which the product image was modified. */
        readonly date_modified?: string;
        /** Flag for identifying whether the image is used as the product's thumbnail. */
        readonly is_thumbnail?: boolean;
        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
        readonly sort_order?: number;
        /** The description for the image. */
        readonly description?: string;
      } & {
        /** The unique numeric ID of the image; increments sequentially. */
        readonly id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        readonly product_id?: number;
        /** The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
        readonly image_file?: string;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        readonly url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        readonly url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        readonly url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        readonly url_tiny?: string;
        /** The date on which the product image was modified. */
        readonly date_modified?: string;
        /**
         * Publically available URL.
         * Use the image_url when creating a product.
         */
        readonly image_url?: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ModifierCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
        readonly type:
          | "date"
          | "checkbox"
          | "file"
          | "text"
          | "multi_line_text"
          | "numbers_only_text"
          | "radio_buttons"
          | "rectangles"
          | "dropdown"
          | "product_list"
          | "product_list_with_images"
          | "swatch";
        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
        readonly required: boolean;
        /** The order the modifiers display on the product detail page. */
        readonly sort_order?: number;
        /** The values for option config can vary based on the Modifier created. */
        readonly config?: {
          /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
          readonly default_value?: string;
          /** (checkbox) Flag for setting the checkbox to be checked by default. */
          readonly checked_by_default?: boolean;
          /** (checkbox) Label displayed for the checkbox option. */
          readonly checkbox_label?: string;
          /** (date) Flag to limit the dates allowed to be entered on a date option. */
          readonly date_limited?: boolean;
          /** (date) The type of limit that is allowed to be entered on a date option. */
          readonly date_limit_mode?: "earliest" | "range" | "latest";
          /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_earliest_value?: string;
          /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_latest_value?: string;
          /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
          readonly file_types_mode?: "specific" | "all";
          /**
           * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
           *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
           *   `other` - Allows file types defined in the `file_types_other` array.
           */
          readonly file_types_supported?: readonly string[];
          /** (file) A list of other file types allowed with the file upload option. */
          readonly file_types_other?: readonly string[];
          /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
          readonly file_max_size?: number;
          /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
          readonly text_characters_limited?: boolean;
          /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
          readonly text_min_length?: number;
          /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
          readonly text_max_length?: number;
          /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
          readonly text_lines_limited?: boolean;
          /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
          readonly text_max_lines?: number;
          /** (numbers_only_text) Flag to limit the value of a number option. */
          readonly number_limited?: boolean;
          /** (numbers_only_text) The type of limit on values entered for a number option. */
          readonly number_limit_mode?: "lowest" | "highest" | "range";
          /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
          readonly number_lowest_value?: number;
          /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
          readonly number_highest_value?: number;
          /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
          readonly number_integers_only?: boolean;
          /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
          readonly product_list_adjusts_inventory?: boolean;
          /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
          readonly product_list_adjusts_pricing?: boolean;
          /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
          readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        readonly option_values?: readonly (({
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          readonly adjusters?: {
            /** Adjuster for Complex Rules. */
            readonly price?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** Adjuster for Complex Rules. */
            readonly weight?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
            readonly image_url?: string;
            readonly purchasing_disabled?: {
              /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
              readonly status?: boolean;
              /** The message displayed on the storefront when the purchasing disabled status is `true`. */
              readonly message?: string;
            };
          };
        }) & {
          /** The unique numeric ID of the value; increments sequentially. */
          readonly id?: number;
        })[];
      } & {
        /** The unique numeric ID of the modifier; increments sequentially. */
        readonly id?: number;
        /** The unique numeric ID of the product to which the option belongs. */
        readonly product_id?: number;
        /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
        readonly name?: string;
        /** The name of the option shown on the storefront. */
        readonly display_name?: string;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly ModifierResponse: {
    readonly schema: {
      /** Product Modifier */
      readonly data?: {
        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
        readonly type:
          | "date"
          | "checkbox"
          | "file"
          | "text"
          | "multi_line_text"
          | "numbers_only_text"
          | "radio_buttons"
          | "rectangles"
          | "dropdown"
          | "product_list"
          | "product_list_with_images"
          | "swatch";
        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
        readonly required: boolean;
        /** The order the modifiers display on the product detail page. */
        readonly sort_order?: number;
        /** The values for option config can vary based on the Modifier created. */
        readonly config?: {
          /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
          readonly default_value?: string;
          /** (checkbox) Flag for setting the checkbox to be checked by default. */
          readonly checked_by_default?: boolean;
          /** (checkbox) Label displayed for the checkbox option. */
          readonly checkbox_label?: string;
          /** (date) Flag to limit the dates allowed to be entered on a date option. */
          readonly date_limited?: boolean;
          /** (date) The type of limit that is allowed to be entered on a date option. */
          readonly date_limit_mode?: "earliest" | "range" | "latest";
          /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_earliest_value?: string;
          /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_latest_value?: string;
          /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
          readonly file_types_mode?: "specific" | "all";
          /**
           * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
           *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
           *   `other` - Allows file types defined in the `file_types_other` array.
           */
          readonly file_types_supported?: readonly string[];
          /** (file) A list of other file types allowed with the file upload option. */
          readonly file_types_other?: readonly string[];
          /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
          readonly file_max_size?: number;
          /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
          readonly text_characters_limited?: boolean;
          /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
          readonly text_min_length?: number;
          /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
          readonly text_max_length?: number;
          /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
          readonly text_lines_limited?: boolean;
          /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
          readonly text_max_lines?: number;
          /** (numbers_only_text) Flag to limit the value of a number option. */
          readonly number_limited?: boolean;
          /** (numbers_only_text) The type of limit on values entered for a number option. */
          readonly number_limit_mode?: "lowest" | "highest" | "range";
          /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
          readonly number_lowest_value?: number;
          /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
          readonly number_highest_value?: number;
          /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
          readonly number_integers_only?: boolean;
          /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
          readonly product_list_adjusts_inventory?: boolean;
          /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
          readonly product_list_adjusts_pricing?: boolean;
          /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
          readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        readonly option_values?: readonly (({
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          readonly adjusters?: {
            /** Adjuster for Complex Rules. */
            readonly price?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** Adjuster for Complex Rules. */
            readonly weight?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
            readonly image_url?: string;
            readonly purchasing_disabled?: {
              /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
              readonly status?: boolean;
              /** The message displayed on the storefront when the purchasing disabled status is `true`. */
              readonly message?: string;
            };
          };
        }) & {
          /** The unique numeric ID of the value; increments sequentially. */
          readonly id?: number;
        })[];
      } & {
        /** The unique numeric ID of the modifier; increments sequentially. */
        readonly id?: number;
        /** The unique numeric ID of the product to which the option belongs. */
        readonly product_id?: number;
        /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
        readonly name?: string;
        /** The name of the option shown on the storefront. */
        readonly display_name?: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ModifierValueCollectionResponse: {
    readonly schema: {
      readonly data?: readonly (({
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        readonly is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        readonly label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        readonly sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        readonly value_data?: { readonly [key: string]: any };
      } & {
        readonly adjusters?: {
          /** Adjuster for Complex Rules. */
          readonly price?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          /** Adjuster for Complex Rules. */
          readonly weight?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
          readonly image_url?: string;
          readonly purchasing_disabled?: {
            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
            readonly status?: boolean;
            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
            readonly message?: string;
          };
        };
      }) & {
        /** The unique numeric ID of the value; increments sequentially. */
        readonly id?: number;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly ModifierValueResponse: {
    readonly schema: {
      /** Part of Modifier Value Response */
      readonly data?: ({
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        readonly is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        readonly label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        readonly sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        readonly value_data?: { readonly [key: string]: any };
      } & {
        readonly adjusters?: {
          /** Adjuster for Complex Rules. */
          readonly price?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          /** Adjuster for Complex Rules. */
          readonly weight?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
          readonly image_url?: string;
          readonly purchasing_disabled?: {
            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
            readonly status?: boolean;
            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
            readonly message?: string;
          };
        };
      }) & {
        /** The unique numeric ID of the value; increments sequentially. */
        readonly id?: number;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly OptionCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** The unique numerical ID of the option, increments sequentially. */
        readonly id?: number;
        /** The unique numerical ID of the product to which the option belongs. */
        readonly product_id?: number;
        /** The name of the option shown on the storefront. */
        readonly display_name?: string;
        /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
        readonly type?:
          | "radio_buttons"
          | "rectangles"
          | "dropdown"
          | "product_list"
          | "product_list_with_images"
          | "swatch";
        /** The values for option config can vary based on the Modifier created. */
        readonly config?: {
          /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
          readonly default_value?: string;
          /** (checkbox) Flag for setting the checkbox to be checked by default. */
          readonly checked_by_default?: boolean;
          /** (checkbox) Label displayed for the checkbox option. */
          readonly checkbox_label?: string;
          /** (date) Flag to limit the dates allowed to be entered on a date option. */
          readonly date_limited?: boolean;
          /** (date) The type of limit that is allowed to be entered on a date option. */
          readonly date_limit_mode?: "earliest" | "range" | "latest";
          /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_earliest_value?: string;
          /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_latest_value?: string;
          /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
          readonly file_types_mode?: "specific" | "all";
          /**
           * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
           *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
           *   `other` - Allows file types defined in the `file_types_other` array.
           */
          readonly file_types_supported?: readonly string[];
          /** (file) A list of other file types allowed with the file upload option. */
          readonly file_types_other?: readonly string[];
          /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
          readonly file_max_size?: number;
          /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
          readonly text_characters_limited?: boolean;
          /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
          readonly text_min_length?: number;
          /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
          readonly text_max_length?: number;
          /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
          readonly text_lines_limited?: boolean;
          /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
          readonly text_max_lines?: number;
          /** (numbers_only_text) Flag to limit the value of a number option. */
          readonly number_limited?: boolean;
          /** (numbers_only_text) The type of limit on values entered for a number option. */
          readonly number_limit_mode?: "lowest" | "highest" | "range";
          /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
          readonly number_lowest_value?: number;
          /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
          readonly number_highest_value?: number;
          /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
          readonly number_integers_only?: boolean;
          /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
          readonly product_list_adjusts_inventory?: boolean;
          /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
          readonly product_list_adjusts_pricing?: boolean;
          /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
          readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        /** Order in which the option is displayed on the storefront. */
        readonly sort_order?: number;
        readonly option_values?: readonly ({
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          /** The unique numeric ID of the value; increments sequentially. */
          readonly id?: number;
        })[];
        /** Publicly available image url */
        readonly image_url?: string;
      } & {
        /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
        readonly name?: string;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly OptionResponse: {
    readonly schema: {
      readonly data?: {
        /** The unique numerical ID of the option, increments sequentially. */
        readonly id?: number;
        /** The unique numerical ID of the product to which the option belongs. */
        readonly product_id?: number;
        /** The name of the option shown on the storefront. */
        readonly display_name?: string;
        /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
        readonly type?:
          | "radio_buttons"
          | "rectangles"
          | "dropdown"
          | "product_list"
          | "product_list_with_images"
          | "swatch";
        /** The values for option config can vary based on the Modifier created. */
        readonly config?: {
          /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
          readonly default_value?: string;
          /** (checkbox) Flag for setting the checkbox to be checked by default. */
          readonly checked_by_default?: boolean;
          /** (checkbox) Label displayed for the checkbox option. */
          readonly checkbox_label?: string;
          /** (date) Flag to limit the dates allowed to be entered on a date option. */
          readonly date_limited?: boolean;
          /** (date) The type of limit that is allowed to be entered on a date option. */
          readonly date_limit_mode?: "earliest" | "range" | "latest";
          /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_earliest_value?: string;
          /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
          readonly date_latest_value?: string;
          /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
          readonly file_types_mode?: "specific" | "all";
          /**
           * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
           *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
           *   `other` - Allows file types defined in the `file_types_other` array.
           */
          readonly file_types_supported?: readonly string[];
          /** (file) A list of other file types allowed with the file upload option. */
          readonly file_types_other?: readonly string[];
          /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
          readonly file_max_size?: number;
          /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
          readonly text_characters_limited?: boolean;
          /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
          readonly text_min_length?: number;
          /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
          readonly text_max_length?: number;
          /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
          readonly text_lines_limited?: boolean;
          /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
          readonly text_max_lines?: number;
          /** (numbers_only_text) Flag to limit the value of a number option. */
          readonly number_limited?: boolean;
          /** (numbers_only_text) The type of limit on values entered for a number option. */
          readonly number_limit_mode?: "lowest" | "highest" | "range";
          /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
          readonly number_lowest_value?: number;
          /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
          readonly number_highest_value?: number;
          /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
          readonly number_integers_only?: boolean;
          /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
          readonly product_list_adjusts_inventory?: boolean;
          /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
          readonly product_list_adjusts_pricing?: boolean;
          /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
          readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        /** Order in which the option is displayed on the storefront. */
        readonly sort_order?: number;
        readonly option_values?: readonly ({
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          /** The unique numeric ID of the value; increments sequentially. */
          readonly id?: number;
        })[];
        /** Publicly available image url */
        readonly image_url?: string;
      } & {
        /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
        readonly name?: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly OptionValueCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        readonly is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        readonly label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        readonly sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        readonly value_data?: { readonly [key: string]: any };
      } & {
        /** The unique numeric ID of the value; increments sequentially. */
        readonly id?: number;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly OptionValueResponse: {
    readonly schema: {
      readonly data?: {
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        readonly is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        readonly label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        readonly sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        readonly value_data?: { readonly [key: string]: any };
      } & {
        /** The unique numeric ID of the value; increments sequentially. */
        readonly id?: number;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ProductReviewCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /**
         * The title for the product review.
         * Required in /POST.
         */
        readonly title: string;
        /** The text for the product review. */
        readonly text?: string;
        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
        readonly status?: string;
        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
        readonly rating?: number;
        /** The email of the reviewer. Must be a valid email, or an empty string. */
        readonly email?: string;
        /** The name of the reviewer. */
        readonly name?: string;
        /** Date the product was reviewed. Required in /POST. */
        readonly date_reviewed: string;
      } & {
        /** The unique numeric ID of the product review; increments sequentially. */
        readonly id?: number;
        /** The unique numeric identifier for the product with which the review is associated. */
        readonly product_id?: number;
        /** Date the product review was created. */
        readonly date_created?: string;
        /** Date the product review was modified. */
        readonly date_modified?: string;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
  readonly ProductReviewResponse: {
    readonly schema: {
      /** A product review model. */
      readonly data?: {
        /**
         * The title for the product review.
         * Required in /POST.
         */
        readonly title: string;
        /** The text for the product review. */
        readonly text?: string;
        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
        readonly status?: string;
        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
        readonly rating?: number;
        /** The email of the reviewer. Must be a valid email, or an empty string. */
        readonly email?: string;
        /** The name of the reviewer. */
        readonly name?: string;
        /** Date the product was reviewed. Required in /POST. */
        readonly date_reviewed: string;
      } & {
        /** The unique numeric ID of the product review; increments sequentially. */
        readonly id?: number;
        /** The unique numeric identifier for the product with which the review is associated. */
        readonly product_id?: number;
        /** Date the product review was created. */
        readonly date_created?: string;
        /** Date the product review was modified. */
        readonly date_modified?: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly VariantCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** The cost price of the variant. Not affected by Price List prices. */
        readonly cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        readonly price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        readonly sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        readonly retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        readonly weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        readonly width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        readonly height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        readonly depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        readonly is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        readonly fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        readonly purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        readonly purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        readonly upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        readonly inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        readonly inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        readonly bin_picking_number?: string;
      } & {
        readonly id?: number;
        readonly product_id?: number;
        readonly sku?: string;
        /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
        readonly sku_id?: number;
        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
        readonly option_values?: readonly ({
          /** The name of the option. */
          readonly option_display_name?: string;
          /** The label of the option value. */
          readonly label?: string;
        } & {
          readonly id?: number;
          readonly option_id?: number;
        })[];
        /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
        readonly calculated_price?: number;
      })[];
      /** Data about the response, including pagination and collection totals. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly VariantResponse: {
    readonly schema: {
      readonly data?: {
        /** The cost price of the variant. Not affected by Price List prices. */
        readonly cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        readonly price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        readonly sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        readonly retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        readonly weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        readonly width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        readonly height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        readonly depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        readonly is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        readonly fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        readonly purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        readonly purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        readonly upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        readonly inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        readonly inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        readonly bin_picking_number?: string;
      } & {
        readonly id?: number;
        readonly product_id?: number;
        readonly sku?: string;
        /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
        readonly sku_id?: number;
        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
        readonly option_values?: readonly ({
          /** The name of the option. */
          readonly option_display_name?: string;
          /** The label of the option value. */
          readonly label?: string;
        } & {
          readonly id?: number;
          readonly option_id?: number;
        })[];
        /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
        readonly calculated_price?: number;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ProductVideoCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** The title for the video. If left blank, this will be filled in according to data on a host site. */
        readonly title?: string;
        /** The description for the video. If left blank, this will be filled in according to data on a host site. */
        readonly description?: string;
        /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
        readonly sort_order?: number;
        /** The video type (a short name of a host site). */
        readonly type?: "youtube";
      } & {
        /** The unique numeric ID of the product video; increments sequentially. */
        readonly id?: number;
        /** The ID of the video on a host site. */
        readonly video_id?: string;
        /** The unique numeric identifier for the product with which the image is associated. */
        readonly product_id?: number;
        /** Length of the video. This will be filled in according to data on a host site. */
        readonly length?: string;
      })[];
      /** Data about the response, including pagination and collection totals. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly ProductVideoResponse: {
    readonly schema: {
      /** A product video model. */
      readonly data?: {
        /** The title for the video. If left blank, this will be filled in according to data on a host site. */
        readonly title?: string;
        /** The description for the video. If left blank, this will be filled in according to data on a host site. */
        readonly description?: string;
        /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
        readonly sort_order?: number;
        /** The video type (a short name of a host site). */
        readonly type?: "youtube";
      } & {
        /** The unique numeric ID of the product video; increments sequentially. */
        readonly id?: number;
        /** The ID of the video on a host site. */
        readonly video_id?: string;
        /** The unique numeric identifier for the product with which the image is associated. */
        readonly product_id?: number;
        /** Length of the video. This will be filled in according to data on a host site. */
        readonly length?: string;
      };
      readonly meta?: definitions["metaEmpty_Full"];
    };
  };
  readonly CatalogSummaryResponse: {
    readonly schema: {
      /** Catalog Summary object describes a lightweight summary of the catalog. */
      readonly data?: {
        /** A count of all inventory items in the catalog. */
        readonly inventory_count?: number;
        /** Total value of store's inventory. */
        readonly inventory_value?: number;
        /** ID of the category containing the most products. */
        readonly primary_category_id?: number;
        /** Name of the category containing the most products. */
        readonly primary_category_name?: string;
        /** Total number of variants */
        readonly variant_count?: number;
        /** Highest priced variant */
        readonly highest_variant_price?: number;
        /** Average price of all variants */
        readonly average_variant_price?: number;
        /** Lowest priced variant in the store */
        readonly lowest_variant_price?: string;
        readonly oldest_variant_date?: string;
        readonly newest_variant_date?: string;
      };
      /** Empty meta object; may be used later. */
      readonly meta?: { readonly [key: string]: any };
    };
  };
  readonly CatalogVariantCollectionResponse: {
    readonly schema: {
      readonly data?: readonly ({
        /** The cost price of the variant. Not affected by Price List prices. */
        readonly cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        readonly price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        readonly sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        readonly retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        readonly weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        readonly width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        readonly height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        readonly depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        readonly is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        readonly fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        readonly purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        readonly purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        readonly upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        readonly inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        readonly inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        readonly bin_picking_number?: string;
      } & {
        readonly id?: number;
        readonly product_id?: number;
        readonly sku?: string;
        /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
        readonly sku_id?: number;
        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
        readonly option_values?: readonly ({
          /** The name of the option. */
          readonly option_display_name?: string;
          /** The label of the option value. */
          readonly label?: string;
        } & {
          readonly id?: number;
          readonly option_id?: number;
        })[];
        /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
        readonly calculated_price?: number;
      })[];
      readonly meta?: definitions["metaCollection_Full"];
    };
  };
}

export interface operations {
  /** Returns a list of **Products**. Optional filter parameters can be passed in. */
  readonly getProducts: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: parameters["FilterIdParam"];
        readonly "id:in"?: parameters["FilterIdIn"];
        readonly "id:not_in"?: parameters["FilterIdNotIn"];
        readonly "id:min"?: parameters["FilterIdMin"];
        readonly "id:max"?: parameters["FilterIdMax"];
        readonly "id:greater"?: parameters["FilterIdGreater"];
        readonly "id:less"?: parameters["FilterIdLess"];
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by sku. */
        readonly sku?: string;
        /** Filter items by upc. */
        readonly upc?: string;
        /** Filter items by price. */
        readonly price?: number;
        /** Filter items by weight. */
        readonly weight?: number;
        /** Filter items by condition. */
        readonly condition?: "new" | "used" | "refurbished";
        /** Filter items by brand_id. */
        readonly brand_id?: number;
        /** Filter items by `date_modified`. */
        readonly date_modified?: string;
        /** Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`. */
        readonly "date_modified:max"?: string;
        /** Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`. */
        readonly "date_modified:min"?: string;
        /** Filter items by date_last_imported. */
        readonly date_last_imported?: string;
        /** Filter items by date_last_imported. For example, `date_last_imported:max=2020-06-15`. */
        readonly "date_last_imported:max"?: string;
        /** Filter items by date_last_imported. For example, `date_last_imported:min=2018-06-15`. */
        readonly "date_last_imported:min"?: string;
        /** Filter items based on whether the product is currently visible on the storefront. */
        readonly is_visible?: boolean;
        /** Filter items by is_featured. `0` for true, `1` for false. */
        readonly is_featured?: 1 | 0;
        /** Filter items by is_free_shipping. */
        readonly is_free_shipping?: number;
        /** Filter items by inventory_level. */
        readonly inventory_level?: number;
        readonly "inventory_level:in"?: number;
        readonly "inventory_level:not_in"?: number;
        readonly "inventory_level:min"?: number;
        readonly "inventory_level:max"?: number;
        readonly "inventory_level:greater"?: number;
        readonly "inventory_level:less"?: number;
        /** Filter items by inventory_low. Values: 1, 0. */
        readonly inventory_low?: number;
        /** Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
        readonly out_of_stock?: number;
        /** Filter items by total_sold. */
        readonly total_sold?: number;
        /** Filter items by type. */
        readonly type?: "digital" | "physical";
        /**
         * Filter items by categories.
         *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        readonly categories?: number;
        /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        readonly keyword?: string;
        /** Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
        readonly keyword_context?: "shopper" | "merchant";
        /** Filter items by status. */
        readonly status?: number;
        /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
        readonly include?: readonly (
          | "variants"
          | "images"
          | "custom_fields"
          | "bulk_pricing_rules"
          | "primary_image"
          | "modifiers"
          | "options"
          | "videos"
        )[];
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: readonly string[];
        /** Filter items by availability. Values are: available, disabled, preorder. */
        readonly availability?: "available" | "disabled" | "preorder";
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Sort direction. Acceptable values are: `asc`, `desc`. */
        readonly direction?: "asc" | "desc";
        /** Field name to sort by. Note: Since `id` increments when new products are added, you can use that field to sort by product create date. */
        readonly sort?:
          | "id"
          | "name"
          | "sku"
          | "price"
          | "date_modified"
          | "date_last_imported"
          | "inventory_level"
          | "is_visible"
          | "total_sold";
        /** Filter items by categories. Use for products in multiple categories. For example, `categories:in=12`. */
        readonly "categories:in"?: number;
      };
    };
    readonly responses: {
      readonly 200: responses["ProductCollectionResponse"];
    };
  };
  /**
   * Updates products in batches. At the time of writing, batches are limited to 10 products.
   *
   * **Required Fields**
   * * `id` - product `id` is required for batch updates to products.
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   */
  readonly updateProducts: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly body: {
        readonly products?: definitions["product_Put_Collection"];
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: parameters["FilterIncludeFieldsParam"];
      };
    };
    readonly responses: {
      readonly 200: responses["ProductCollectionResponse"];
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** `Product` was in conflict with another product. This is the result of duplicate unique values such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      readonly 409: {
        readonly schema: definitions["errorResponse_409"];
      };
      /** 413 Request Entity Too Large */
      readonly 413: {
        readonly schema: definitions["error_Base"];
      };
      /** `Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: definitions["errorResponse_422"];
      };
    };
  };
  /**
   * Creates a *Product*. Only one product can be created at a time.
   *
   * **Required Fields:**
   * - `name`
   * - `type`
   * - `weight`
   * - `price`
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   *
   * **Usage Notes**
   * * `POST` requests to `/products` accepts a single `video` object; to send an array of video objects, see: `/products/{product_id}/videos`.
   */
  readonly createProduct: {
    readonly parameters: {
      readonly body: {
        readonly product: definitions["product_Post"];
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: parameters["FilterIncludeFieldsParam"];
      };
    };
    readonly responses: {
      readonly 200: responses["ProductResponse"];
      /** `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /**
   * To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
   *
   * **Example**:
   * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
   */
  readonly deleteProducts: {
    readonly parameters: {
      readonly query: {
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by sku. */
        readonly sku?: string;
        /** Filter items by price. */
        readonly price?: number;
        /** Filter items by weight. */
        readonly weight?: number;
        /** Filter items by condition. */
        readonly condition?: "new" | "used" | "refurbished";
        /** Filter items by brand_id. */
        readonly brand_id?: number;
        /** Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
        readonly date_modified?: string;
        /** Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        readonly date_last_imported?: string;
        /** Filter items by if visible on the storefront. */
        readonly is_visible?: boolean;
        /** Filter items by is_featured. */
        readonly is_featured?: number;
        /** Filter items by inventory_level. */
        readonly inventory_level?: number;
        /** Filter items by total_sold. */
        readonly total_sold?: number;
        /** Filter items by type: `physical` or `digital`. */
        readonly type?: "digital" | "physical";
        /**
         * Filter items by categories.
         *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        readonly categories?: number;
        /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        readonly keyword?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a single *Product*. Optional parameters can be passed in. */
  readonly getProductById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
        readonly include?: readonly (
          | "variants"
          | "images"
          | "custom_fields"
          | "bulk_pricing_rules"
          | "primary_image"
          | "modifiers"
          | "options"
          | "videos"
        )[];
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: readonly string[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["product_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Product*.
   *
   * **Read-Only Fields**
   * - id
   * - date_created
   * - date_modified
   * - calculated_price
   * - base_variant_id
   */
  readonly updateProduct: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly product: definitions["product_Put"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: parameters["FilterIncludeFieldsParam"];
      };
    };
    readonly responses: {
      readonly 200: responses["ProductResponse"];
      /** Created */
      readonly 201: {
        readonly schema: { readonly [key: string]: any };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** `Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Product*. */
  readonly deleteProductById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Product Images*. Optional parameters can be passed in. */
  readonly getProductImages: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: readonly string[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["productImage_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** There are not any images on this product. */
      readonly 204: never;
      /** The product ID does not exist. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Product Image*.
   *
   *  **Required Fields**
   * - `image_file`, or
   * - `image_url`
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - For file uploads, use the `multipart/form-data` media type
   * - Only one image at a time can be created
   * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
   */
  readonly createProductImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly productImage: {
          /** The unique numeric ID of the image; increments sequentially. */
          readonly id?: number;
          /** The unique numeric identifier for the product with which the image is associated. */
          readonly product_id?: number;
          /**
           * The local path to the original image file uploaded to BigCommerce.
           * A `multipart/form-data` media type.
           */
          readonly image_file?: string;
          /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
          readonly url_zoom?: string;
          /** The standard URL for this image. By default, this is used for product-page images. */
          readonly url_standard?: string;
          /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          readonly url_thumbnail?: string;
          /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          readonly url_tiny?: string;
          /** The date on which the product image was modified. */
          readonly date_modified?: string;
          /** Flag for identifying whether the image is used as the product's thumbnail. */
          readonly is_thumbnail?: boolean;
          /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
          readonly sort_order?: number;
          /** The description for the image. */
          readonly description?: string;
        } & {
          /** Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          readonly image_url?: string;
          /** Must be sent as a multipart/form-data field in the request body. */
          readonly image_file?: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The unique numeric ID of the image; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the image is associated. */
            readonly product_id?: number;
            /**
             * The local path to the original image file uploaded to BigCommerce.
             *
             * A `multipart/form-data` media type.
             */
            readonly image_file?: string;
            /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            readonly url_zoom?: string;
            /** The standard URL for this image. By default, this is used for product-page images. */
            readonly url_standard?: string;
            /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            readonly url_thumbnail?: string;
            /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            readonly url_tiny?: string;
            /** The date on which the product image was modified. */
            readonly date_modified?: string;
            /** Flag for identifying whether the image is used as the product's thumbnail. */
            readonly is_thumbnail?: boolean;
            /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
            readonly sort_order?: number;
            /** The description for the image. */
            readonly description?: string;
          } & {
            /** The unique numeric ID of the image; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the image is associated. */
            readonly product_id?: number;
            /**
             * The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
             * A `multipart/form-data` media type.
             */
            readonly image_file?: string;
            /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            readonly url_zoom?: string;
            /** The standard URL for this image. By default, this is used for product-page images. */
            readonly url_standard?: string;
            /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            readonly url_thumbnail?: string;
            /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            readonly url_tiny?: string;
            /** The date on which the product image was modified. */
            readonly date_modified?: string;
            /**
             * Publically available URL.
             * Use the image_url when creating a product.
             */
            readonly image_url?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The product ID does not exist. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns a single *Product Image*. Optional parameters can be passed in. */
  readonly getProductImageById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Image` that is being operated on. */
        readonly image_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productImage_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Product Image*.
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - For file uploads, send a POST request using the `multipart/form-data` media type
   */
  readonly updateProductImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Image` that is being operated on. */
        readonly image_id: number;
      };
      readonly body: {
        readonly productImage: {
          /** The unique numeric ID of the image; increments sequentially. */
          readonly id?: number;
          /** The unique numeric identifier for the product with which the image is associated. */
          readonly product_id?: number;
          /** The local path to the original image file uploaded to BigCommerce. */
          readonly image_file?: string;
          /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
          readonly url_zoom?: string;
          /** The standard URL for this image. By default, this is used for product-page images. */
          readonly url_standard?: string;
          /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          readonly url_thumbnail?: string;
          /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          readonly url_tiny?: string;
          /** The date on which the product image was modified. */
          readonly date_modified?: string;
          /** Flag for identifying whether the image is used as the product's thumbnail. */
          readonly is_thumbnail?: boolean;
          /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
          readonly sort_order?: number;
          /** The description for the image. */
          readonly description?: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The unique numeric ID of the image; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the image is associated. */
            readonly product_id?: number;
            /** The local path to the original image file uploaded to BigCommerce. */
            readonly image_file?: string;
            /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            readonly url_zoom?: string;
            /** The standard URL for this image. By default, this is used for product-page images. */
            readonly url_standard?: string;
            /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            readonly url_thumbnail?: string;
            /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            readonly url_tiny?: string;
            /** The date on which the product image was modified. */
            readonly date_modified?: string;
            /** Flag for identifying whether the image is used as the product's thumbnail. */
            readonly is_thumbnail?: boolean;
            /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
            readonly sort_order?: number;
            /** The description for the image. */
            readonly description?: string;
          } & {
            /** The unique numeric ID of the image; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the image is associated. */
            readonly product_id?: number;
            /** The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
            readonly image_file?: string;
            /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            readonly url_zoom?: string;
            /** The standard URL for this image. By default, this is used for product-page images. */
            readonly url_standard?: string;
            /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            readonly url_thumbnail?: string;
            /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            readonly url_tiny?: string;
            /** The date on which the product image was modified. */
            readonly date_modified?: string;
            /**
             * Publically available URL.
             * Use the image_url when creating a product.
             */
            readonly image_url?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a *Product Image*. */
  readonly deleteProductImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Image` that is being operated on. */
        readonly image_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Product Videos*. Optional parameters can be passed in. */
  readonly getProductVideos: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: parameters["PageParam"];
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: parameters["LimitParam"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["productVideo_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a *Product Video*.
   *
   * **Required Fields**
   * * video_id - Example: https://www.youtube.com/watch?v=`R12345677`
   *
   * **Read-Only Fields**
   * * id
   *
   * Publicly accessible URLs are valid parameters.
   * Videos must be loaded through YouTube at this time.
   */
  readonly createProductVideo: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly productVideo: {
          /** The title for the video. If left blank, this will be filled in according to data on a host site. */
          readonly title?: string;
          /** The description for the video. If left blank, this will be filled in according to data on a host site. */
          readonly description?: string;
          /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
          readonly sort_order?: number;
          /** The video type (a short name of a host site). */
          readonly type?: "youtube";
        } & {
          /** The ID of the video on a host site. */
          readonly video_id?: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** A product video model. */
          readonly data?: {
            /** The title for the video. If left blank, this will be filled in according to data on a host site. */
            readonly title?: string;
            /** The description for the video. If left blank, this will be filled in according to data on a host site. */
            readonly description?: string;
            /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
            readonly sort_order?: number;
            /** The video type (a short name of a host site). */
            readonly type?: "youtube";
          } & {
            /** The unique numeric ID of the product video; increments sequentially. */
            readonly id?: number;
            /** The ID of the video on a host site. */
            readonly video_id?: string;
            /** The unique numeric identifier for the product with which the image is associated. */
            readonly product_id?: number;
            /** Length of the video. This will be filled in according to data on a host site. */
            readonly length?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns a single *Product Video*. Optional parameters can be passed in. */
  readonly getProductVideoById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The BigCommerce ID of the `Video` */
        readonly id: parameters["VideoIdParam"];
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productVideo_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Product Video.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  readonly updateProductVideo: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The BigCommerce ID of the `Video` */
        readonly id: parameters["VideoIdParam"];
      };
      readonly body: {
        readonly productVideo: {
          /** The title for the video. If left blank, this will be filled in according to data on a host site. */
          readonly title?: string;
          /** The description for the video. If left blank, this will be filled in according to data on a host site. */
          readonly description?: string;
          /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
          readonly sort_order?: number;
          /** The video type (a short name of a host site). */
          readonly type?: "youtube";
        } & {
          /** The unique numeric ID of the product video; increments sequentially. */
          readonly id?: number;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** A product video model. */
          readonly data?: {
            /** The title for the video. If left blank, this will be filled in according to data on a host site. */
            readonly title?: string;
            /** The description for the video. If left blank, this will be filled in according to data on a host site. */
            readonly description?: string;
            /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
            readonly sort_order?: number;
            /** The video type (a short name of a host site). */
            readonly type?: "youtube";
          } & {
            /** The unique numeric ID of the product video; increments sequentially. */
            readonly id?: number;
            /** The ID of the video on a host site. */
            readonly video_id?: string;
            /** The unique numeric identifier for the product with which the image is associated. */
            readonly product_id?: number;
            /** Length of the video. This will be filled in according to data on a host site. */
            readonly length?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a *Product Video*. */
  readonly deleteProductVideo: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The BigCommerce ID of the `Video` */
        readonly id: parameters["VideoIdParam"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of product *Variants*. Optional parameters can be passed in. */
  readonly getVariantsByProductId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["productVariant_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Product Variant*.
   *
   * **Required Fields**
   * * sku
   * * option_values
   *
   * **Read-Only Fields**
   * * id
   *
   * Variants need to be created one at a time using this endpoint. To use a variant array and create products and variants in the same call use the [Create Products](/api-reference/catalog/catalog-api/products/createproduct) during the initial product creation.
   */
  readonly createVariant: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly Variant: definitions["productVariant_Post"];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productVariant_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns a single product *Variant*. Optional parameters can be passed in. */
  readonly getVariantById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productVariant_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Updates a product *Variant*. */
  readonly updateVariant: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly body: {
        readonly Variant: definitions["productVariant_Put"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productVariant_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a product *Variant*. */
  readonly deleteVariantById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of product variant *Metafields*. Optional parameters can be passed in. */
  readonly getVariantMetafieldsByProductIdAndVariantId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Filter based on a metafield's key. */
        readonly key?: string;
        /** Filter based on a metafield's namespace. */
        readonly namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly {
            /** Unique ID of the *Metafield*. Read-Only. */
            readonly id?: number;
            /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
            readonly permission_set:
              | "app_only"
              | "read"
              | "write"
              | "read_and_sf_access"
              | "write_and_sf_access";
            /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
            readonly namespace: string;
            /** The name of the field, for example: `location_id`, `color`. Required for POST. */
            readonly key: string;
            /** The value of the field, for example: `1`, `blue`. Required for POST. */
            readonly value: string;
            /** Description for the metafields. */
            readonly description?: string;
            /** The type of resource with which the metafield is associated. */
            readonly resource_type?:
              | "category"
              | "brand"
              | "product"
              | "variant";
            /** The ID for the resource with which the metafield is associated. */
            readonly resource_id?: number;
            /** Date and time of the metafield's creation. Read-Only. */
            readonly created_at?: string;
            /** Date and time when the metafield was last updated. Read-Only. */
            readonly updated_at?: string;
          }[];
          readonly meta?: definitions["categoriesTree_Resp"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a product variant *Metafield*.
   *
   * **Required Fields:**
   * * permission_set
   * * namespace
   * * key
   * * value
   *
   * **Read-Only Fields**
   * * id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  readonly createVariantMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly body: {
        readonly Metafield: {
          /** Unique ID of the *Metafield*. Read-Only. */
          readonly id?: number;
          /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
          readonly permission_set:
            | "app_only"
            | "read"
            | "write"
            | "read_and_sf_access"
            | "write_and_sf_access";
          /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
          readonly namespace: string;
          /** The name of the field, for example: `location_id`, `color`. Required for POST. */
          readonly key: string;
          /** The value of the field, for example: `1`, `blue`. Required for POST. */
          readonly value: string;
          /** Description for the metafields. */
          readonly description?: string;
          /** The type of resource with which the metafield is associated. */
          readonly resource_type?: "category" | "brand" | "product" | "variant";
          /** The ID for the resource with which the metafield is associated. */
          readonly resource_id?: number;
          /** Date and time of the metafield's creation. Read-Only. */
          readonly created_at?: string;
          /** Date and time when the metafield was last updated. Read-Only. */
          readonly updated_at?: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Metafield properties. */
          readonly data?: {
            /** Unique ID of the *Metafield*. Read-Only. */
            readonly id?: number;
            /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
            readonly permission_set:
              | "app_only"
              | "read"
              | "write"
              | "read_and_sf_access"
              | "write_and_sf_access";
            /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
            readonly namespace: string;
            /** The name of the field, for example: `location_id`, `color`. Required for POST. */
            readonly key: string;
            /** The value of the field, for example: `1`, `blue`. Required for POST. */
            readonly value: string;
            /** Description for the metafields. */
            readonly description?: string;
            /** The type of resource with which the metafield is associated. */
            readonly resource_type?:
              | "category"
              | "brand"
              | "product"
              | "variant";
            /** The ID for the resource with which the metafield is associated. */
            readonly resource_id?: number;
            /** Date and time of the metafield's creation. Read-Only. */
            readonly created_at?: string;
            /** Date and time when the metafield was last updated. Read-Only. */
            readonly updated_at?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique-key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single product variant *Metafield*. Optional parameters can be passed in. */
  readonly getVariantMetafieldByProductIdAndVariantId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a product variant *Metafield*.
   *
   * **Required Fields:**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   */
  readonly updateVariantMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Put"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a product variant *Metafield*. */
  readonly deleteVariantMetafieldById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /**
   * Creates a *Variant Image*.
   *
   * The image will show on the storefront when the value is selected.
   *
   *  **Required Fields**
   * - image_file: Form posts. Files larger than 1 MB are not accepted
   * - image_url: Any publicly available URL
   */
  readonly createVariantImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly body: {
        readonly body?: {
          /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
          readonly image_url?: string;
        };
      };
    };
    readonly responses: {
      /** `image_url` is returned for both `image_file` and `image_url`. */
      readonly 200: {
        readonly schema: {
          /** An object containing a publicly accessible image URL, or a form post that contains an image file. */
          readonly data?: {
            /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
            readonly image_url?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** Image was not valid. This is the result of a missing `image_file` field or of an incorrect file type. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** Returns for an `image_file` larger than 1 MB. */
      readonly 500: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a list of product *Variant Options*. Optional parameters can be passed in. */
  readonly getOptions: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["productOption_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Variant Option*.
   *
   * **Required Fields**
   * * display_name
   * * type
   * * option_values
   *
   * **Read-Only Fields**
   * * id
   *
   * **Notes**
   *
   * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
   * * There are several examples listed below that create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
   * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
   * * If more than one variant needs to be created use the [Create a Product](/api-reference/catalog/catalog-api/products/createproduct) endpoint.
   */
  readonly createOption: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly Option: {
          /** The unique numerical ID of the option, increments sequentially. */
          readonly id?: number;
          /** The unique numerical ID of the product to which the option belongs. */
          readonly product_id?: number;
          /** The name of the option shown on the storefront. */
          readonly display_name?: string;
          /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
          readonly type?:
            | "radio_buttons"
            | "rectangles"
            | "dropdown"
            | "product_list"
            | "product_list_with_images"
            | "swatch";
          /** The values for option config can vary based on the Modifier created. */
          readonly config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            readonly default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            readonly checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            readonly checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            readonly date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            readonly file_types_mode?: "specific" | "all";
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            readonly file_types_supported?: readonly string[];
            /** (file) A list of other file types allowed with the file upload option. */
            readonly file_types_other?: readonly string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            readonly file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            readonly text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            readonly text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            readonly text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            readonly text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            readonly text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            readonly number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            readonly number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            readonly number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            readonly number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            readonly product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            readonly product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
          };
          /** Order in which the option is displayed on the storefront. */
          readonly sort_order?: number;
          readonly option_values?: readonly ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          })[];
          /** Publicly available image url */
          readonly image_url?: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["OptionResponse"];
      /** Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Variant Option*. Optional parameters can be passed in. */
  readonly getOptionById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productOption_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Variant Option*.
   *
   * **Read-Only Fields**
   * * id
   */
  readonly updateOption: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
      readonly body: {
        readonly option: {
          /** The unique numerical ID of the option, increments sequentially. */
          readonly id?: number;
          /** The unique numerical ID of the product to which the option belongs. */
          readonly product_id?: number;
          /** The name of the option shown on the storefront. */
          readonly display_name?: string;
          /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
          readonly type?:
            | "radio_buttons"
            | "rectangles"
            | "dropdown"
            | "product_list"
            | "product_list_with_images"
            | "swatch";
          /** The values for option config can vary based on the Modifier created. */
          readonly config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            readonly default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            readonly checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            readonly checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            readonly date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            readonly file_types_mode?: "specific" | "all";
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            readonly file_types_supported?: readonly string[];
            /** (file) A list of other file types allowed with the file upload option. */
            readonly file_types_other?: readonly string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            readonly file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            readonly text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            readonly text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            readonly text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            readonly text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            readonly text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            readonly number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            readonly number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            readonly number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            readonly number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            readonly product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            readonly product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
          };
          /** Order in which the option is displayed on the storefront. */
          readonly sort_order?: number;
          readonly option_values?: readonly ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          })[];
          /** Publicly available image url */
          readonly image_url?: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The unique numerical ID of the option, increments sequentially. */
            readonly id?: number;
            /** The unique numerical ID of the product to which the option belongs. */
            readonly product_id?: number;
            /** The name of the option shown on the storefront. */
            readonly display_name?: string;
            /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
            readonly type?:
              | "radio_buttons"
              | "rectangles"
              | "dropdown"
              | "product_list"
              | "product_list_with_images"
              | "swatch";
            /** The values for option config can vary based on the Modifier created. */
            readonly config?: {
              /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              readonly default_value?: string;
              /** (checkbox) Flag for setting the checkbox to be checked by default. */
              readonly checked_by_default?: boolean;
              /** (checkbox) Label displayed for the checkbox option. */
              readonly checkbox_label?: string;
              /** (date) Flag to limit the dates allowed to be entered on a date option. */
              readonly date_limited?: boolean;
              /** (date) The type of limit that is allowed to be entered on a date option. */
              readonly date_limit_mode?: "earliest" | "range" | "latest";
              /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
              readonly date_earliest_value?: string;
              /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
              readonly date_latest_value?: string;
              /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
              readonly file_types_mode?: "specific" | "all";
              /**
               * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              readonly file_types_supported?: readonly string[];
              /** (file) A list of other file types allowed with the file upload option. */
              readonly file_types_other?: readonly string[];
              /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
              readonly file_max_size?: number;
              /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              readonly text_characters_limited?: boolean;
              /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
              readonly text_min_length?: number;
              /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
              readonly text_max_length?: number;
              /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
              readonly text_lines_limited?: boolean;
              /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
              readonly text_max_lines?: number;
              /** (numbers_only_text) Flag to limit the value of a number option. */
              readonly number_limited?: boolean;
              /** (numbers_only_text) The type of limit on values entered for a number option. */
              readonly number_limit_mode?: "lowest" | "highest" | "range";
              /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
              readonly number_lowest_value?: number;
              /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              readonly number_highest_value?: number;
              /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              readonly number_integers_only?: boolean;
              /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              readonly product_list_adjusts_inventory?: boolean;
              /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              readonly product_list_adjusts_pricing?: boolean;
              /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
              readonly product_list_shipping_calc?:
                | "none"
                | "weight"
                | "package";
            };
            /** Order in which the option is displayed on the storefront. */
            readonly sort_order?: number;
            readonly option_values?: readonly ({
              /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              readonly is_default?: boolean;
              /** The text display identifying the value on the storefront. Required in a /POST. */
              readonly label: string;
              /** The order in which the value will be displayed on the product page. Required in a /POST. */
              readonly sort_order: number;
              /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              readonly value_data?: { readonly [key: string]: any };
            } & {
              /** The unique numeric ID of the value; increments sequentially. */
              readonly id?: number;
            })[];
            /** Publicly available image url */
            readonly image_url?: string;
          } & {
            /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
            readonly name?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Option` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Variant Option*. */
  readonly deleteOptionById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of all *Variant Option Values*. Optional parameters can be passed in. */
  readonly getOptionValues: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: parameters["PageParam"];
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: parameters["LimitParam"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          })[];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a *Variant Option Value*.
   *
   * **Required Fields**
   * * label
   * * sort_order
   *
   * **Read-Only Fields**
   * * id
   */
  readonly createOptionValue: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
      };
      readonly body: {
        readonly OptionValue: {
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Variant Option Value*. Optional parameters can be passed in. */
  readonly getOptionValueById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Variant Option Value*.
   *
   * **Read-Only Fields**
   * * id
   */
  readonly updateOptionValue: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
      readonly body: {
        /** A BigCommerce `OptionValue` object. */
        readonly OptionValue: {
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          /** The unique numeric ID of the value; increments sequentially. */
          readonly id?: number;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Variant Option Value*. */
  readonly deleteOptionValueById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Option`. */
        readonly option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
  readonly getModifiers: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["productModifier_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a *Product Modifier*.
   *
   * **Required Fields**
   * * `required`
   * * `display_name`
   * * `type`
   *
   * **Read-Only Fields**
   * * `id`
   */
  readonly createModifier: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly Modifier: {
          /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
          readonly type:
            | "date"
            | "checkbox"
            | "file"
            | "text"
            | "multi_line_text"
            | "numbers_only_text"
            | "radio_buttons"
            | "rectangles"
            | "dropdown"
            | "product_list"
            | "product_list_with_images"
            | "swatch";
          /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
          readonly required: boolean;
          /** The order the modifiers display on the product detail page. */
          readonly sort_order?: number;
          /** The values for option config can vary based on the Modifier created. */
          readonly config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            readonly default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            readonly checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            readonly checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            readonly date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            readonly file_types_mode?: "specific" | "all";
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            readonly file_types_supported?: readonly string[];
            /** (file) A list of other file types allowed with the file upload option. */
            readonly file_types_other?: readonly string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            readonly file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            readonly text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            readonly text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            readonly text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            readonly text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            readonly text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            readonly number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            readonly number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            readonly number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            readonly number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            readonly product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            readonly product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
          };
          readonly option_values?: readonly (({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            readonly adjusters?: {
              /** Adjuster for Complex Rules. */
              readonly price?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** Adjuster for Complex Rules. */
              readonly weight?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
              readonly image_url?: string;
              readonly purchasing_disabled?: {
                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                readonly status?: boolean;
                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                readonly message?: string;
              };
            };
          }) & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          })[];
        } & {
          /** The name of the option shown on the storefront. */
          readonly display_name: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Product Modifier */
          readonly data?: {
            /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
            readonly type:
              | "date"
              | "checkbox"
              | "file"
              | "text"
              | "multi_line_text"
              | "numbers_only_text"
              | "radio_buttons"
              | "rectangles"
              | "dropdown"
              | "product_list"
              | "product_list_with_images"
              | "swatch";
            /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
            readonly required: boolean;
            /** The order the modifiers display on the product detail page. */
            readonly sort_order?: number;
            /** The values for option config can vary based on the Modifier created. */
            readonly config?: {
              /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              readonly default_value?: string;
              /** (checkbox) Flag for setting the checkbox to be checked by default. */
              readonly checked_by_default?: boolean;
              /** (checkbox) Label displayed for the checkbox option. */
              readonly checkbox_label?: string;
              /** (date) Flag to limit the dates allowed to be entered on a date option. */
              readonly date_limited?: boolean;
              /** (date) The type of limit that is allowed to be entered on a date option. */
              readonly date_limit_mode?: "earliest" | "range" | "latest";
              /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
              readonly date_earliest_value?: string;
              /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
              readonly date_latest_value?: string;
              /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
              readonly file_types_mode?: "specific" | "all";
              /**
               * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              readonly file_types_supported?: readonly string[];
              /** (file) A list of other file types allowed with the file upload option. */
              readonly file_types_other?: readonly string[];
              /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
              readonly file_max_size?: number;
              /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              readonly text_characters_limited?: boolean;
              /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
              readonly text_min_length?: number;
              /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
              readonly text_max_length?: number;
              /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
              readonly text_lines_limited?: boolean;
              /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
              readonly text_max_lines?: number;
              /** (numbers_only_text) Flag to limit the value of a number option. */
              readonly number_limited?: boolean;
              /** (numbers_only_text) The type of limit on values entered for a number option. */
              readonly number_limit_mode?: "lowest" | "highest" | "range";
              /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
              readonly number_lowest_value?: number;
              /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              readonly number_highest_value?: number;
              /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              readonly number_integers_only?: boolean;
              /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              readonly product_list_adjusts_inventory?: boolean;
              /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              readonly product_list_adjusts_pricing?: boolean;
              /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
              readonly product_list_shipping_calc?:
                | "none"
                | "weight"
                | "package";
            };
            readonly option_values?: readonly (({
              /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              readonly is_default?: boolean;
              /** The text display identifying the value on the storefront. Required in a /POST. */
              readonly label: string;
              /** The order in which the value will be displayed on the product page. Required in a /POST. */
              readonly sort_order: number;
              /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              readonly value_data?: { readonly [key: string]: any };
            } & {
              readonly adjusters?: {
                /** Adjuster for Complex Rules. */
                readonly price?: {
                  /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster?: "relative" | "percentage";
                  /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster_value?: number;
                };
                /** Adjuster for Complex Rules. */
                readonly weight?: {
                  /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster?: "relative" | "percentage";
                  /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster_value?: number;
                };
                /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                readonly image_url?: string;
                readonly purchasing_disabled?: {
                  /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                  readonly status?: boolean;
                  /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                  readonly message?: string;
                };
              };
            }) & {
              /** The unique numeric ID of the value; increments sequentially. */
              readonly id?: number;
            })[];
          } & {
            /** The unique numeric ID of the modifier; increments sequentially. */
            readonly id?: number;
            /** The unique numeric ID of the product to which the option belongs. */
            readonly product_id?: number;
            /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
            readonly name?: string;
            /** The name of the option shown on the storefront. */
            readonly display_name?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Modifier` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
  readonly getModifierById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productModifier_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Updates a *Product Modifier*. */
  readonly updateModifier: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
      readonly body: {
        readonly modifier: {
          /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
          readonly type:
            | "date"
            | "checkbox"
            | "file"
            | "text"
            | "multi_line_text"
            | "numbers_only_text"
            | "radio_buttons"
            | "rectangles"
            | "dropdown"
            | "product_list"
            | "product_list_with_images"
            | "swatch";
          /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
          readonly required: boolean;
          /** The order the modifiers display on the product detail page. */
          readonly sort_order?: number;
          /** The values for option config can vary based on the Modifier created. */
          readonly config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            readonly default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            readonly checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            readonly checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            readonly date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            readonly date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            readonly file_types_mode?: "specific" | "all";
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            readonly file_types_supported?: readonly string[];
            /** (file) A list of other file types allowed with the file upload option. */
            readonly file_types_other?: readonly string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            readonly file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            readonly text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            readonly text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            readonly text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            readonly text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            readonly text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            readonly number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            readonly number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            readonly number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            readonly number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            readonly product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            readonly product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
          };
          readonly option_values?: readonly (({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            readonly adjusters?: {
              /** Adjuster for Complex Rules. */
              readonly price?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** Adjuster for Complex Rules. */
              readonly weight?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
              readonly image_url?: string;
              readonly purchasing_disabled?: {
                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                readonly status?: boolean;
                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                readonly message?: string;
              };
            };
          }) & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          })[];
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Product Modifier */
          readonly data?: {
            /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
            readonly type:
              | "date"
              | "checkbox"
              | "file"
              | "text"
              | "multi_line_text"
              | "numbers_only_text"
              | "radio_buttons"
              | "rectangles"
              | "dropdown"
              | "product_list"
              | "product_list_with_images"
              | "swatch";
            /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
            readonly required: boolean;
            /** The order the modifiers display on the product detail page. */
            readonly sort_order?: number;
            /** The values for option config can vary based on the Modifier created. */
            readonly config?: {
              /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              readonly default_value?: string;
              /** (checkbox) Flag for setting the checkbox to be checked by default. */
              readonly checked_by_default?: boolean;
              /** (checkbox) Label displayed for the checkbox option. */
              readonly checkbox_label?: string;
              /** (date) Flag to limit the dates allowed to be entered on a date option. */
              readonly date_limited?: boolean;
              /** (date) The type of limit that is allowed to be entered on a date option. */
              readonly date_limit_mode?: "earliest" | "range" | "latest";
              /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
              readonly date_earliest_value?: string;
              /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
              readonly date_latest_value?: string;
              /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
              readonly file_types_mode?: "specific" | "all";
              /**
               * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              readonly file_types_supported?: readonly string[];
              /** (file) A list of other file types allowed with the file upload option. */
              readonly file_types_other?: readonly string[];
              /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
              readonly file_max_size?: number;
              /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              readonly text_characters_limited?: boolean;
              /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
              readonly text_min_length?: number;
              /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
              readonly text_max_length?: number;
              /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
              readonly text_lines_limited?: boolean;
              /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
              readonly text_max_lines?: number;
              /** (numbers_only_text) Flag to limit the value of a number option. */
              readonly number_limited?: boolean;
              /** (numbers_only_text) The type of limit on values entered for a number option. */
              readonly number_limit_mode?: "lowest" | "highest" | "range";
              /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
              readonly number_lowest_value?: number;
              /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              readonly number_highest_value?: number;
              /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              readonly number_integers_only?: boolean;
              /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              readonly product_list_adjusts_inventory?: boolean;
              /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              readonly product_list_adjusts_pricing?: boolean;
              /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
              readonly product_list_shipping_calc?:
                | "none"
                | "weight"
                | "package";
            };
            readonly option_values?: readonly (({
              /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              readonly is_default?: boolean;
              /** The text display identifying the value on the storefront. Required in a /POST. */
              readonly label: string;
              /** The order in which the value will be displayed on the product page. Required in a /POST. */
              readonly sort_order: number;
              /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              readonly value_data?: { readonly [key: string]: any };
            } & {
              readonly adjusters?: {
                /** Adjuster for Complex Rules. */
                readonly price?: {
                  /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster?: "relative" | "percentage";
                  /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster_value?: number;
                };
                /** Adjuster for Complex Rules. */
                readonly weight?: {
                  /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster?: "relative" | "percentage";
                  /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  readonly adjuster_value?: number;
                };
                /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                readonly image_url?: string;
                readonly purchasing_disabled?: {
                  /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                  readonly status?: boolean;
                  /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                  readonly message?: string;
                };
              };
            }) & {
              /** The unique numeric ID of the value; increments sequentially. */
              readonly id?: number;
            })[];
          } & {
            /** The unique numeric ID of the modifier; increments sequentially. */
            readonly id?: number;
            /** The unique numeric ID of the product to which the option belongs. */
            readonly product_id?: number;
            /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
            readonly name?: string;
            /** The name of the option shown on the storefront. */
            readonly display_name?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Product Modifier*. */
  readonly deleteModifierById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
  readonly getModifierValues: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: parameters["PageParam"];
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: parameters["LimitParam"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["productModifierOptionValue_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a *Modifier Value*.
   *
   * **Required Fields**
   * * label
   * * sort_order
   *
   * **Read-Only Fields**
   * * id
   */
  readonly createModifierValue: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
      };
      readonly body: {
        readonly ModifierValue: {
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          readonly adjusters?: {
            /** Adjuster for Complex Rules. */
            readonly price?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** Adjuster for Complex Rules. */
            readonly weight?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
            readonly image_url?: string;
            readonly purchasing_disabled?: {
              /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
              readonly status?: boolean;
              /** The message displayed on the storefront when the purchasing disabled status is `true`. */
              readonly message?: string;
            };
          };
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Part of Modifier Value Response */
          readonly data?: ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            readonly adjusters?: {
              /** Adjuster for Complex Rules. */
              readonly price?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** Adjuster for Complex Rules. */
              readonly weight?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
              readonly image_url?: string;
              readonly purchasing_disabled?: {
                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                readonly status?: boolean;
                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                readonly message?: string;
              };
            };
          }) & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
  readonly getModifierValueById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productModifierOptionValue_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Modifier Value*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  readonly updateModifierValue: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
      readonly body: {
        readonly ModifierValue: ({
          /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          readonly is_default?: boolean;
          /** The text display identifying the value on the storefront. Required in a /POST. */
          readonly label: string;
          /** The order in which the value will be displayed on the product page. Required in a /POST. */
          readonly sort_order: number;
          /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          readonly value_data?: { readonly [key: string]: any };
        } & {
          readonly adjusters?: {
            /** Adjuster for Complex Rules. */
            readonly price?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** Adjuster for Complex Rules. */
            readonly weight?: {
              /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster?: "relative" | "percentage";
              /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              readonly adjuster_value?: number;
            };
            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
            readonly image_url?: string;
            readonly purchasing_disabled?: {
              /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
              readonly status?: boolean;
              /** The message displayed on the storefront when the purchasing disabled status is `true`. */
              readonly message?: string;
            };
          };
        }) & {
          /** The unique numeric ID of the value; increments sequentially. */
          readonly id?: number;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Part of Modifier Value Response */
          readonly data?: ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            readonly is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            readonly label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            readonly sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            readonly value_data?: { readonly [key: string]: any };
          } & {
            readonly adjusters?: {
              /** Adjuster for Complex Rules. */
              readonly price?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** Adjuster for Complex Rules. */
              readonly weight?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster?: "relative" | "percentage";
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                readonly adjuster_value?: number;
              };
              /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
              readonly image_url?: string;
              readonly purchasing_disabled?: {
                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                readonly status?: boolean;
                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                readonly message?: string;
              };
            };
          }) & {
            /** The unique numeric ID of the value; increments sequentially. */
            readonly id?: number;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Modifier Value*. */
  readonly deleteModifierValueById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        readonly value_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /**
   * Creates a *Modifier Image*.
   *
   * The image will show on the storefront when the value is selected.
   *
   *  **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   */
  readonly createModifierImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier`. */
        readonly value_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly formData: {
        readonly image_file?: { readonly [key: string]: any };
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** An object containing a publicly accessible image URL, or a form post that contains an image file. */
          readonly data?: {
            /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
            readonly image_url?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** Modifier image was not valid. This is the result of missing `image_file` fields, or of a non-URL value for the `image_file` field. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /**
   * Deletes a *Modifier Image*.
   *
   * Deletes the image that was set to show when the modifier value is selected.
   */
  readonly deleteModifierImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `Modifier`. */
        readonly modifier_id: number;
        /** The ID of the `Modifier`. */
        readonly value_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of all product *Complex Rules*. Optional parameters may be passed in. */
  readonly getComplexRules: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: parameters["PageParam"];
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: parameters["LimitParam"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["complexRule_Base"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a product *Complex Rule*.
   *
   * **Required Fields**
   * - modifier_id
   * - modifier_value_id
   * - modifier_value_id
   * - variant_id
   *
   * **Read-Only Fields**
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  readonly createComplexRule: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly ComplexRule: {
          /**
           * The unique numeric ID of the rule; increments sequentially.
           * Read-Only
           */
          readonly id?: number;
          /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
          readonly product_id?: number;
          /** The priority to give this rule when making adjustments to the product properties. */
          readonly sort_order?: number;
          /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
          readonly enabled?: boolean;
          /** Flag for determining whether other rules should not be applied after this rule has been applied. */
          readonly stop?: boolean;
          /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          readonly purchasing_disabled?: boolean;
          /** Message displayed on the storefront when a rule disables the purchasing of a product. */
          readonly purchasing_disabled_message?: string;
          /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          readonly purchasing_hidden?: boolean;
          /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
          readonly image_url?: string;
          /** Adjuster for Complex Rules. */
          readonly price_adjuster?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          /** Adjuster for Complex Rules. */
          readonly weight_adjuster?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          readonly conditions?: readonly {
            /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
            readonly id?: number;
            /**
             * The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             */
            readonly rule_id?: number;
            /**
             * The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             */
            readonly modifier_id: number;
            /**
             * The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             */
            readonly modifier_value_id: number;
            /**
             * The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             */
            readonly variant_id: number;
            /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
            readonly combination_id?: number;
          }[];
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["ComplexRuleResponse"];
      /** The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Complex Rule*. Optional parameters can be passed in. */
  readonly getComplexRuleById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `ComplexRule`. */
        readonly complex_rule_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["ComplexRuleResponse"];
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Complex Rule*.
   *
   * **Required Fields**:
   * - none
   *
   * **Read-Only Fields**:
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  readonly updateComplexRule: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `ComplexRule`. */
        readonly complex_rule_id: number;
      };
      readonly body: {
        readonly ComplexRule: {
          /**
           * The unique numeric ID of the rule; increments sequentially.
           * Read-Only
           */
          readonly id?: number;
          /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
          readonly product_id?: number;
          /** The priority to give this rule when making adjustments to the product properties. */
          readonly sort_order?: number;
          /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
          readonly enabled?: boolean;
          /** Flag for determining whether other rules should not be applied after this rule has been applied. */
          readonly stop?: boolean;
          /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          readonly purchasing_disabled?: boolean;
          /** Message displayed on the storefront when a rule disables the purchasing of a product. */
          readonly purchasing_disabled_message?: string;
          /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          readonly purchasing_hidden?: boolean;
          /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
          readonly image_url?: string;
          /** Adjuster for Complex Rules. */
          readonly price_adjuster?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          /** Adjuster for Complex Rules. */
          readonly weight_adjuster?: {
            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster?: "relative" | "percentage";
            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            readonly adjuster_value?: number;
          };
          readonly conditions?: readonly {
            /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
            readonly id?: number;
            /**
             * The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             */
            readonly rule_id?: number;
            /**
             * The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             */
            readonly modifier_id: number;
            /**
             * The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             */
            readonly modifier_value_id: number;
            /**
             * The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             */
            readonly variant_id: number;
            /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
            readonly combination_id?: number;
          }[];
        };
      };
    };
    readonly responses: {
      readonly 200: responses["ComplexRuleResponse"];
      /** The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a product *Complex Rule*. */
  readonly deleteComplexRuleById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `ComplexRule`. */
        readonly complex_rule_id: number;
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of product *Custom Fields*. Optional parameters can be passed in. */
  readonly getCustomFields: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly {
            /**
             * The unique numeric ID of the custom field; increments sequentially.
             * Read-Only
             */
            readonly id?: number;
            /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
            readonly name: string;
            /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
            readonly value: string;
          }[];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a *Custom Field*.
   *
   * **Required Fields:**
   * - name
   * - value
   *
   * **Read-Only:**
   * - id
   */
  readonly createCustomField: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly CustomField: {
          /**
           * The unique numeric ID of the custom field; increments sequentially.
           * Read-Only
           */
          readonly id?: number;
          /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
          readonly name: string;
          /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
          readonly value: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
          readonly data?: {
            /**
             * The unique numeric ID of the custom field; increments sequentially.
             * Read-Only
             */
            readonly id?: number;
            /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
            readonly name: string;
            /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
            readonly value: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The parent resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Custom Field*. Optional parameters can be passed in. */
  readonly getCustomFieldById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `CustomField`. */
        readonly custom_field_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["productCustomField_Base"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Custom Field*.
   *
   * **Required Fields**
   * - none
   *
   * **Read-Only**
   * - id
   */
  readonly updateCustomField: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `CustomField`. */
        readonly custom_field_id: number;
      };
      readonly body: {
        readonly CustomField: {
          /**
           * The unique numeric ID of the custom field; increments sequentially.
           * Read-Only
           */
          readonly id?: number;
          /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
          readonly name: string;
          /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
          readonly value: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
          readonly data?: {
            /**
             * The unique numeric ID of the custom field; increments sequentially.
             * Read-Only
             */
            readonly id?: number;
            /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
            readonly name: string;
            /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
            readonly value: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a product *Custom Field*. */
  readonly deleteCustomFieldById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `CustomField`. */
        readonly custom_field_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in. */
  readonly getBulkPricingRules: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["bulkPricingRule_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The parent resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * - quantity_min
   * - quantity_max
   * - type
   * - amount
   *
   * **Read-Only Fields**
   * - id
   */
  readonly createBulkPricingRule: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
      };
      readonly body: {
        readonly BulkPricingRule: definitions["bulkPricingRule_Full"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["bulkPricingRule_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The parent resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in. */
  readonly getBulkPricingRuleById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `BulkPricingRule`. */
        readonly bulk_pricing_rule_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["bulkPricingRule_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource or parent resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   */
  readonly updateBulkPricingRule: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `BulkPricingRule`. */
        readonly bulk_pricing_rule_id: number;
      };
      readonly body: {
        readonly BulkPricingRule: definitions["bulkPricingRule_Full"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common BulkPricingRule properties */
          readonly data?: {
            /** Unique ID of the *Bulk Pricing Rule*. Read-Only. */
            readonly id?: number;
            /**
             * The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
             * Required in /POST.
             */
            readonly quantity_min: number;
            /**
             * The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
             * Required in /POST.
             */
            readonly quantity_max: number;
            /**
             * The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
             * Required in /POST.
             */
            readonly type: "price" | "percent" | "fixed";
            /**
             * The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
             * Required in /POST.
             */
            readonly amount: number;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource or parent resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Bulk Pricing Rule*. */
  readonly deleteBulkPricingRuleById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `BulkPricingRule`. */
        readonly bulk_pricing_rule_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
      /** The resource or parent resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns a list of *Product Metafields*. Optional parameters can be passed in. */
  readonly getProductMetafieldsByProductId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Filter based on a metafield's key. */
        readonly key?: string;
        /** Filter based on a metafield's namespace. */
        readonly namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["metafield_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Product Metafield*.
   *
   * **Required Fields:**
   * * permission_set
   * * namespace
   * * key
   * * value
   *
   * **Read-Only Fields**
   * * id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  readonly createProductMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Post"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Product Metafield*. Optional parameters can be passed in. */
  readonly getProductMetafieldByProductId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Product Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   */
  readonly updateProductMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Put"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Metafield properties. */
          readonly data?: {
            /** Unique ID of the *Metafield*. Read-Only. */
            readonly id?: number;
            /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
            readonly permission_set:
              | "app_only"
              | "read"
              | "write"
              | "read_and_sf_access"
              | "write_and_sf_access";
            /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
            readonly namespace: string;
            /** The name of the field, for example: `location_id`, `color`. Required for POST. */
            readonly key: string;
            /** The value of the field, for example: `1`, `blue`. Required for POST. */
            readonly value: string;
            /** Description for the metafields. */
            readonly description?: string;
            /** The type of resource with which the metafield is associated. */
            readonly resource_type?:
              | "category"
              | "brand"
              | "product"
              | "variant";
            /** The ID for the resource with which the metafield is associated. */
            readonly resource_id?: number;
            /** Date and time of the metafield's creation. Read-Only. */
            readonly created_at?: string;
            /** Date and time when the metafield was last updated. Read-Only. */
            readonly updated_at?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a *Product Metafield*. */
  readonly deleteProductMetafieldById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of all *Product Reviews*. Optional parameters can be passed in. */
  readonly getProductReviews: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /**
             * The title for the product review.
             * Required in /POST.
             */
            readonly title: string;
            /** The text for the product review. */
            readonly text?: string;
            /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
            readonly status?: string;
            /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
            readonly rating?: number;
            /** The email of the reviewer. Must be a valid email, or an empty string. */
            readonly email?: string;
            /** The name of the reviewer. */
            readonly name?: string;
            /** Date the product was reviewed. Required in /POST. */
            readonly date_reviewed: string;
          } & {
            /** The unique numeric ID of the product review; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the review is associated. */
            readonly product_id?: number;
            /** Date the product review was created. */
            readonly date_created?: string;
            /** Date the product review was modified. */
            readonly date_modified?: string;
          })[];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** There are no reviews on this product. */
      readonly 204: never;
      /** The product ID does not exist. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Product Review*.
   *
   * **Required Fields**
   * - title
   * - date_reviewed
   *
   * **Read-Only Fields**
   * * id
   */
  readonly createProductReview: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
      };
      readonly body: {
        readonly productReview: {
          /**
           * The title for the product review.
           * Required in /POST.
           */
          readonly title: string;
          /** The text for the product review. */
          readonly text?: string;
          /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          readonly status?: string;
          /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          readonly rating?: number;
          /** The email of the reviewer. Must be a valid email, or an empty string. */
          readonly email?: string;
          /** The name of the reviewer. */
          readonly name?: string;
          /** Date the product was reviewed. Required in /POST. */
          readonly date_reviewed: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** A product review model. */
          readonly data?: {
            /**
             * The title for the product review.
             * Required in /POST.
             */
            readonly title: string;
            /** The text for the product review. */
            readonly text?: string;
            /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
            readonly status?: string;
            /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
            readonly rating?: number;
            /** The email of the reviewer. Must be a valid email, or an empty string. */
            readonly email?: string;
            /** The name of the reviewer. */
            readonly name?: string;
            /** Date the product was reviewed. Required in /POST. */
            readonly date_reviewed: string;
          } & {
            /** The unique numeric ID of the product review; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the review is associated. */
            readonly product_id?: number;
            /** Date the product review was created. */
            readonly date_created?: string;
            /** Date the product review was modified. */
            readonly date_modified?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The product ID does not exist. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns a single *Product Review*. Optional parameters maybe passed in. */
  readonly getProductReviewById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `review` that is being operated on. */
        readonly review_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** A product review model. */
          readonly data?: {
            /**
             * The title for the product review.
             * Required in /POST.
             */
            readonly title: string;
            /** The text for the product review. */
            readonly text?: string;
            /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
            readonly status?: string;
            /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
            readonly rating?: number;
            /** The email of the reviewer. Must be a valid email, or an empty string. */
            readonly email?: string;
            /** The name of the reviewer. */
            readonly name?: string;
            /** Date the product was reviewed. Required in /POST. */
            readonly date_reviewed: string;
          } & {
            /** The unique numeric ID of the product review; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the review is associated. */
            readonly product_id?: number;
            /** Date the product review was created. */
            readonly date_created?: string;
            /** Date the product review was modified. */
            readonly date_modified?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Product Review*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  readonly updateProductReview: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `review` that is being operated on. */
        readonly review_id: number;
      };
      readonly body: {
        /** A BigCommerce `ProductReview` object. */
        readonly productReview: {
          /**
           * The title for the product review.
           * Required in /POST.
           */
          readonly title: string;
          /** The text for the product review. */
          readonly text?: string;
          /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          readonly status?: string;
          /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          readonly rating?: number;
          /** The email of the reviewer. Must be a valid email, or an empty string. */
          readonly email?: string;
          /** The name of the reviewer. */
          readonly name?: string;
          /** Date the product was reviewed. Required in /POST. */
          readonly date_reviewed: string;
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** A product review model. */
          readonly data?: {
            /**
             * The title for the product review.
             * Required in /POST.
             */
            readonly title: string;
            /** The text for the product review. */
            readonly text?: string;
            /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
            readonly status?: string;
            /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
            readonly rating?: number;
            /** The email of the reviewer. Must be a valid email, or an empty string. */
            readonly email?: string;
            /** The name of the reviewer. */
            readonly name?: string;
            /** Date the product was reviewed. Required in /POST. */
            readonly date_reviewed: string;
          } & {
            /** The unique numeric ID of the product review; increments sequentially. */
            readonly id?: number;
            /** The unique numeric identifier for the product with which the review is associated. */
            readonly product_id?: number;
            /** Date the product review was created. */
            readonly date_created?: string;
            /** Date the product review was modified. */
            readonly date_modified?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a *Product Review*. */
  readonly deleteProductReview: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Product` to which the resource belongs. */
        readonly product_id: number;
        /** The ID of the `review` that is being operated on. */
        readonly review_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Categories*. Optional filter parameters can be passed in. */
  readonly getCategories: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: parameters["FilterIdParam"];
        readonly "id:in"?: parameters["FilterIdIn"];
        readonly "id:not_in"?: parameters["FilterIdNotIn"];
        readonly "id:min"?: parameters["FilterIdMin"];
        readonly "id:max"?: parameters["FilterIdMax"];
        readonly "id:greater"?: parameters["FilterIdGreater"];
        readonly "id:less"?: parameters["FilterIdLess"];
        /** Filter items by name. */
        readonly name?: string;
        readonly "name:like"?: readonly string[];
        /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
        readonly parent_id?: number;
        readonly "parent_id:in"?: readonly number[];
        readonly "parent_id:min"?: readonly number[];
        readonly "parent_id:max"?: readonly number[];
        readonly "parent_id:greater"?: readonly number[];
        readonly "parent_id:less"?: readonly number[];
        /** Filter items by page_title. */
        readonly page_title?: string;
        readonly "page_title:like"?: readonly string[];
        /** Filter items by keywords. eg. new, towel, bath */
        readonly keyword?: string;
        /** Filter items by if visible on the storefront. */
        readonly is_visible?: boolean;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["CategoryCollectionResponse"];
    };
  };
  /**
   * Creates a *Category*.
   *
   * **Required Fields**:
   * - parent_id:
   * 	- To create a child category, set the parent_id to the parent category.
   * 	- To create a top level category, set the parent_id to 0.
   * - name
   *
   * **Read-Only Fields**:
   * - id
   */
  readonly createCategory: {
    readonly parameters: {
      readonly body: {
        readonly category: {
          /**
           * Unique ID of the *Category*. Increments sequentially.
           * Read-Only.
           */
          readonly id?: number;
          /**
           * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
           * Required in a POST if creating a child category.
           */
          readonly parent_id: number;
          /**
           * The name displayed for the category. Name is unique with respect to the category's siblings.
           * Required in a POST.
           */
          readonly name: string;
          /** The product description, which can include HTML formatting. */
          readonly description?: string;
          /** Number of views the category has on the storefront. */
          readonly views?: number;
          /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
          readonly sort_order?: number;
          /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
          readonly page_title?: string;
          /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
          readonly search_keywords?: string;
          /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
          readonly meta_keywords?: readonly string[];
          /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
          readonly meta_description?: string;
          /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
          readonly layout_file?: string;
          /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
          readonly is_visible?: boolean;
          /** Determines how the products are sorted on category page load. */
          readonly default_product_sort?:
            | "use_store_settings"
            | "featured"
            | "newest"
            | "best_selling"
            | "alpha_asc"
            | "alpha_desc"
            | "avg_customer_review"
            | "price_asc"
            | "price_desc";
          /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
          readonly image_url?: string;
          /** The custom URL for the category on the storefront. */
          readonly custom_url?: {
            /** Category URL on the storefront. */
            readonly url?: string;
            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            readonly is_customized?: boolean;
          };
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["CategoryResponse"];
      /** The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /**
   * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
   *
   * **Usage Notes**
   *
   * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
   * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` requst to the `/catalog/products/{product_id}` endpoint before deleting a category.
   */
  readonly deleteCategories: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: number;
        readonly "id:in"?: parameters["FilterIdIn"];
        readonly "id:not_in"?: parameters["FilterIdNotIn"];
        readonly "id:min"?: parameters["FilterIdMin"];
        readonly "id:max"?: parameters["FilterIdMax"];
        readonly "id:greater"?: parameters["FilterIdGreater"];
        readonly "id:less"?: parameters["FilterIdLess"];
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
        readonly parent_id?: number;
        /** Filter items by page_title. */
        readonly page_title?: string;
        /** Filter items by keywords. eg. new, towel, bath */
        readonly keyword?: string;
        /** Filter items by if visible on the storefront. */
        readonly is_visible?: boolean;
        readonly "name:like"?: readonly string[];
        readonly "parent_id:in"?: readonly number[];
        readonly "parent_id:min"?: readonly number[];
        readonly "parent_id:max"?: readonly number[];
        readonly "parent_id:greater"?: readonly number[];
        readonly "parent_id:less"?: readonly number[];
        readonly "page_title:like"?: readonly string[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a single *Category*. Optional parameters can be passed in. */
  readonly getCategoryById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["category_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Category*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   */
  readonly updateCategory: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly body: {
        readonly category: {
          /**
           * Unique ID of the *Category*. Increments sequentially.
           * Read-Only.
           */
          readonly id?: number;
          /**
           * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
           * Required in a POST if creating a child category.
           */
          readonly parent_id: number;
          /**
           * The name displayed for the category. Name is unique with respect to the category's siblings.
           * Required in a POST.
           */
          readonly name: string;
          /** The product description, which can include HTML formatting. */
          readonly description?: string;
          /** Number of views the category has on the storefront. */
          readonly views?: number;
          /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
          readonly sort_order?: number;
          /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
          readonly page_title?: string;
          /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
          readonly search_keywords?: string;
          /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
          readonly meta_keywords?: readonly string[];
          /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
          readonly meta_description?: string;
          /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
          readonly layout_file?: string;
          /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
          readonly is_visible?: boolean;
          /** Determines how the products are sorted on category page load. */
          readonly default_product_sort?:
            | "use_store_settings"
            | "featured"
            | "newest"
            | "best_selling"
            | "alpha_asc"
            | "alpha_desc"
            | "avg_customer_review"
            | "price_asc"
            | "price_desc";
          /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
          readonly image_url?: string;
          /** The custom URL for the category on the storefront. */
          readonly custom_url?: {
            /** Category URL on the storefront. */
            readonly url?: string;
            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            readonly is_customized?: boolean;
          };
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Category object properties. */
          readonly data?: {
            /**
             * Unique ID of the *Category*. Increments sequentially.
             * Read-Only.
             */
            readonly id?: number;
            /**
             * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
             * Required in a POST if creating a child category.
             */
            readonly parent_id: number;
            /**
             * The name displayed for the category. Name is unique with respect to the category's siblings.
             * Required in a POST.
             */
            readonly name: string;
            /** The product description, which can include HTML formatting. */
            readonly description?: string;
            /** Number of views the category has on the storefront. */
            readonly views?: number;
            /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
            readonly sort_order?: number;
            /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
            readonly page_title?: string;
            /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
            readonly search_keywords?: string;
            /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
            readonly meta_keywords?: readonly string[];
            /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
            readonly meta_description?: string;
            /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
            readonly layout_file?: string;
            /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
            readonly is_visible?: boolean;
            /** Determines how the products are sorted on category page load. */
            readonly default_product_sort?:
              | "use_store_settings"
              | "featured"
              | "newest"
              | "best_selling"
              | "alpha_asc"
              | "alpha_desc"
              | "avg_customer_review"
              | "price_asc"
              | "price_desc";
            /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
            readonly image_url?: string;
            /** The custom URL for the category on the storefront. */
            readonly custom_url?: {
              /** Category URL on the storefront. */
              readonly url?: string;
              /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
              readonly is_customized?: boolean;
            };
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Category*. */
  readonly deleteCategoryById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in. */
  readonly getCategoryMetafieldsByCategoryId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly query: {
        /** Filter items by id. */
        readonly id?: parameters["FilterIdParam"];
        readonly "id:in"?: parameters["FilterIdIn"];
        readonly "id:not_in"?: parameters["FilterIdNotIn"];
        readonly "id:min"?: parameters["FilterIdMin"];
        readonly "id:max"?: parameters["FilterIdMax"];
        readonly "id:greater"?: parameters["FilterIdGreater"];
        readonly "id:less"?: parameters["FilterIdLess"];
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Filter based on a metafield's key. */
        readonly key?: string;
        /** Filter based on a metafield's namespace. */
        readonly namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["metafield_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Category Metafield*.
   *
   * **Required Fields:**
   * - permission_set
   * - namespace
   * - key
   * - value
   *
   * **Read-Only Fields**
   * - id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  readonly createCategoryMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Post"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Metafield properties. */
          readonly data?: {
            /** Unique ID of the *Metafield*. Read-Only. */
            readonly id?: number;
            /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
            readonly permission_set:
              | "app_only"
              | "read"
              | "write"
              | "read_and_sf_access"
              | "write_and_sf_access";
            /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
            readonly namespace: string;
            /** The name of the field, for example: `location_id`, `color`. Required for POST. */
            readonly key: string;
            /** The value of the field, for example: `1`, `blue`. Required for POST. */
            readonly value: string;
            /** Description for the metafields. */
            readonly description?: string;
            /** The type of resource with which the metafield is associated. */
            readonly resource_type?:
              | "category"
              | "brand"
              | "product"
              | "variant";
            /** The ID for the resource with which the metafield is associated. */
            readonly resource_id?: number;
            /** Date and time of the metafield's creation. Read-Only. */
            readonly created_at?: string;
            /** Date and time when the metafield was last updated. Read-Only. */
            readonly updated_at?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate, unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a single *Category Metafield*. Optional parameters can be passed in. */
  readonly getCategoryMetafieldByCategoryId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Base"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Category Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   */
  readonly updateCategoryMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Put"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a *Category Metafield*. */
  readonly deleteCategoryMetafieldById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /**
   * Create a *Category Image*.
   *
   *  **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   *
   * Only one image at a time can be created.
   * Limit image size to 1MB.
   * To update a *Category Image*, use the [PUT Categories](/api-reference/catalog/catalog-api/category/updatecategory) and an `image_url`.
   */
  readonly createCategoryImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly formData: {
        readonly image_file?: { readonly [key: string]: any };
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            readonly image_url?: string;
          };
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Cateogory Image*. */
  readonly deleteCategoryImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Category` to which the resource belongs. */
        readonly category_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API. */
  readonly getCategoryTree: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["categoriesTree_Resp"];
      };
    };
  };
  /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
  readonly getBrands: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: parameters["FilterIdParam"];
        readonly "id:in"?: parameters["FilterIdIn"];
        readonly "id:not_in"?: parameters["FilterIdNotIn"];
        readonly "id:min"?: parameters["FilterIdMin"];
        readonly "id:max"?: parameters["FilterIdMax"];
        readonly "id:greater"?: parameters["FilterIdGreater"];
        readonly "id:less"?: parameters["FilterIdLess"];
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by page_title. */
        readonly page_title?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["brand_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
    };
  };
  /**
   * Creates a *Brand*.
   *
   * **Required Fields**
   * - name
   *
   * **Read-Only Fields**
   * - id
   */
  readonly createBrand: {
    readonly parameters: {
      readonly body: {
        readonly Brand: {
          /** Unique ID of the *Brand*. Read-Only. */
          readonly id?: number;
          /**
           * The name of the brand. Must be unique.
           * Required in POST.
           */
          readonly name: string;
          /** The title shown in the browser while viewing the brand. */
          readonly page_title?: string;
          /** Comma-separated list of meta keywords to include in the HTML. */
          readonly meta_keywords?: readonly string[];
          /** A meta description to include. */
          readonly meta_description?: string;
          /** A comma-separated list of keywords that can be used to locate this brand. */
          readonly search_keywords?: string;
          /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
          readonly image_url?: string;
          /** The custom URL for the brand on the storefront. */
          readonly custom_url?: {
            /** Brand URL on the storefront. */
            readonly url?: string;
            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            readonly is_customized?: boolean;
          };
        };
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Brand properties. */
          readonly data?: {
            /** Unique ID of the *Brand*. Read-Only. */
            readonly id?: number;
            /**
             * The name of the brand. Must be unique.
             * Required in POST.
             */
            readonly name: string;
            /** The title shown in the browser while viewing the brand. */
            readonly page_title?: string;
            /** Comma-separated list of meta keywords to include in the HTML. */
            readonly meta_keywords?: readonly string[];
            /** A meta description to include. */
            readonly meta_description?: string;
            /** A comma-separated list of keywords that can be used to locate this brand. */
            readonly search_keywords?: string;
            /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
            readonly image_url?: string;
            /** The custom URL for the brand on the storefront. */
            readonly custom_url?: {
              /** Brand URL on the storefront. */
              readonly url?: string;
              /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
              readonly is_customized?: boolean;
            };
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** Brand was in conflict with another brand. This is the result of duplicate unique fields such as name. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** By default, it deletes all *Brand* objects. A filter should be added to avoid deleting all *Brand* objects in a store. */
  readonly deleteBrands: {
    readonly parameters: {
      readonly query: {
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by page_title. */
        readonly page_title?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a single *Brand*. Optional filter parameters can be passed in. */
  readonly getBrandById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["brand_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Brand*.
   *
   * **Required Fields**
   * - None
   *
   * **Read-Only Fields**
   * - id
   *
   * To update a *Brand Image*, send a request with an `image_url`.
   */
  readonly updateBrand: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly body: {
        readonly brand: {
          /** Unique ID of the *Brand*. Read-Only. */
          readonly id?: number;
          /**
           * The name of the brand. Must be unique.
           * Required in POST.
           */
          readonly name: string;
          /** The title shown in the browser while viewing the brand. */
          readonly page_title?: string;
          /** Comma-separated list of meta keywords to include in the HTML. */
          readonly meta_keywords?: readonly string[];
          /** A meta description to include. */
          readonly meta_description?: string;
          /** A comma-separated list of keywords that can be used to locate this brand. */
          readonly search_keywords?: string;
          /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
          readonly image_url?: string;
          /** The custom URL for the brand on the storefront. */
          readonly custom_url?: {
            /** Brand URL on the storefront. */
            readonly url?: string;
            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            readonly is_customized?: boolean;
          };
        };
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Brand properties. */
          readonly data?: {
            /** Unique ID of the *Brand*. Read-Only. */
            readonly id?: number;
            /**
             * The name of the brand. Must be unique.
             * Required in POST.
             */
            readonly name: string;
            /** The title shown in the browser while viewing the brand. */
            readonly page_title?: string;
            /** Comma-separated list of meta keywords to include in the HTML. */
            readonly meta_keywords?: readonly string[];
            /** A meta description to include. */
            readonly meta_description?: string;
            /** A comma-separated list of keywords that can be used to locate this brand. */
            readonly search_keywords?: string;
            /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
            readonly image_url?: string;
            /** The custom URL for the brand on the storefront. */
            readonly custom_url?: {
              /** Brand URL on the storefront. */
              readonly url?: string;
              /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
              readonly is_customized?: boolean;
            };
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Brand*. */
  readonly deleteBrandById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
  readonly getBrandMetafieldsByBrandId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly query: {
        /** Filter items by id. */
        readonly id?: parameters["FilterIdParam"];
        readonly "id:in"?: parameters["FilterIdIn"];
        readonly "id:not_in"?: parameters["FilterIdNotIn"];
        readonly "id:min"?: parameters["FilterIdMin"];
        readonly "id:max"?: parameters["FilterIdMax"];
        readonly "id:greater"?: parameters["FilterIdGreater"];
        readonly "id:less"?: parameters["FilterIdLess"];
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Filter based on a metafield's key. */
        readonly key?: string;
        /** Filter based on a metafield's namespace. */
        readonly namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["metafield_Full"][];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Creates a *Brand Metafield*.
   *
   * **Required Fields**
   * - permission_set
   * - namespace
   * - key
   * - value
   *
   * **Read-Only Fields**
   * - id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  readonly createBrandMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Post"];
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Metafield properties. */
          readonly data?: { readonly [key: string]: any };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the app's client id, namespace, key, resource_type, and resource_id. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
  readonly getBrandMetafieldByBrandId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Brand Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   * * The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  readonly updateBrandMetafield: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly body: {
        readonly Metafield: definitions["metafield_Put"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["metafield_Full"];
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Deletes a *Brand Metafield*. */
  readonly deleteBrandMetafieldById: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Metafield`. */
        readonly metafield_id: number;
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /**
   * Creates a *Brand Image*.
   *
   * **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   *
   * **Read-Only Fields**
   * - id
   *
   * Only one image at a time can be created. To update a *Brand Image*, use the [PUT Brands](/api-reference/catalog/catalog-api/brands/updatebrand) and an `image_url`.
   */
  readonly createBrandImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly formData: {
        readonly image_file?: { readonly [key: string]: any };
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            readonly image_url?: string;
          };
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: {
            readonly additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Brand Image*. */
  readonly deleteBrandImage: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Brand` to which the resource belongs. */
        readonly brand_id: number;
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of all variants in your catalog. Optional parameters can be passed in. */
  readonly getVariants: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: number;
        /** Filter items by sku. */
        readonly sku?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly include_fields?: readonly string[];
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly exclude_fields?: string;
        /**
         * A comma-separated list of ids of Products whose prices were requested. For example:
         * `?product_id=:id`
         * `?product_id:in=77,80,81`
         */
        readonly product_id?: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /** The cost price of the variant. Not affected by Price List prices. */
            readonly cost_price?: number;
            /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
            readonly price?: number;
            /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
            readonly sale_price?: number;
            /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
            readonly retail_price?: number;
            /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
            readonly weight?: number;
            /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
            readonly width?: number;
            /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
            readonly height?: number;
            /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
            readonly depth?: number;
            /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
            readonly is_free_shipping?: boolean;
            /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
            readonly fixed_cost_shipping_price?: number;
            /** If `true`, this variant will not be purchasable on the storefront. */
            readonly purchasing_disabled?: boolean;
            /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            readonly purchasing_disabled_message?: string;
            /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            readonly upc?: string;
            /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
            readonly inventory_level?: number;
            /** When the variant hits this inventory level, it is considered low stock. */
            readonly inventory_warning_level?: number;
            /** Identifies where in a warehouse the variant is located. */
            readonly bin_picking_number?: string;
          } & {
            readonly id?: number;
            readonly product_id?: number;
            readonly sku?: string;
            /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
            readonly sku_id?: number;
            /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
            readonly option_values?: readonly ({
              /** The name of the option. */
              readonly option_display_name?: string;
              /** The label of the option value. */
              readonly label?: string;
            } & {
              readonly id?: number;
              readonly option_id?: number;
            })[];
            /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
            readonly calculated_price?: number;
          })[];
          readonly meta?: definitions["metaCollection_Full"];
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Creates or updates a batch of `Variant` objects. At the time of writing, the current limit is `50` variants. This limit is subject to change. */
  readonly updateVariantsBatch: {
    readonly parameters: {
      readonly body: {
        readonly body: readonly ({
          /** The cost price of the variant. Not affected by Price List prices. */
          readonly cost_price?: number;
          /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
          readonly price?: number;
          /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
          readonly sale_price?: number;
          /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
          readonly retail_price?: number;
          /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
          readonly weight?: number;
          /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
          readonly width?: number;
          /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
          readonly height?: number;
          /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
          readonly depth?: number;
          /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
          readonly is_free_shipping?: boolean;
          /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
          readonly fixed_cost_shipping_price?: number;
          /** If `true`, this variant will not be purchasable on the storefront. */
          readonly purchasing_disabled?: boolean;
          /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
          readonly purchasing_disabled_message?: string;
          /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
          readonly upc?: string;
          /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
          readonly inventory_level?: number;
          /** When the variant hits this inventory level, it is considered low stock. */
          readonly inventory_warning_level?: number;
          /** Identifies where in a warehouse the variant is located. */
          readonly bin_picking_number?: string;
        } & {
          readonly id?: number;
        })[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /** The cost price of the variant. Not affected by Price List prices. */
            readonly cost_price?: number;
            /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
            readonly price?: number;
            /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
            readonly sale_price?: number;
            /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
            readonly retail_price?: number;
            /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
            readonly weight?: number;
            /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
            readonly width?: number;
            /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
            readonly height?: number;
            /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
            readonly depth?: number;
            /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
            readonly is_free_shipping?: boolean;
            /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
            readonly fixed_cost_shipping_price?: number;
            /** If `true`, this variant will not be purchasable on the storefront. */
            readonly purchasing_disabled?: boolean;
            /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            readonly purchasing_disabled_message?: string;
            /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            readonly upc?: string;
            /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
            readonly inventory_level?: number;
            /** When the variant hits this inventory level, it is considered low stock. */
            readonly inventory_warning_level?: number;
            /** Identifies where in a warehouse the variant is located. */
            readonly bin_picking_number?: string;
          } & {
            readonly id?: number;
            readonly product_id?: number;
            readonly sku?: string;
            /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
            readonly sku_id?: number;
            /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
            readonly option_values?: readonly ({
              /** The name of the option. */
              readonly option_display_name?: string;
              /** The label of the option value. */
              readonly label?: string;
            } & {
              readonly id?: number;
              readonly option_id?: number;
            })[];
            /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
            readonly calculated_price?: number;
          })[];
          /** Data about the response, including pagination and collection totals. */
          readonly meta?: {
            /** Data about the response, including pagination and collection totals. */
            readonly pagination?: {
              /** Total number of items in the result set. */
              readonly total?: number;
              /** Total number of items in the collection response. */
              readonly count?: number;
              /** The amount of items returned in the collection per page, controlled by the limit parameter. */
              readonly per_page?: number;
              /** The page you are currently on within the collection. */
              readonly current_page?: number;
              /** The total number of pages in the collection. */
              readonly total_pages?: number;
              /** Pagination links for the previous and next parts of the whole collection. */
              readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
              };
            };
          };
        };
      };
      readonly 413: unknown;
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          readonly batch_errors?: readonly ({
            /** The HTTP status code. */
            readonly status?: number;
            /** The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
          } & {
            readonly errors?: {
              readonly additionalProperties?: string;
            };
          })[];
        };
      };
    };
  };
  /**
   * Returns a lightweight inventory summary from the BigCommerce Catalog.
   *
   * The inventory summary includes:
   * * "inventory_count"
   * * "variant_count"
   * * "inventory_value"
   * * "highest_variant_price"
   * * "average_variant_price"
   * * "lowest_variant_price"
   * * "oldest_variant_date"
   * * "newest_variant_date"
   * * "primary_category_id"
   * * "primary_category_name"
   */
  readonly getCatalogSummary: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Catalog Summary object describes a lightweight summary of the catalog. */
          readonly data?: {
            /** A count of all inventory items in the catalog. */
            readonly inventory_count?: number;
            /** Total value of store's inventory. */
            readonly inventory_value?: number;
            /** ID of the category containing the most products. */
            readonly primary_category_id?: number;
            /** Name of the category containing the most products. */
            readonly primary_category_name?: string;
            /** Total number of variants */
            readonly variant_count?: number;
            /** Highest priced variant */
            readonly highest_variant_price?: number;
            /** Average price of all variants */
            readonly average_variant_price?: number;
            /** Lowest priced variant in the store */
            readonly lowest_variant_price?: string;
            readonly oldest_variant_date?: string;
            readonly newest_variant_date?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
    };
  };
}
