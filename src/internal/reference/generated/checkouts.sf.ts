/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/checkouts/{checkoutId}": {
    /**
     * Returns a *Checkout*.
     *
     * The cart ID and checkout ID are the same.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly get: operations["CheckoutsByCheckoutIdGet"];
    /**
     * Updates *Checkout* customer messages.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly put: operations["CheckoutsByCheckoutIdPut"];
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
    };
  };
  readonly "/checkouts/{checkoutId}/carts/{cartId}/items/{itemId}": {
    /**
     * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/api-reference/cart-checkout/storefront-cart-api/cart-items/addcartlineitem) endpoint.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly put: operations["CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPut"];
    /**
     * Deletes a *Line Item* from the *Cart*.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly delete: operations["CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete"];
  };
  readonly "/checkouts/{checkoutId}/billing-address": {
    /**
     * Adds a billing address to an existing *Checkout*.
     *
     * **Required Fields**
     * * country_code
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["CheckoutsBillingAddressByCheckoutIdPost"];
  };
  readonly "/checkouts/{checkoutId}/billing-address/{addressId}": {
    /**
     * Updates an existing billing address on *Checkout*.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly put: operations["CheckoutsBillingAddressByCheckoutIdAndAddressIdPut"];
  };
  readonly "/checkouts/{checkoutId}/consignments": {
    /**
     * Adds a new *Consignment* to *Checkout*.
     *
     * There are two steps to add a new shipping address and shipping options with line items.
     * 1. Add a new Consignment to Checkout.
     * * 	Send a POST to Consignments with each shipping address and line items IDs. Each address can have its own line item IDs.
     * * 	As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on line items and shipping locations. This will return `availableShippingOptions` in the response.
     * 2. [Update the Consignment](/api-reference/cart-checkout/storefront-checkout-api/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with Shipping Options.
     *
     * **Required Query**
     * * consignments.availableShippingOptions
     *
     * **Required Fields**
     * * shipping_address
     * * line_items
     *
     * To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["CheckoutsConsignmentsByCheckoutIdPost"];
  };
  readonly "/checkouts/{checkoutId}/consignments/{consignmentId}": {
    /**
     * Updates an existing consignment. Shipping address, line item IDs or the shipping option ID can be updated using this endpoint.
     *
     * There are two steps to add a new shipping address and shipping options with line items.
     * 1. Add a new Consignment to Checkout.
     * 2. Update the Consignment with Shipping Options.
     * * 	 Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from Step One.
     *
     * **Required Fields**
     * * shippingOptionId
     *
     * To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > * You cannot pass both a `shippingAddress` and `shippingOptionId` because the shipping option may not be able to be applied to the given address
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly put: operations["CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut"];
    /**
     * Removes an existing *Consignment* from *Checkout*.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly delete: operations["CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete"];
  };
  readonly "/checkouts/{checkoutId}/gift-certificates": {
    /**
     * Adds a *Gift Certificate Code* to *Checkout*.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > * *Gift Certificates* are treated as a payment methods.
     * > * You are not able to purchase a gift certificate with a gift certificate.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["CheckoutsGiftCertificatesByCheckoutIdPost"];
  };
  readonly "/checkouts/{checkoutId}/gift-certificates/{giftCertificateCode}": {
    /**
     * Deletes an existing *Gift Certificate*.
     *
     * This removes the *Gift Certificate* payment method.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * >
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly delete: operations["CheckoutsGiftCertificatesByCheckoutIdAndGiftCertificateCodeDelete"];
  };
  readonly "/checkouts/{checkoutId}/coupons": {
    /**
     * Adds a *Coupon Code* to *Checkout*.
     *
     * **Required Fields**
     * * couponCode
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["CheckoutsCouponsByCheckoutIdPost"];
  };
  readonly "/checkouts/{checkoutId}/coupons/{couponCode}": {
    /**
     * Deletes a *Coupon Code* from *Checkout*.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly delete: operations["CheckoutsCouponsByCheckoutIdAndCouponCodeDelete"];
  };
  readonly "/checkouts/{checkoutId}/store-credit": {
    /**
     * Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["CheckoutStoreCreditAdd"];
    /**
     * Removes store credit from a checkout.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly delete: operations["CheckoutsStoreCreditRemove"];
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
    };
  };
  readonly "/checkouts/{checkoutId}/spam-protection": {
    /**
     * Verifies if checkout is created by human.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["checkoutSpamProtection"];
  };
}

export interface definitions {
  readonly SpamProtectionRequest: {
    readonly token?: string;
  };
  readonly checkout_Full: {
    readonly id?: string;
    readonly cart?: definitions["checkoutCart"];
    readonly billingAddress?: definitions["address_Base"];
    readonly consignments?: readonly definitions["consignment_Full"][];
    /** Coupons applied at checkout level. */
    readonly coupons?: readonly definitions["AppliedCoupon"][];
    /** "" */
    readonly orderId?: string;
    /** Shipping cost before any discounts are applied. */
    readonly shippingCostTotal?: number;
    /** Gift wrapping cost for all items, including or excluding tax. */
    readonly giftWrappingCostTotal?: number;
    /** Handling cost for all consignments including or excluding tax. */
    readonly handlingCostTotal?: number;
    readonly taxTotal?: number;
    readonly taxes?: readonly definitions["checkoutTax"][];
    /** Subtotal of the checkout before applying item level discounts. Tax inclusive based on the store settings. */
    readonly subtotal?: number;
    /** The total payable amount, before applying any store credit or gift certificate. */
    readonly grandTotal?: number;
    /** Applied gift certificate (as a payment method). */
    readonly giftCertificates?: readonly definitions["checkoutGiftCertificates"][];
    /** Time when the cart was created. */
    readonly createdTime?: string;
    /** Time when the cart was last updated. */
    readonly updatedTime?: string;
    /** Shopper's message provided as details for the order to be created from this cart */
    readonly customerMessage?: string;
    /** `grandTotal` subtract the store-credit amount */
    readonly outstandingBalance?: number;
    /** `true` value indicates StoreCredit has been applied. */
    readonly isStoreCreditApplied?: boolean;
  };
  readonly AppliedCoupon: {
    /** The coupon ID. */
    readonly id?: string;
    /** the coupon code */
    readonly code: string;
    /** The coupon title based on different types provided in control panel section. */
    readonly displayName?: string;
    /**
     * |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    readonly couponType?: 1 | 2 | 3 | 4 | 5;
    /** The discounted amount applied within a given context. */
    readonly discountedAmount?: number;
  };
  /** Model for sender and receiver objects. */
  readonly contactEntity: {
    readonly name?: string;
    readonly email?: string;
  };
  readonly address_Full: definitions["address_Base"] & {
    readonly id?: string;
  };
  readonly address_Base: {
    readonly firstName?: string;
    readonly lastName?: string;
    readonly email?: string;
    readonly company?: string;
    readonly address1?: string;
    readonly address2?: string;
    readonly city?: string;
    /** Represents state or province. */
    readonly stateOrProvince?: string;
    readonly stateOrProvinceCode?: string;
    /** ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
    readonly countryCode: string;
    readonly postalCode?: string;
    readonly phone?: string;
    readonly customFields?: readonly definitions["customFields"][];
  };
  /** When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string. */
  readonly customFields: {
    readonly fieldId?: string;
    /** This can also be an array for fields that need to support list of values (e.g., a set of check boxes.). When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string. */
    readonly fieldValue?: string;
  };
  /** This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items. */
  readonly consignment_Full: {
    readonly id?: string;
    readonly shippingAddress?: definitions["address_Full"];
    /** This is available only when "include=consignments.availableShippingOptions" is presented in the URL. */
    readonly availableShippingOptions?: readonly definitions["consignmentAvailableShippingOptions"][];
    readonly selectedShippingOption?: {
      /** Read-only */
      readonly description?: string;
      readonly id?: string;
      /** Specified the type of shipping option. Flat rate, UPS, etc., */
      readonly type?: string;
      readonly imageUrl?: string;
      readonly cost?: number;
      /** An estimate of the arrival time. */
      readonly transitTime?: string;
      /** ReadOnly, Field used for Shipping Provider API. */
      readonly additionalDescription?: string;
    };
    /** List of consignment discounts applied through coupons */
    readonly couponDiscounts?: readonly {
      /** Coupon code that applied this discount */
      readonly code?: string;
      readonly amount?: number;
    }[];
    /** List of consignment discounts applied through cart level discounts */
    readonly discounts?: readonly {
      /** Discount rule ID that applied this discount */
      readonly id?: string;
    }[];
    /** The shipping cost for this consignment. */
    readonly shippingCost?: number;
    /** The handling cost of shipping for this consignment. */
    readonly handlingCost?: number;
    readonly lineItemIds?: readonly string[];
  };
  readonly consignmentAvailableShippingOptions: definitions["consignmentShippingOption_Base"] & {
    /** Is this shipping method the recommended shipping option or not. */
    readonly isRecommended?: boolean;
    readonly additionalDescription?: string;
  };
  readonly checkoutTax: {
    /** Name of the tax. */
    readonly name?: string;
    readonly amount?: number;
  };
  readonly checkout_Put: {
    readonly customerMessage?: string;
  };
  readonly checkouts_Resp: {
    readonly data?: {
      readonly id?: string;
      /** A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data. */
      readonly cart?: {
        /** Cart ID, provided after creating a cart with a POST. */
        readonly id?: string;
        /** ID of the customer to which the cart belongs. */
        readonly customer_id?: number;
        /** The cart's email. This is the same email that is used in the billing address */
        readonly email?: string;
        /** The currency which prices are displayed (the store default currency). */
        readonly currency?: {
          /** The currency name. */
          readonly name?: string;
          /** ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
          readonly code?: string;
          /** The currency symbol. */
          readonly symbol?: string;
          /** Number of decimal places for the currency. For example, USD currency has two decimal places. */
          readonly decimalPlaces?: number;
        };
        /** Boolean representing whether tax information is included. */
        readonly istaxIncluded?: boolean;
        /** Cost of cart's contents, before applying discounts. */
        readonly baseAmount?: number;
        /** Discounted amount. */
        readonly discountAmount?: number;
        /** Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable). */
        readonly cartAmount?: number;
        readonly coupons?: readonly {
          /** The coupon ID. */
          readonly id?: string;
          /** the coupon code */
          readonly code: string;
          /** The coupon title based on different types provided in control panel section */
          readonly displayName?: string;
          /** Key name to identify the type of coupon. */
          readonly couponType?: string;
          /** The discounted amount applied within a given context. */
          readonly discountedAmount?: number;
        }[];
        readonly discounts?: readonly {
          /** The name provided by the merchant. */
          readonly name?: string;
          /** The discounted amount applied within a given context. */
          readonly discountedAmount?: number;
        }[];
        readonly lineItems?: readonly {
          readonly physicalItems: readonly {
            /** The line-item ID. */
            readonly id?: string;
            /** The product is part of a bundle such as a product pick list, then the parentId or the main product id will populate. */
            readonly parentId?: string;
            /** ID of the variant. */
            readonly variantId?: number;
            /** ID of the product. */
            readonly productId?: number;
            /** SKU of the variant. */
            readonly sku?: string;
            /** The item's product name. */
            readonly name?: string;
            /** The product URL. */
            readonly url?: string;
            /** Quantity of this item. */
            readonly quantity: number;
            /** Whether the item is taxable. */
            readonly isTaxable?: boolean;
            /** URL of an image of this item, accessible on the internet. */
            readonly imageUrl?: string;
            /** List of discounts applied to this item, as an array of AppliedDiscount objects. */
            readonly discounts?: readonly {
              /** The name provided by the merchant. */
              readonly name?: string;
              /** The discounted amount applied within a given context. */
              readonly discountedAmount?: number;
            }[];
            /** The total value of all discounts applied to this item (excluding coupon). */
            readonly discountAmount?: number;
            /** The total value of all coupons applied to this item. */
            readonly couponAmount?: number;
            /** Item's list price, as quoted by the manufacturer/distributor. */
            readonly listPrice?: number;
            /** Item's price after all discounts are applied. (The final price before tax calculation.) */
            readonly salePrice?: number;
            /** Item's list price multiplied by the quantity. */
            readonly extendedListPrice?: number;
            /** Item's sale price multiplied by the quantity. */
            readonly extendedSalePrice?: number;
            /** the product type - physical or digital */
            readonly type?: string;
            /** If the item was added automatically by a promotion such as a coupon or buy one, get one. */
            readonly addedByPromotion?: boolean;
            /** Whether this item requires shipping to a physical address. */
            readonly isShippingRequired?: boolean;
            readonly isMutable?: boolean;
            readonly giftWrapping?: {
              readonly name?: string;
              readonly message?: string;
              readonly amount?: number;
            };
          }[];
          readonly digitalItems: readonly {
            /** The line-item ID. */
            readonly id?: string;
            /** Bundled items will have their parent's item Id. */
            readonly parentId?: string;
            /** ID of the variant. */
            readonly variantId?: number;
            /** ID of the product. */
            readonly productId?: number;
            /** SKU of the variant. */
            readonly sku?: string;
            /** The item's product name. */
            readonly name?: string;
            /** The product URL. */
            readonly url?: string;
            /** Quantity of this item. */
            readonly quantity: number;
            /** The item's brand. */
            readonly brand?: string;
            /** Whether the item is taxable. */
            readonly isTaxable?: boolean;
            /** URL of an image of this item, accessible on the internet. */
            readonly imageUrl?: string;
            /** List of discounts applied to this item, as an array of AppliedDiscount objects. */
            readonly discounts?: readonly {
              /** The name provided by the merchant. */
              readonly name?: string;
              /** The discounted amount applied within a given context. */
              readonly discountedAmount?: number;
            }[];
            /** The total value of all discounts applied to this item (excluding coupon). */
            readonly discountAmount?: number;
            /** The total value of all coupons applied to this item. */
            readonly couponAmount?: number;
            /** Item's list price, as quoted by the manufacturer/distributor. */
            readonly listPrice?: number;
            /** Item's price after all discounts are applied. (The final price before tax calculation.) */
            readonly salePrice?: number;
            /** Item's list price multiplied by the quantity. */
            readonly extendedListPrice?: number;
            /** Item's sale price multiplied by the quantity. */
            readonly extendedSalePrice?: number;
            /** the product type - physical or digital */
            readonly type?: string;
            readonly isMutable?: boolean;
            /** Whether this item requires shipping to a physical address. */
            readonly isShippingRequired?: boolean;
            /** URLs to download all product files. */
            readonly downloadFileUrls?: readonly string[];
            /** The URL for the combined downloads page. */
            readonly downloadPageUrl?: string;
            /** Combined download size, in human-readable style. E.g.: `30MB`. */
            readonly downloadSize?: string;
          }[];
          readonly giftCertificate?: readonly {
            /** Gift certificate identifier */
            readonly id?: string;
            /** Name of the purchased gift certificate e.g. $20 Gift Certificate */
            readonly name?: string;
            /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
            readonly theme: string;
            /** Value must be between $1.00 and $1,000.00. */
            readonly amount: number;
            readonly taxable?: boolean;
            readonly sender: {
              readonly name?: string;
              readonly email?: string;
            };
            readonly recipient: {
              readonly name?: string;
              readonly email?: string;
            };
            /** Limited to 200 characters. */
            readonly message?: string;
            /** Explicitly specifying the gift certificate type */
            readonly type?: string;
          }[];
          readonly customItems?: readonly {
            /** Id of the custom item */
            readonly id?: string;
            /** Custom item sku */
            readonly sku?: string;
            /** Item name */
            readonly name?: string;
            readonly quantity?: string;
            /** Price of the item. With or without tax depending on your stores set up. */
            readonly listPrice?: string;
          }[];
        }[];
        /** Time when the cart was created. */
        readonly createdTime?: string;
        /** Time when the cart was last updated. */
        readonly updatedTime?: string;
      };
      readonly billingAddress?: {
        readonly firstName?: string;
        readonly lastName?: string;
        readonly email?: string;
        readonly company?: string;
        readonly address1?: string;
        readonly address2?: string;
        readonly city?: string;
        /** Represents state or province. */
        readonly stateOrProvince?: string;
        readonly stateOrProvinceCode?: string;
        /** ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
        readonly countryCode: string;
        readonly postalCode?: string;
        readonly phone?: string;
        readonly customFields?: readonly {
          readonly fieldId?: string;
          /** This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
          readonly fieldValue?: string;
        }[];
      } & {
        readonly id?: string;
      };
      /** This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items. */
      readonly consignments?: readonly {
        readonly id?: string;
        readonly shippingAddress?: {
          readonly firstName?: string;
          readonly lastName?: string;
          readonly email?: string;
          readonly company?: string;
          readonly address1?: string;
          readonly address2?: string;
          readonly city?: string;
          /** Represents state or province. */
          readonly stateOrProvince?: string;
          readonly stateOrProvinceCode?: string;
          /** ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
          readonly countryCode: string;
          readonly postalCode?: string;
          readonly phone?: string;
          readonly customFields?: readonly {
            readonly fieldId?: string;
            /** This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
            readonly fieldValue?: string;
          }[];
        } & {
          readonly id?: string;
        };
        /** This is available only when "include=consignments.availableShippingOptions" is presented in the URL. */
        readonly availableShippingOptions?: readonly ({
          /** Read-only */
          readonly description?: string;
          readonly id?: string;
          /** Specified the type of shipping option. Flat rate, UPS, etc., */
          readonly type?: string;
          readonly imageUrl?: string;
          readonly cost?: number;
          /** An estimate of the arrival time. */
          readonly transitTime?: string;
        } & {
          /** Is this shipping method the recommended shipping option or not. */
          readonly isRecommended?: boolean;
        })[];
        readonly selectedShippingOption?: {
          /** Read-only */
          readonly description?: string;
          readonly id?: string;
          /** Specified the type of shipping option. Flat rate, UPS, etc., */
          readonly type?: string;
          readonly imageUrl?: string;
          readonly cost?: number;
          /** An estimate of the arrival time. */
          readonly transitTime?: string;
        };
        /** List of consignment discounts applied through coupons */
        readonly couponDiscounts?: readonly {
          /** Coupon code that applied this discount */
          readonly code?: string;
          readonly amount?: number;
        }[];
        /** List of consignment discounts applied through cart level discounts */
        readonly discounts?: readonly {
          /** Discount rule ID that applied this discount */
          readonly id?: string;
        }[];
        /** The shipping cost for this consignment. */
        readonly shippingCost?: number;
        /** The handling cost of shipping for this consignment. */
        readonly handlingCost?: number;
        readonly lineItemIds?: readonly string[];
      }[];
      /** Coupons applied at checkout level. */
      readonly coupons?: readonly definitions["AppliedCoupon"][];
      readonly orderId?: string;
      /** Shipping cost before any discounts are applied. */
      readonly shippingCostTotal?: number;
      /** Gift wrapping for all items, including or excluding tax. */
      readonly giftWrappingCostTotal?: number;
      /** Handling cost for all consignments including or excluding tax. */
      readonly handlingCostTotal?: number;
      readonly taxTotal?: number;
      readonly taxes?: readonly {
        /** Name of the tax charged. This is either the system default or the custom name created for the tax. */
        readonly name?: string;
        /** Amount of the tax. */
        readonly amount?: number;
      }[];
      /** Subtotal of the checkout before applying item level discounts. Tax inclusive based on the store settings. */
      readonly subtotal?: number;
      /** The total payable amount, before applying any store credit or gift certificate. */
      readonly grandTotal?: number;
      /** Applied gift certificate (as a payment method). */
      readonly giftCertificates?: readonly {
        readonly balance?: number;
        readonly code?: string;
        readonly purchaseDate?: string;
        readonly remaining?: number;
        readonly used?: number;
      }[];
      /** Time when the cart was created. */
      readonly createdTime?: string;
      /** Time when the cart was last updated. */
      readonly updatedTime?: string;
      /** Shopper's message provided as details for the order to be created from this cart */
      readonly customerMessage?: string;
      /** `grandTotal` subtract the store-credit amount */
      readonly outstandingBalance?: number;
      /** `true` value indicates StoreCredit has been applied. */
      readonly isStoreCreditApplied?: boolean;
    };
  };
  readonly cartLineItemPut: {
    readonly quantity?: number;
    readonly productId?: number;
    readonly variantId?: number;
  };
  readonly cartLineItemGiftCertificate_Put: {
    /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
    readonly theme: string;
    readonly amount: number;
    readonly sender: definitions["contactEntity"];
    readonly recipient: definitions["contactEntity"];
    /** Message shown to recipient, as provided by sender. */
    readonly message?: string;
    readonly quantity: number;
  };
  readonly CreateConsignmentRequest: {
    readonly shippingAddress?: {
      readonly firstName?: string;
      readonly lastName?: string;
      readonly email?: string;
      readonly company?: string;
      readonly address1?: string;
      readonly address2?: string;
      readonly city?: string;
      /** Represents state or province. */
      readonly stateOrProvince?: string;
      readonly stateOrProvinceCode?: string;
      /** ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
      readonly countryCode: string;
      readonly postalCode?: string;
      readonly phone?: string;
      readonly customFields?: readonly {
        readonly fieldId?: string;
        readonly fieldValue?: string;
      }[];
    };
    readonly lineItems?: readonly {
      readonly itemId: string;
      readonly quantity: number;
    }[];
  };
  readonly GiftCertificateRequest: {
    readonly giftCertificateCode?: string;
  };
  readonly cart_Put: {
    readonly lineItem?: definitions["cartLineItemPut"];
    readonly giftCertificate?: definitions["cartLineItemGiftCertificate_Put"];
  };
  /** One or more of these three fields are mandatory. Shipping address and line items can be updated in one request. Shipping option ID has to be updated in a separate request, since changing the address or line items can invalidate the previously available shipping options. */
  readonly NewUpdateConsignment: {
    readonly shippingAddress?: {
      readonly firstName?: string;
      readonly lastName?: string;
      readonly email?: string;
      readonly company?: string;
      readonly address1?: string;
      readonly address2?: string;
      readonly city?: string;
      /** Represents state or province. */
      readonly stateOrProvince?: string;
      readonly stateOrProvinceCode?: string;
      /** ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
      readonly countryCode: string;
      readonly postalCode?: string;
      readonly phone?: string;
      readonly customFields?: readonly {
        readonly fieldId?: string;
        readonly fieldValue?: string;
      }[];
    };
    readonly lineItems?: readonly {
      readonly itemId: string;
      readonly quantity: number;
    }[];
    readonly shippingOptionId?: string;
  };
  /** A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data. */
  readonly checkoutCart: {
    /** Cart ID, provided after creating a cart with a POST. */
    readonly id?: string;
    /** ID of the customer to which the cart belongs. */
    readonly customer_id?: number;
    /** The cart's email. This is the same email that is used in the billing address */
    readonly email?: string;
    /** The currency which prices are displayed (the store default currency). */
    readonly currency?: {
      /** The currency name. */
      readonly name?: string;
      /** ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
      readonly code?: string;
      /** The currency symbol. */
      readonly symbol?: string;
      /** Number of decimal places for the currency. For example, USD currency has two decimal places. */
      readonly decimalPlaces?: number;
    };
    /** Boolean representing whether tax information is included. */
    readonly isTaxIncluded?: boolean;
    /** Cost of cart's contents, before applying discounts. */
    readonly baseAmount?: number;
    /** Discounted amount. */
    readonly discountAmount?: number;
    /** Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable). */
    readonly cartAmount?: number;
    readonly coupons?: readonly {
      /** The coupon ID. */
      readonly id?: string;
      /** the coupon code */
      readonly code: string;
      /** The coupon title based on different types provided in control panel section */
      readonly displayName?: string;
      /** Key name to identify the type of coupon. */
      readonly couponType?: string;
      /** The discounted amount applied within a given context. */
      readonly discountedAmount?: number;
    }[];
    readonly discounts?: readonly {
      /** The name provided by the merchant. */
      readonly name?: string;
      /** The discounted amount applied within a given context. */
      readonly discountedAmount?: number;
    }[];
    readonly lineItems?: readonly {
      readonly physicalItems: readonly {
        /** The line-item ID. */
        readonly id?: string;
        /** The product is part of a bundle such as a product pick list, then the parentId or the main product id will populate. */
        readonly parentId?: string;
        /** ID of the variant. */
        readonly variantId?: number;
        /** ID of the product. */
        readonly productId?: number;
        /** SKU of the variant. */
        readonly sku?: string;
        /** The item's product name. */
        readonly name?: string;
        /** The product URL. */
        readonly url?: string;
        /** Quantity of this item. */
        readonly quantity: number;
        /** Whether the item is taxable. */
        readonly isTaxable?: boolean;
        /** URL of an image of this item, accessible on the internet. */
        readonly imageUrl?: string;
        /** List of discounts applied to this item, as an array of AppliedDiscount objects. */
        readonly discounts?: readonly {
          /** The name provided by the merchant. */
          readonly name?: string;
          /** The discounted amount applied within a given context. */
          readonly discountedAmount?: number;
        }[];
        /** The total value of all discounts applied to this item (excluding coupon). */
        readonly discountAmount?: number;
        /** The total value of all coupons applied to this item. */
        readonly couponAmount?: number;
        /** Item's list price, as quoted by the manufacturer/distributor. */
        readonly listPrice?: number;
        /** Item's price after all discounts are applied. (The final price before tax calculation.) */
        readonly salePrice?: number;
        /** Item's list price multiplied by the quantity. */
        readonly extendedListPrice?: number;
        /** Item's sale price multiplied by the quantity. */
        readonly extendedSalePrice?: number;
        /** Item's comparison price */
        readonly comparisonPrice?: number;
        /** Item's comparison price multiplied by the quantity. */
        readonly extendedComparisonPrice?: number;
        /** the product type - physical or digital */
        readonly type?: string;
        /** If the item was added automatically by a promotion such as a coupon or buy one, get one. */
        readonly addedByPromotion?: boolean;
        /** Whether this item requires shipping to a physical address. */
        readonly isShippingRequired?: boolean;
        readonly isMutable?: boolean;
        readonly giftWrapping?: {
          readonly name?: string;
          readonly message?: string;
          readonly amount?: number;
        };
      }[];
      readonly digitalItems: readonly {
        /** The line-item ID. */
        readonly id?: string;
        /** Bundled items will have their parent's item Id. */
        readonly parentId?: string;
        /** ID of the variant. */
        readonly variantId?: number;
        /** ID of the product. */
        readonly productId?: number;
        /** SKU of the variant. */
        readonly sku?: string;
        /** The item's product name. */
        readonly name?: string;
        /** The product URL. */
        readonly url?: string;
        /** Quantity of this item. */
        readonly quantity: number;
        /** Whether the item is taxable. */
        readonly isTaxable?: boolean;
        /** URL of an image of this item, accessible on the internet. */
        readonly imageUrl?: string;
        /** List of discounts applied to this item, as an array of AppliedDiscount objects. */
        readonly discounts?: readonly {
          /** The name provided by the merchant. */
          readonly name?: string;
          /** The discounted amount applied within a given context. */
          readonly discountedAmount?: number;
        }[];
        /** The total value of all discounts applied to this item (excluding coupon). */
        readonly discountAmount?: number;
        /** The total value of all coupons applied to this item. */
        readonly couponAmount?: number;
        /** Item's list price, as quoted by the manufacturer/distributor. */
        readonly listPrice?: number;
        /** Item's price after all discounts are applied. (The final price before tax calculation.) */
        readonly salePrice?: number;
        /** Item's list price multiplied by the quantity. */
        readonly extendedListPrice?: number;
        /** Item's sale price multiplied by the quantity. */
        readonly extendedSalePrice?: number;
        /** the product type - physical or digital */
        readonly type?: string;
        /** Whether this item requires shipping to a physical address. */
        readonly isShippingRequired?: boolean;
        /** URLs to download all product files. */
        readonly downloadFileUrls?: readonly string[];
        /** The URL for the combined downloads page. */
        readonly downloadPageUrl?: string;
        /** Combined download size, in human-readable style. E.g.: `30MB`. */
        readonly downloadSize?: string;
      }[];
      readonly giftCertificate?: readonly {
        /** Gift certificate identifier */
        readonly id?: string;
        /** Name of the purchased gift certificate e.g. $20 Gift Certificate */
        readonly name?: string;
        /** Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        readonly theme: string;
        /** Value must be between $1.00 and $1,000.00. */
        readonly amount: number;
        readonly taxable?: boolean;
        readonly sender: {
          readonly name?: string;
          readonly email?: string;
        };
        readonly recipient: {
          readonly name?: string;
          readonly email?: string;
        };
        /** Limited to 200 characters. */
        readonly message?: string;
        /** Explicitly specifying the gift certificate type */
        readonly type?: string;
      }[];
      readonly customItems?: readonly {
        /** Id of the custom item */
        readonly id?: string;
        /** Custom item sku */
        readonly sku?: string;
        /** Item name */
        readonly name?: string;
        readonly quantity?: string;
        /** Price of the item. With or without tax depending on your stores set up. */
        readonly listPrice?: string;
      }[];
    }[];
    /** Time when the cart was created. */
    readonly createdTime?: string;
    /** Time when the cart was last updated. */
    readonly updatedTime?: string;
  };
  /** Applied gift certificate (as a payment method). */
  readonly checkoutGiftCertificates: readonly {
    readonly balance?: number;
    readonly code?: string;
    readonly purchaseDate?: string;
    readonly remaining?: number;
    readonly used?: number;
  }[];
  readonly consignmentShippingOption_Base: {
    /** Read-only */
    readonly description?: string;
    readonly id?: string;
    /** Specified the type of shipping option. Flat rate, UPS, etc., */
    readonly type?: string;
    readonly imageUrl?: string;
    readonly cost?: number;
    /** An estimate of the arrival time. */
    readonly transitTime?: string;
  };
}

export interface parameters {
  readonly include: string;
}

export interface responses {
  readonly Checkout: {
    readonly schema: definitions["checkout_Full"];
  };
}

export interface operations {
  /**
   * Returns a *Checkout*.
   *
   * The cart ID and checkout ID are the same.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsByCheckoutIdGet: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly query: {
        /**
         * * `cart.lineItems.physicalItems.options` - physical options
         * * `cart.lineItems.digitalItems.options` - digital options
         * * `cart.lineItems.physicalItems.categoryNames` - physical categories
         * * `cart.lineItems.digitalItems.categoryNames` - digital categories
         * * `cart.lineItems.customItems.categoryNames` - custom categories
         * * `customer` - customer
         * * `customer.customerGroup` - customer group
         * * `payments` - payments
         * * `promotions` - promotions
         * * `consignments.availableShippingOptions` - shipping options
         */
        readonly include?:
          | "cart.lineItems.physicalItems.options"
          | "cart.lineItems.digitalItems.options"
          | "cart.lineItems.physicalItems.categoryNames"
          | "cart.lineItems.digitalItems.categoryNames"
          | "cart.lineItems.customItems.categoryNames"
          | "customer"
          | "customer.customerGroup"
          | "payments"
          | "promotions"
          | "consignments.availableShippingOptions";
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkouts_Resp"];
      };
      /** When a problem arises, returns (for now) a generic response. */
      readonly 400: {
        readonly schema: {
          readonly errors?: readonly {
            readonly status?: number;
            readonly title?: string;
            readonly type?: string;
            readonly detail?: string;
          }[];
        };
      };
    };
  };
  /**
   * Updates *Checkout* customer messages.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsByCheckoutIdPut: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly body: {
        readonly body: definitions["checkout_Put"];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkouts_Resp"];
      };
    };
  };
  /**
   * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
   *
   * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/api-reference/cart-checkout/storefront-cart-api/cart-items/addcartlineitem) endpoint.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPut: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly cartId: string;
        readonly itemId: string;
      };
      readonly body: {
        readonly body: definitions["cart_Put"];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Deletes a *Line Item* from the *Cart*.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly cartId: string;
        readonly itemId: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Adds a billing address to an existing *Checkout*.
   *
   * **Required Fields**
   * * country_code
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsBillingAddressByCheckoutIdPost: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly body: {
        readonly body: definitions["address_Base"];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
      /** The email trying to be set for the guest is associated with an account. The customer must sign-in. */
      readonly 403: unknown;
      /** Unable to determine if provided email is associated with an account. The customer must sign-in. */
      readonly 429: unknown;
    };
  };
  /**
   * Updates an existing billing address on *Checkout*.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsBillingAddressByCheckoutIdAndAddressIdPut: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly addressId: number;
      };
      readonly body: {
        readonly body: definitions["address_Base"];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
      /** The email trying to be set for the guest is associated with an account. The customer must sign-in. */
      readonly 403: unknown;
      /** Unable to determine if provided email is associated with an account. The customer must sign-in. */
      readonly 429: unknown;
    };
  };
  /**
   * Adds a new *Consignment* to *Checkout*.
   *
   * There are two steps to add a new shipping address and shipping options with line items.
   * 1. Add a new Consignment to Checkout.
   * * 	Send a POST to Consignments with each shipping address and line items IDs. Each address can have its own line item IDs.
   * * 	As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on line items and shipping locations. This will return `availableShippingOptions` in the response.
   * 2. [Update the Consignment](/api-reference/cart-checkout/storefront-checkout-api/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with Shipping Options.
   *
   * **Required Query**
   * * consignments.availableShippingOptions
   *
   * **Required Fields**
   * * shipping_address
   * * line_items
   *
   * To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsConsignmentsByCheckoutIdPost: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly body: {
        readonly body: readonly definitions["CreateConsignmentRequest"][];
      };
      readonly query: {
        readonly include?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Updates an existing consignment. Shipping address, line item IDs or the shipping option ID can be updated using this endpoint.
   *
   * There are two steps to add a new shipping address and shipping options with line items.
   * 1. Add a new Consignment to Checkout.
   * 2. Update the Consignment with Shipping Options.
   * * 	 Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from Step One.
   *
   * **Required Fields**
   * * shippingOptionId
   *
   * To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > * You cannot pass both a `shippingAddress` and `shippingOptionId` because the shipping option may not be able to be applied to the given address
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly consignmentId: string;
      };
      readonly body: {
        readonly body: definitions["NewUpdateConsignment"];
      };
      readonly query: {
        readonly include?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Removes an existing *Consignment* from *Checkout*.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly consignmentId: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Adds a *Gift Certificate Code* to *Checkout*.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > * *Gift Certificates* are treated as a payment methods.
   * > * You are not able to purchase a gift certificate with a gift certificate.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsGiftCertificatesByCheckoutIdPost: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly body: {
        readonly body: definitions["GiftCertificateRequest"];
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Deletes an existing *Gift Certificate*.
   *
   * This removes the *Gift Certificate* payment method.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * >
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsGiftCertificatesByCheckoutIdAndGiftCertificateCodeDelete: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly giftCertificateCode: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Adds a *Coupon Code* to *Checkout*.
   *
   * **Required Fields**
   * * couponCode
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsCouponsByCheckoutIdPost: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly body: {
        readonly body: {
          readonly couponCode?: string;
        };
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Deletes a *Coupon Code* from *Checkout*.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsCouponsByCheckoutIdAndCouponCodeDelete: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
        readonly couponCode: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
  /**
   * Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutStoreCreditAdd: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["checkouts_Resp"];
      };
    };
  };
  /**
   * Removes store credit from a checkout.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly CheckoutsStoreCreditRemove: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: { readonly [key: string]: any };
      };
    };
  };
  /**
   * Verifies if checkout is created by human.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly checkoutSpamProtection: {
    readonly parameters: {
      readonly path: {
        readonly checkoutId: string;
      };
      readonly body: {
        readonly body: definitions["SpamProtectionRequest"];
      };
    };
    readonly responses: {
      /** Returns Checkout Object. */
      readonly 200: {
        readonly schema: definitions["checkout_Full"];
      };
    };
  };
}
