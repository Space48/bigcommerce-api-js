/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/coupons": {
    /**
     * Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. Optional filter parameters can be passed in.
     *
     * ## Usage Notes
     *
     * Available types for `type` and `exclude_type` filters:
     *
     * |Type|
     * |-|
     * |`per_item_discount`|
     * |`percentage_discount`|
     * |`per_total_discount`|
     * |`shipping_discount`|
     * |`free_shipping`|
     * |`promotion`|
     *
     * Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:
     *
     * ```json
     * ...
     * amount : 0.0000
     * min_purchase: 0.0000
     * applies_to
     * restricted_to: []
     * shipping_methods : null
     * ...
     * ```
     */
    readonly get: operations["getAllCoupons"];
    /**
     * Creates a *Coupon*.
     *
     * **Required Fields**
     * *   `name`
     * *   `code`
     * *   `type`
     * *   `amount`
     * *   `applies_to`
     *
     * **Read Only Fields**
     * *   `id`
     * *   `num_uses`
     *
     * **Notes**
     *
     * The coupon type can be one of the following:
     *
     * *   `per_item_discount`
     * *   `per_total_discount`
     * *   `shipping_discount`
     * *   `free_shipping`
     * *   `percentage_discount`
     */
    readonly post: {
      readonly parameters: {
        readonly header: {
          readonly Accept: string;
          readonly "Content-Type": string;
        };
        readonly body: {
          readonly body: definitions["coupon_Base"];
        };
      };
      readonly responses: {
        readonly 200: responses["coupon_Resp"];
      };
    };
    /**
     * By default, it deletes a page of *Coupons*.
     *
     * ## Usage Notes
     * * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to
     */
    readonly delete: operations["deleteAllCoupons"];
  };
  readonly "/coupons/count": {
    /** Returns a count of all *Coupons* in the store. */
    readonly get: operations["getACountOfCoupons"];
  };
  readonly "/coupons/{id}": {
    /**
     * Updates a *Coupon*.
     *
     *
     * **Read Only Fields**
     *
     * * `id`
     * * `num_uses`
     * * `date_created`
     *
     * **Notes**
     *
     * If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
     */
    readonly put: operations["updateACoupon"];
    /** Deletes a *Coupon*. */
    readonly delete: operations["deleteACoupon"];
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
  };
  readonly "/banners": {
    /** Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest. */
    readonly get: operations["getAllBanners"];
    /**
     * Creates a *Banner*.
     *
     * **Required Fields**
     * * name
     * * content
     * * page
     * * location
     * * date_type
     *
     * **Read Only Fields**
     * * date_created
     * * id
     */
    readonly post: operations["createABanner"];
    /** By default, it deletes all *Banners*. */
    readonly delete: operations["deleteAllBanners"];
  };
  readonly "/banners/{id}": {
    /** Returns a single *Banner* */
    readonly get: operations["getABanner"];
    /**
     * Updates a *Banner*.
     *
     * **Read Only Fields**
     * * date_created
     * * id
     */
    readonly put: operations["updateABanner"];
    /** Deletes a *Banner*. */
    readonly delete: operations["deleteABanner"];
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
  };
  readonly "/banners/count": {
    /** Returns a count of *Banners*. */
    readonly get: operations["getACountOfBanners"];
  };
  readonly "/gift_certificates/{id}": {
    /** Returns a single *Gift Certificate*. */
    readonly get: operations["getAGiftCertificate"];
    /**
     * Updates a *Gift Certificate*.
     *
     * **Read Only Fields**
     * * id
     * * order_id
     */
    readonly put: operations["updateAGiftCertificate"];
    /** Deletes a *Gift Certificate*. */
    readonly delete: operations["deleteAGiftCertificate"];
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
  };
  readonly "/gift_certificates": {
    /**
     * Returns a list of *Gift Certificates*. Optional filter parameters can be passed in.
     *
     * Default sorting is by gift-certificate id, from lowest to highest.
     *
     * The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates are returned by default.
     */
    readonly get: operations["getAllGiftCertificates"];
    /**
     * Creates a *Gift Certificate*.
     *
     *
     * **Required Fields**
     * * to_name
     * * to_email
     * * from_name
     * * from_email
     * * amount
     *
     * **Read Only Fields**
     * * id
     * * order_id
     *
     * **Notes**
     *
     * When a gift certificate is created through the API, no email notification is triggered to the specified recipient.
     */
    readonly post: operations["createAGiftCertificate"];
    /** By default, it deletes all *Gift Certificates*. */
    readonly delete: operations["deleteAllGiftCertificates"];
  };
}

export interface definitions {
  readonly CouponsResource: {
    /** URL of the coupons for api requests */
    readonly url?: string;
    /** resource of the coupons */
    readonly resource?: string;
  };
  readonly coupon_Full: {
    /** The coupon's ID. This is a read-only field; do not set or modify its value in a POST or PUT request. */
    readonly id: number;
    /** Date Created */
    readonly date_created?: string;
    /** Number of times this coupon has been used. This is a read-only field; do not set or modify its value in a POST or PUT request. */
    readonly num_uses?: number;
  } & definitions["coupon_Base"];
  readonly coupon_Base: {
    /** The name of the coupon. */
    readonly name: string;
    readonly type:
      | "per_item_discount"
      | "per_total_discount"
      | "shipping_discount"
      | "free_shipping"
      | "percentage_discount"
      | "promotion";
    /** The discount to apply to an order, as either an amount or a percentage. This field's usage is determined by the coupon `type`. For example, a `type` of + `percentage_discount` would determine a percentage here. */
    readonly amount: string;
    /** Specifies a minimum value that an order must have before the coupon can be applied to it. */
    readonly min_purchase?: string;
    /** Specifies when a coupon expires. Coupons need not have an expiry date – you can also control expiry via + `max_uses` or `max_uses_per_customer`. If you do use this date field, the value must be in <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a> format. */
    readonly expires?: string;
    /** If the coupon is enabled, this field's value is `true`; otherwise, `false`. */
    readonly enabled?: boolean;
    /** The coupon code that customers will use to receive their discounts. Value must be unique. */
    readonly code: string;
    /** If it is not included in the PUT request, its existing value on the coupon will be cleared. Also required to be set on the POST request */
    readonly applies_to: {
      /** ID of either the products or categories */
      readonly ids?: readonly number[];
      /** What the discount applies to. Can be products or categories. */
      readonly entity?: string;
    };
    /** Maximum number of times this coupon can be used. */
    readonly max_uses?: number;
    /** Maximum number of times each customer can use this coupon. */
    readonly max_uses_per_customer?: number;
    readonly restricted_to?: {
      readonly countries?: string;
      readonly ""?: string;
    };
    /** This is a list of shipping-method names. A shipping method must be enabled on the store to use it with a coupon. To check which shipping methods are enabled, please use the [List Shipping Methods](/api/v2#list-shipping-methods) endpoint. */
    readonly shipping_methods?: readonly string[];
  };
  readonly banner_Base: {
    /** Name of the banner. */
    readonly name: string;
    /** Contains the banner content. Returned as a string and includes HTML formatting. */
    readonly content: string;
    /** Page the Banner is located on. */
    readonly page: "home_page" | "category_page" | "brand_page" | "search_page";
    /** Location on the page. */
    readonly location: "top" | "bottom";
    /** This specifies whether the banner should be visible during a specific date range. */
    readonly date_type: "always" | "custom";
    /** If the datetype is set as 'custom’, this field specifies the date when the banner should become visible on the storefront. */
    readonly date_from?: string;
    /** If the datetype is set as 'custom’, this field specifies the date when the banner should stop being visible on the storefront. */
    readonly date_to?: string;
    /** Integer value denoting whether or not the banner is visible on the storefront: 1 = visible; 0 = not visible */
    readonly visible?: string;
  };
  readonly banner_Full: {
    /**
     * Id of the banner.
     * This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     */
    readonly id?: number;
    /** Date the banner is created. */
    readonly date_created?: string;
    /** If the banner is on a specific category or brand page then the `item_id` will correspond the category or brand id. */
    readonly item_id?: string;
  } & definitions["banner_Base"];
  readonly banner_Put: {
    /** If the banner is on a specific category or brand page then the `item_id` will correspond the category or brand id. */
    readonly item_id?: string;
  } & definitions["banner_Base"];
  readonly giftCertificate_Base: {
    /** Name of the recipient. */
    readonly to_name: string;
    /** Email of the recipient. */
    readonly to_email: string;
    /** Name of the customer who purchased the gift certificate. */
    readonly from_name: string;
    /** Email of the customer who purchased the gift certificate. */
    readonly from_email: string;
    /** Value of the gift certificate. */
    readonly amount: string;
  };
  readonly giftCertificate_Full: definitions["giftCertificate_Base"] & {
    /** The ID of the gift certificate.This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
    readonly id?: number;
    /** The ID of the customer placing the order. */
    readonly customer_id?: number;
    /** The ID of the order. */
    readonly order_id?: number;
    /** Remaining value of the gift certificate. If not set, will default to the amount. */
    readonly balance?: string;
    /** Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Date displays in Unix timestamp format. */
    readonly purchase_date?: string;
    /** Date on which the gift certificate is set to expire. */
    readonly expiry_date?: string;
    /** The email theme to use in the message sent to the recipient. */
    readonly template?:
      | "Birthday"
      | "Girl"
      | "Boy"
      | "Celebration"
      | "Christmas"
      | "General";
    /** Text that will be sent to the recipient, such as “Congratulations.” */
    readonly message?: string;
    /** A unique string that the customer can input to redeem the gift certificate. If this field is not set, a value will be generated. */
    readonly code?: string;
    readonly status?: "active" | "pending" | "disabled" | "expired";
  };
  readonly giftCertificate_Put: definitions["giftCertificate_Base"] & {
    /** Remaining value of the gift certificate. If not set, will default to the amount. */
    readonly balance?: string;
    /** Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format. */
    readonly purchase_date?: string;
    /** Date on which the gift certificate is set to expire. */
    readonly expiry_date?: string;
    /** The ID of the customer placing the order. */
    readonly customer_id?: number;
    /** The email theme to use in the message sent to the recipient. */
    readonly template?:
      | "Birthday"
      | "Boy"
      | "Girl"
      | "Celebration"
      | "Christmas"
      | "General";
    /** Text that will be sent to the recipient, such as “Congratulations.” */
    readonly message?: string;
    /** A unique string that the customer can input to redeem the gift certificate. If this field is not set, a value will be generated. */
    readonly code?: string;
    readonly status?: "active" | "pending" | "expired" | "disabled";
  };
  readonly giftCertificate_Post: definitions["giftCertificate_Base"] & {
    /** Remaining value of the gift certificate. If not set, will default to the amount. */
    readonly balance?: string;
    /** Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format. */
    readonly purchase_date?: string;
    /** Date on which the gift certificate is set to expire. */
    readonly expiry_date?: string;
    /** The ID of the customer placing the order. */
    readonly customer_id?: number;
    /** The email theme to use in the message sent to the recipient. */
    readonly template?:
      | "Birthday"
      | "Boy"
      | "Girl"
      | "Celebration"
      | "Christmas"
      | "General";
    /** Text that will be sent to the recipient, such as “Congratulations.” */
    readonly message?: string;
    /** A unique string that the customer can input to redeem the gift certificate. If this field is not set, a value will be generated. */
    readonly code?: string;
    readonly status?: "active" | "pending" | "expired" | "disabled";
    /**
     * A currency code, following the ISO 4217 standard. The currency has to exists in the store first.
     *
     * Gift Certificates can only be used if the transactional currency of the cart is the same to the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency
     */
    readonly currency_code?: string;
  };
}

export interface responses {
  readonly coupon_Resp: {
    readonly schema: definitions["coupon_Full"];
  };
  readonly coupon_Resp_Collection: {
    readonly schema: readonly definitions["coupon_Full"][];
  };
  readonly bannerCollection_Resp: {
    readonly schema: readonly definitions["banner_Full"][];
  };
  readonly banner_Resp: {
    readonly schema: definitions["banner_Full"];
  };
  readonly count_Resp: {
    readonly schema: {
      readonly count?: number;
    };
  };
  readonly giftCertificate_Resp: {
    readonly schema: definitions["giftCertificate_Full"];
  };
  readonly giftCertificateCollection_Resp: {
    readonly schema: readonly definitions["giftCertificate_Full"][];
  };
}

export interface operations {
  /**
   * Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. Optional filter parameters can be passed in.
   *
   * ## Usage Notes
   *
   * Available types for `type` and `exclude_type` filters:
   *
   * |Type|
   * |-|
   * |`per_item_discount`|
   * |`percentage_discount`|
   * |`per_total_discount`|
   * |`shipping_discount`|
   * |`free_shipping`|
   * |`promotion`|
   *
   * Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:
   *
   * ```json
   * ...
   * amount : 0.0000
   * min_purchase: 0.0000
   * applies_to
   * restricted_to: []
   * shipping_methods : null
   * ...
   * ```
   */
  readonly getAllCoupons: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly query: {
        /** Optional filter param. `/api/v2/coupons?id={value}` */
        readonly id?: string;
        /** Optional filter param `/api/v2/coupons?code={value}` */
        readonly code?: string;
        /** Optional filter param `/api/v2/coupons?name={value}` */
        readonly name?: string;
        /**
         * |Type|
         * |-|
         * |`per_item_discount`|
         * |`percentage_discount`|
         * |`per_total_discount`|
         * |`shipping_discount`|
         * |`free_shipping`|
         * |`promotion`|
         */
        readonly type?: string;
        /** Optional filter param `/api/v2/coupons?min_id={value}` */
        readonly min_id?: number;
        /** Optional filter param`/api/v2/coupons?max_id={value}` */
        readonly max_id?: number;
        /** Number of pages `/api/v2/coupons?page={number}` */
        readonly page?: number;
        /** Count per page `/api/v2/coupons?limit={count}` */
        readonly limit?: number;
        /**
         * |Type|
         * |-|
         * |`per_item_discount`|
         * |`percentage_discount`|
         * |`per_total_discount`|
         * |`shipping_discount`|
         * |`free_shipping`|
         * |`promotion`|
         */
        readonly exclude_type?: string;
      };
    };
    readonly responses: {
      readonly 200: responses["coupon_Resp_Collection"];
    };
  };
  /**
   * By default, it deletes a page of *Coupons*.
   *
   * ## Usage Notes
   * * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to
   */
  readonly deleteAllCoupons: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a count of all *Coupons* in the store. */
  readonly getACountOfCoupons: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["count_Resp"];
    };
  };
  /**
   * Updates a *Coupon*.
   *
   *
   * **Read Only Fields**
   *
   * * `id`
   * * `num_uses`
   * * `date_created`
   *
   * **Notes**
   *
   * If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
   */
  readonly updateACoupon: {
    readonly parameters: {
      readonly path: {
        /** Id of the coupon. */
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly body: {
        readonly body: definitions["coupon_Base"];
      };
    };
    readonly responses: {
      readonly 200: responses["coupon_Resp"];
    };
  };
  /** Deletes a *Coupon*. */
  readonly deleteACoupon: {
    readonly parameters: {
      readonly path: {
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest. */
  readonly getAllBanners: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly query: {
        /** Optional filter param `/api/v2/banners?min_id={value}` */
        readonly min_id?: number;
        /** Optional filter param `/api/v2/banners?max_id={value}` */
        readonly max_id?: number;
        /** Optional filter param `/api/v2/banners?page={number}` */
        readonly page?: number;
        /** Optional filter param `/api/v2/banners?limit={count}` */
        readonly limit?: number;
      };
    };
    readonly responses: {
      readonly 200: responses["bannerCollection_Resp"];
    };
  };
  /**
   * Creates a *Banner*.
   *
   * **Required Fields**
   * * name
   * * content
   * * page
   * * location
   * * date_type
   *
   * **Read Only Fields**
   * * date_created
   * * id
   */
  readonly createABanner: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly body: {
        readonly body: definitions["banner_Base"];
      };
    };
    readonly responses: {
      readonly 200: responses["banner_Resp"];
    };
  };
  /** By default, it deletes all *Banners*. */
  readonly deleteAllBanners: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a single *Banner* */
  readonly getABanner: {
    readonly parameters: {
      readonly path: {
        /** Id of the banner. */
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["banner_Resp"];
    };
  };
  /**
   * Updates a *Banner*.
   *
   * **Read Only Fields**
   * * date_created
   * * id
   */
  readonly updateABanner: {
    readonly parameters: {
      readonly path: {
        /** Id of the banner. */
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly body: {
        readonly body: definitions["banner_Put"];
      };
    };
    readonly responses: {
      readonly 200: responses["banner_Resp"];
    };
  };
  /** Deletes a *Banner*. */
  readonly deleteABanner: {
    readonly parameters: {
      readonly path: {
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a count of *Banners*. */
  readonly getACountOfBanners: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["count_Resp"];
    };
  };
  /** Returns a single *Gift Certificate*. */
  readonly getAGiftCertificate: {
    readonly parameters: {
      readonly path: {
        /** Id of the gift certificate. */
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["giftCertificate_Resp"];
    };
  };
  /**
   * Updates a *Gift Certificate*.
   *
   * **Read Only Fields**
   * * id
   * * order_id
   */
  readonly updateAGiftCertificate: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly body: {
        readonly body?: definitions["giftCertificate_Put"];
      };
    };
    readonly responses: {
      readonly 200: responses["giftCertificate_Resp"];
    };
  };
  /** Deletes a *Gift Certificate*. */
  readonly deleteAGiftCertificate: {
    readonly parameters: {
      readonly path: {
        /** Id of the gift certificate. */
        readonly id: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /**
   * Returns a list of *Gift Certificates*. Optional filter parameters can be passed in.
   *
   * Default sorting is by gift-certificate id, from lowest to highest.
   *
   * The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates are returned by default.
   */
  readonly getAllGiftCertificates: {
    readonly parameters: {
      readonly query: {
        readonly min_id?: number;
        readonly max_id?: number;
        readonly code?: string;
        readonly order_id?: number;
        readonly to_name?: string;
        readonly to_email?: string;
        readonly from_name?: string;
        readonly from_email?: string;
        readonly page?: number;
        readonly limit?: number;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: responses["giftCertificateCollection_Resp"];
    };
  };
  /**
   * Creates a *Gift Certificate*.
   *
   *
   * **Required Fields**
   * * to_name
   * * to_email
   * * from_name
   * * from_email
   * * amount
   *
   * **Read Only Fields**
   * * id
   * * order_id
   *
   * **Notes**
   *
   * When a gift certificate is created through the API, no email notification is triggered to the specified recipient.
   */
  readonly createAGiftCertificate: {
    readonly parameters: {
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly body: {
        readonly body?: definitions["giftCertificate_Post"];
      };
    };
    readonly responses: {
      readonly 200: responses["giftCertificate_Resp"];
    };
  };
  /** By default, it deletes all *Gift Certificates*. */
  readonly deleteAllGiftCertificates: {
    readonly parameters: {
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 204: {
        readonly schema: { readonly [key: string]: any };
      };
    };
  };
}
