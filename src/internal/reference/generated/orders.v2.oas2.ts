/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/orders/{order_id}": {
    /** Gets an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview). */
    readonly get: operations["getAnOrder"];
    /** Updates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview). */
    readonly put: operations["updateAnOrder"];
    /** Archives an order. */
    readonly delete: operations["deleteAnOrder"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  readonly "/orders/count": {
    /** Gets an array of orders in the store organized by order status. */
    readonly get: operations["getCountOrder"];
  };
  readonly "/orders": {
    /**
     * Gets a list of orders using the filter query.
     *
     * **Notes**
     *
     * The default sort is by order id, from lowest to highest.
     */
    readonly get: operations["getAllOrders"];
    /**
     * Creates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).
     *
     * An order can be created with an existing catalog product or a custom product.
     *
     * **Required Fields**
     *
     * *   products
     * *   billing_address
     */
    readonly post: operations["createAnOrder"];
    /** Archives all orders. */
    readonly delete: operations["deleteAllOrders"];
  };
  readonly "/orders/{order_id}/coupons": {
    /**
     * Lists all order coupons. Optional parameters can be passed in.
     *
     * |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    readonly get: operations["getAllOrderCoupons"];
  };
  readonly "/orders/{order_id}/products": {
    /** Lists all order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`. */
    readonly get: operations["getAllOrderProducts"];
  };
  readonly "/orders/{order_id}/shipping_addresses": {
    /**
     * Get all shipping addresses on an order using the `order_id`.
     *
     * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
     */
    readonly get: operations["getAllShippingAddresses"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  readonly "/order_statuses": {
    /**
     * Returns a Collection of All Order Statuses.
     *
     * **Order Status Descriptions:**
     * |Status ID | Name  | Description |
     * |--|--|--|
     * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
     * | 1 | Pending |Customer started the checkout process, but did not complete it. |
     * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
     * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
     * | 4 | Refunded | Seller has used the Refund action. |
     * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
     * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
     * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
     * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
     * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
     * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
     * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
     * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
     * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
     * | 14 | Partially Refunded | Seller has partially refunded the order. |
     */
    readonly get: operations["getOrderStatus"];
  };
  readonly "/order_statuses/{status_id}": {
    /**
     * Returns a single order status.
     *
     * **Order Status Descriptions:**
     * |Status ID | Name  | Description |
     * |--|--|--|
     * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
     * | 1 | Pending |Customer started the checkout process, but did not complete it. |
     * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
     * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
     * | 4 | Refunded | Seller has used the Refund action. |
     * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
     * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
     * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
     * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
     * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
     * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
     * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
     * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
     * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
     * | 14 | Partially Refunded | Seller has partially refunded the order. |
     */
    readonly get: operations["getAOrderStatus"];
    readonly parameters: {};
  };
  readonly "/orders/{order_id}/taxes": {
    /**
     * Gets all order taxes using `order_id`.
     * Each tax applied to an order. This information can be useful for reporting purposes.
     * Pass in the query parameter `?details=true` to return extra details about order taxes.
     * `order_product_id` and `line_item_type` are also returned.
     *
     * All values are read-only.
     */
    readonly get: operations["getOrderTaxes"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  readonly "/orders/{order_id}/shipments": {
    /** Gets a list of all shipments on an order. */
    readonly get: operations["getAllOrderShipments"];
    /**
     * Creates an *Order Shipment*. For more details, see [Shipping an Order](/api-docs/orders/orders-api-overview#shipping-an-order).
     *
     * **Required Fields**
     * *   order_address_id
     * *   items
     *
     * **Usage Notes**
     *
     * Presuming that a valid carrier code is used, a tracking link is generated if either `shipping_provider` or `tracking_carrier` is supplied alongside a tracking number. Providing only the tracking number will result in an unclickable text in the customer facing email.
     *
     * Acceptable values for `shipping_provider` include an empty string (`""`), auspost, canadapost, endicia, usps, fedex, ups, upsready, upsonline, or shipperhq.
     *
     * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://github.com/bigcommerce/dev-docs/blob/development/assets/csv/tracking_carrier_values.csv) and downloadable as a .CSV file [here](https://raw.githubusercontent.com/bigcommerce/dev-docs/development/assets/csv/tracking_carrier_values.csv).
     */
    readonly post: operations["createOrderShipments"];
    /** Deletes all shipments associated with an order. */
    readonly delete: operations["deleteAllOrderShipments"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  readonly "/orders/{order_id}/shipments/count": {
    /** Gets a count of the number of shipments that have been made for a single order. */
    readonly get: operations["getCountShipments"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  readonly "/orders/{order_id}/shipments/{shipment_id}": {
    /** Gets an order shipment. */
    readonly get: operations["getOrderShipment"];
    /** Updates an existing shipment associated with an order. */
    readonly put: operations["updateOrderShipment"];
    /** Deletes a shipment associated with an order. */
    readonly delete: operations["deleteOrderShipment"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** Shipment ID */
        readonly shipment_id: components["parameters"]["shipment_id"];
      };
    };
  };
  readonly "/orders/{order_id}/messages": {
    /** Gets the messages associated with an order. */
    readonly get: operations["getOrderMessages"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  readonly "/orders/{order_id}/products/{product_id}": {
    /** Gets a product line item associated with the order. */
    readonly get: operations["getAnOrderProduct"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** ID of the product */
        readonly product_id: components["parameters"]["product_id"];
      };
    };
  };
  readonly "/orders/{order_id}/shipping_addresses/{id}": {
    /**
     * Gets a shipping address associated with an order.
     *
     * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
     */
    readonly get: operations["getAShippingAddress"];
    /**
     * Update a shipping address associated with an order.
     *
     * **Note**: Updating will NOT trigger the recalculation of shipping cost and tax
     */
    readonly put: operations["updateAShippingAddress"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        readonly id: string;
      };
    };
  };
  readonly "/orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes": {
    /**
     * Gets all shipping quotes associated to an order.
     *
     * This is a read only endpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or via the API return a 204 for this endpoint since a shipping quote is not generated during that process.
     */
    readonly get: operations["getShippingQuotes"];
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** Shipping address ID */
        readonly shipping_address_id: components["parameters"]["shipping_address_id"];
      };
    };
  };
}

export interface components {
  readonly schemas: {
    /** Order object returned in responses. */
    readonly order_Resp: components["schemas"]["order_RespOnly"] &
      components["schemas"]["order_Shared"];
    readonly ordersCount_Full: {
      readonly statuses?: readonly components["schemas"]["ordersCountStatus"][];
      /** Total number of orders in the store */
      readonly count?: number;
    };
    readonly orderCoupons_Base: {
      /** Numeric ID of the coupon code. */
      readonly id?: number;
      /** Numeric ID of the associated coupon. */
      readonly coupon_id?: number;
      /** Numeric ID of the associated order. */
      readonly order_id?: number;
      /** Coupon code, as a string. */
      readonly code?: { readonly [key: string]: any };
      /** Amount of the discount. This information is returned as in integer. Dollar and percentage discounts will return the same. For example, $3 returns as '3' while 5% will return as 5. Check the discount type to see what type of discount is available. */
      readonly amount?: { readonly [key: string]: any };
      /**
       * 0: per_item_discount
       * 1: percentage_discount
       * 2: per_total_discount
       * 3: shipping_discount
       * 4: free_shipping
       * 5: promotions
       */
      readonly type?: 0 | 1 | 2 | 3 | 4 | 5;
      /**
       * The amount off the order the discount is worth. For example, if an order subtotal is $90 and the discount is $3 then it will return as 3.000. If the discount is
       * 3% then will return as 2.7000 or the amount of the order.  (Float, Float-As-String, Integer)
       */
      readonly discount?: number;
    };
    readonly orderProducts: {
      /** Numeric ID of this product within this order. */
      readonly id?: number;
      /** Numeric ID of the associated order. */
      readonly order_id?: number;
      /** Numeric ID of the product. */
      readonly product_id?: number;
      /** Numeric ID of the associated order address. */
      readonly order_address_id?: number;
      /** Alias for name_customer - The product name that is shown to customer in storefront. */
      readonly name?: string;
      /** User-defined product code/stock keeping unit (SKU). */
      readonly sku?: string;
      /** Type of product */
      readonly type?: "physical" | "digital";
      /** The product's base price. (Float, Float-As-String, Integer) */
      readonly base_price?: string;
      /** The product’s price excluding tax. (Float, Float-As-String, Integer) */
      readonly price_ex_tax?: string;
      /** The product’s price including tax. (Float, Float-As-String, Integer) */
      readonly price_inc_tax?: string;
      /**
       * Amount of tax applied to a single product.
       *
       * Price tax is calculated as:
       * `price_tax = price_inc_tax - price_ex_tax`
       *
       * (Float, Float-As-String, Integer)
       */
      readonly price_tax?: string;
      /** Total base price. (Float, Float-As-String, Integer) */
      readonly base_total?: string;
      /** Total base price excluding tax. (Float, Float-As-String, Integer) */
      readonly total_ex_tax?: string;
      /** Total base price including tax. (Float, Float-As-String, Integer) */
      readonly total_inc_tax?: string;
      /**
       * Total tax applied to products.
       * For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.
       *
       * If there is a manual discount applied total_tax is calcuted as the following:
       * `(price_ex_tax - discount)*tax_rate=total_tax`.
       * (Float, Float-As-String, Integer)
       */
      readonly total_tax?: string;
      /** Quantity of the product ordered. */
      readonly quantity?: number;
      /** The product's cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer) Read Only */
      readonly base_cost_price?: string;
      /**
       * The product's cost price including tax. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       */
      readonly cost_price_inc_tax?: string;
      /**
       * The products cost price excluding tax. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       */
      readonly cost_price_ex_tax?: string;
      /** Weight of the product. (Float, Float-As-String, Integer) */
      readonly weight?: { readonly [key: string]: any };
      /**
       * Tax applied to the product’s cost price. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       */
      readonly cost_price_tax?: string;
      /** Whether the product has been refunded. */
      readonly is_refunded?: boolean;
      /** The amount refunded from this transaction. (Float, Float-As-String, Integer) */
      readonly refunded_amount?: string;
      /** Numeric ID for the refund. */
      readonly return_id?: number;
      /** Name of gift-wrapping option */
      readonly wrapping_name?: string;
      /** The value of the base wrapping cost. (Float, Float-As-String, Integer) */
      readonly base_wrapping_cost?: string | number;
      /** The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer) */
      readonly wrapping_cost_ex_tax?: string;
      /** The value of the wrapping cost, including tax. (Float, Float-As-String, Integer) */
      readonly wrapping_cost_inc_tax?: string;
      /** Tax applied to gift-wrapping option. (Float, Float-As-String, Integer) */
      readonly wrapping_cost_tax?: string;
      /** Message to accompany gift-wrapping option. */
      readonly wrapping_message?: string;
      /** Quantity of this item shipped. */
      readonly quantity_shipped?: number;
      /** Name of promotional event/delivery date. */
      readonly event_name?: { readonly [key: string]: any };
      /** Date of the promotional event/scheduled delivery. */
      readonly event_date?: { readonly [key: string]: any };
      /** Fixed shipping cost for this product. (Float, Float-As-String, Integer) */
      readonly fixed_shipping_cost?: string;
      /** Item ID for this product on eBay. */
      readonly ebay_item_id?: string;
      /** Transaction ID for this product on eBay. */
      readonly ebay_transaction_id?: string;
      /** Numeric ID of the option set applied to the product. */
      readonly option_set_id?: { readonly [key: string]: any };
      /** ID of a parent product. */
      readonly parent_order_product_id?: { readonly [key: string]: any };
      /** Whether this product is bundled with other products. */
      readonly is_bundled_product?: boolean;
      /** Bin picking number for the physical product. */
      readonly bin_picking_number?: string;
      /** Array of objects containing discounts applied to the product. */
      readonly applied_discounts?: readonly components["schemas"]["orderProductAppliedDiscounts"][];
      /** Array of product option objects. */
      readonly product_options?: readonly components["schemas"]["orderProductOptions"][];
      /** ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set. */
      readonly external_id?: { readonly [key: string]: any };
      /** Universal Product Code. Can be written to for custom products and catalog products. */
      readonly upc?: string;
      /** Products `variant_id`. PUT or POST. This field is not available for custom products. */
      readonly variant_id?: number;
      /** The product name that is shown to customer in storefront. */
      readonly name_customer?: string;
      /** The product name that is shown to merchant in Control Panel. */
      readonly name_merchant?: string;
    };
    readonly orderCount: {
      readonly count?: number;
    };
    readonly orderShippingAddress: {
      /** ID of this shipping address. */
      readonly id?: number;
      /** ID of the order. */
      readonly order_id?: number;
      /** The total number of items in the order. */
      readonly items_total?: number;
      /** The number of items that have been shipped. */
      readonly items_shipped?: number;
      /** The base value of the order’s items. (Float, Float-As-String, Integer) */
      readonly base_cost?: string;
      /** The value of the order’s items, excluding tax. (Float, Float-As-String, Integer) */
      readonly cost_ex_tax?: string;
      /** The value of the order’s items, including tax. (Float, Float-As-String, Integer) */
      readonly cost_inc_tax?: string;
      /** The tax amount on the order. (Float, Float-As-String, Integer) */
      readonly cost_tax?: string;
      /** The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
      readonly cost_tax_class_id?: number;
      /** The base handling charge. (Float, Float-As-String, Integer) */
      readonly base_handling_cost?: string;
      /** The handling charge, excluding tax. (Float, Float-As-String, Integer) */
      readonly handling_cost_ex_tax?: string;
      /** The handling charge, including tax. (Float, Float-As-String, Integer) */
      readonly handling_cost_inc_tax?: string;
      readonly handling_cost_tax?: string;
      /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
      readonly handling_cost_tax_class_id?: number;
      /** Numeric ID of the shipping zone. */
      readonly shipping_zone_id?: number;
      /** Name of the shipping zone. */
      readonly shipping_zone_name?: string;
      readonly form_fields?: readonly components["schemas"]["formFields"][];
      readonly shipping_quotes?: components["schemas"]["shippingQuotes_Resource"];
    } & components["schemas"]["shippingAddress_Base"];
    readonly orderTaxes_Base: {
      /** The unique numeric identifier of the taxes object. */
      readonly id?: number;
      /** The unique numeric identifier of the order to which the tax was applied. NOTE: Not included if the store was using the automatic tax feature. */
      readonly order_id?: number;
      /** The unique numeric identifier of the order address object associated with the order. NOTE: Not included if the store was using the automatic tax feature. */
      readonly order_address_id?: number;
      /** The unique numeric identifier of the tax rate. */
      readonly tax_rate_id?: number;
      /** The unique numeric identifier of the tax class object. NOTE: Will be 0 if automatic tax was enabled, or if the default tax class was used. */
      readonly tax_class_id?: number;
      /** The name of the tax class object. */
      readonly name?: string;
      /** The name of the type of tax that was applied. NOTE: will be 'Automatic Tax' if automatic tax was enabled. */
      readonly class?: string;
      /** The tax rate.  The priority order in which the tax is applied (Float, Float-As-String, Integer) */
      readonly rate?: string;
      /** The order in which the tax is applied */
      readonly priority?: number;
      /** The amount of tax calculated on the order.   (Float, Float-As-String, Integer) */
      readonly priority_amount?: string;
      /** (Float, Float-As-String, Integer) */
      readonly line_amount?: string;
      /** If the `line_item_type` is `item` or `handling` then this field will be the order product id. Otherwise the field will return as null. */
      readonly order_product_id?: string;
      /** Type of tax on item */
      readonly line_item_type?:
        | "item"
        | "shipping"
        | "handling"
        | "gift-wrapping";
    };
    readonly orderShipment: {
      /** Shipment ID. */
      readonly id?: number;
      /** ID of the order associated with this shipment. */
      readonly order_id?: number;
      /** ID of this order’s customer. */
      readonly customer_id?: number;
      /** ID of the desired `shipping_address` associated with the shipment. */
      readonly order_address_id?: number;
      /** Creation date for the shipment. */
      readonly date_created?: string;
      /** Tracking number of the shipment. */
      readonly tracking_number?: string;
      /**
       * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       */
      readonly shipping_method?: string;
      /** Enum of the BigCommerce shipping-carrier integration/module. */
      readonly shipping_provider?:
        | "auspost"
        | "canadapost"
        | "endicia"
        | "usps"
        | "fedex"
        | "ups"
        | "upsready"
        | "upsonline"
        | "shipperhq"
        | " ";
      /**
       * Tracking carrier for the shipment.
       * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://docs.google.com/spreadsheets/d/1w9c_aECSCGyf-oOrvGeUniDl-ARGKemfZl0qSsav8D4/pubhtml?gid=0&single=true) and downloadable as a .CSV file [here](https://docs.google.com/spreadsheets/d/1mTueEynfcEmwsU2y2Jd2MX-8GKwNZrmlRMBcIElg9aY/pub?gid=0&single=true&output=csv).
       */
      readonly tracking_carrier?: string;
      /** Returns a tracking link from the shipping service. */
      readonly tracking_link?: string;
      /** Comments the shipper wishes to add. */
      readonly comments?: string;
      readonly billing_address?: components["schemas"]["billingAddress_Base"];
      readonly shipping_address?: components["schemas"]["shippingAddress_Base"];
      /** The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ] */
      readonly items?: readonly {
        readonly order_product_id?: number;
        readonly product_id?: number;
        readonly quantity?: number;
      }[];
    };
    /** Required to create an order. */
    readonly billingAddress_Full: components["schemas"]["billingAddress_Base"] & {
      readonly form_fields?: readonly components["schemas"]["formFields"][];
    };
    readonly products_Resource: {
      readonly url?: string;
      readonly resource?: string;
    };
    readonly shippingAddresses_Resource: {
      /** URL of the shipping address for api requests */
      readonly url?: string;
      readonly resource?: string;
    };
    readonly coupons_Resource: {
      /** URL of the coupons for api requests */
      readonly url?: string;
      /** resource of the coupons */
      readonly resource?: string;
    };
    /**
     * When applying a manual discount to an order (not a product level discount), the discount is distributed across products in proportion to the products price.
     * `(total_manual_discount*price_ex_tax)/subtotal_ex_tax`
     */
    readonly orderProductAppliedDiscounts: {
      /** Name of the coupon applied to order. */
      readonly id?: string;
      /** Amount of the discount.(Float, Float-As-String, Integer) */
      readonly amount?: string;
      /**
       * Name of the coupon.
       * `Manual Discount` when creating a manual discount.
       */
      readonly name?: string;
      /**
       * Coupon Code.
       * There is no code when creating a manual discount.
       */
      readonly code?: { readonly [key: string]: any };
      /** Determines if the discount if discount was applied at the Order or Product level. Read Only. */
      readonly target?: "order" | "product";
    };
    readonly orderProductOptions: {
      /** The unique numerical ID of the option; increments sequentially. */
      readonly id?: number;
      /** Numeric ID of the associated option. */
      readonly option_id?: number;
      readonly order_product_id?: number;
      readonly product_option_id?: number;
      /** Alias for display_name_customer. The product option name that is shown to customer in the storefront. */
      readonly display_name?: string;
      /** Alias for display_value_customer. The product option value that is shown to customer in storefront. */
      readonly display_value?: string;
      /** This value is used to access the Customer File Upload. */
      readonly value?: string;
      /** Option Type */
      readonly type?:
        | "Checkbox"
        | "Date field"
        | "File Upload"
        | "Multi-line text field"
        | "Multiple choice"
        | "Product Pick List"
        | "Swatch"
        | "Text field";
      /** The option’s name, as used internally. Must be unique. */
      readonly name?: string;
      /** How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles. */
      readonly display_style?: string;
      /** The product option name that is shown to customer in storefront. */
      readonly display_name_customer?: string;
      /** The product option name that is shown to merchant in Control Panel. */
      readonly display_name_merchant?: string;
      /** The product option value that is shown to customer in storefront. */
      readonly display_value_customer?: string;
      /** The product option value that is shown to merchant in Control Panel. */
      readonly display_value_merchant?: string;
    };
    /** Read-Only. If you have required address form fields they will need to be set as optional before creating an order via API. */
    readonly formFields: {
      /** Read-Only. If you have required address form fields they will need to be set as optional before creating an order via API. */
      readonly name?: string;
      /** Read-Only. If you have required address form fields they will need to be set as optional before creating an order via API. */
      readonly value?: string;
    };
    readonly orderMessages: readonly {
      readonly id?: number;
      readonly order_id?: number;
      readonly staff_id?: number;
      readonly customer_id?: number;
      readonly type?: string;
      readonly subject?: string;
      readonly message?: string;
      readonly status?: string;
      readonly is_flagged?: boolean;
      readonly date_created?: string;
      readonly customer?: { readonly [key: string]: any };
    }[];
    readonly shippingQuotes_Resource: {
      /**
       * This URL will return a 204 for shipping quotes. To return shipping quotes:
       * `/shipping_addresses/shipping_address_id/shipping_quotes`
       */
      readonly url?: string;
      /**
       * This URL will return a 204 for shipping quotes. To return shipping quotes:
       * `/shipping_addresses/shipping_address_id/shipping_quotes`
       */
      readonly resource?: string;
    };
    readonly shippingQuotes_Base: {
      /** Id of the shipping quote */
      readonly id?: string;
      /** uuid of the shipping quote */
      readonly uuid?: string;
      /** Time the order was created in RFC 2822 format. */
      readonly timestamp?: string;
      /** Id of the shipping provider */
      readonly shipping_provider_id?: string;
      /** This can vary based on the shipping provider. Manual shipping methods such as fixed will return an empty array. Shipping providers such as UPS will return an object with the shipping information. Since the shipping quote is tied to a shipping address only one quote will return in the response. */
      readonly shipping_provider_quote?: readonly {
        readonly [key: string]: any;
      }[];
      /** Code of the shipping provider */
      readonly provider_code?: string;
      /** Code of the shipping carrier */
      readonly carrier_code?: string;
      /** Type of delivery. This can vary based on shipping quote. */
      readonly rate_code?: string;
      /** This can vary based on shipping quote */
      readonly rate_id?: string;
      /** Shipping method ID */
      readonly method_id?: number;
    };
    readonly orderShipment_Post: {
      /** ID of the desired `shipping_address` associated with the shipment. */
      readonly order_address_id?: number;
      /** Tracking number of the shipment. */
      readonly tracking_number?: string;
      /**
       * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       */
      readonly shipping_method?: string;
      /** Enum of the BigCommerce shipping-carrier integration/module. */
      readonly shipping_provider?:
        | "auspost"
        | "canadapost"
        | "endicia"
        | "usps"
        | "fedex"
        | "ups"
        | "upsready"
        | "upsonline"
        | "shipperhq";
      /**
       * Tracking carrier for the shipment.
       * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://docs.google.com/spreadsheets/d/1w9c_aECSCGyf-oOrvGeUniDl-ARGKemfZl0qSsav8D4/pubhtml?gid=0&single=true) and downloadable as a .CSV file [here](https://docs.google.com/spreadsheets/d/1mTueEynfcEmwsU2y2Jd2MX-8GKwNZrmlRMBcIElg9aY/pub?gid=0&single=true&output=csv).
       */
      readonly tracking_carrier?: string;
      /** Comments the shipper wishes to add. */
      readonly comments?: string;
      /** The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ] */
      readonly items?: readonly {
        readonly order_product_id?: number;
        readonly quantity?: number;
      }[];
    };
    readonly orderShipment_Put: {
      /** ID of the desired `shipping_address` associated with the shipment. */
      readonly order_address_id?: number;
      /** Tracking number of the shipment. */
      readonly tracking_number?: string;
      /**
       * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       */
      readonly shipping_method?: string;
      /** Enum of the BigCommerce shipping-carrier integration/module. */
      readonly shipping_provider?:
        | "auspost"
        | "canadapost"
        | "endicia"
        | "usps"
        | "fedex"
        | "ups"
        | "upsready"
        | "upsonline"
        | "shipperhq";
      /**
       * Tracking carrier for the shipment.
       * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://docs.google.com/spreadsheets/d/1w9c_aECSCGyf-oOrvGeUniDl-ARGKemfZl0qSsav8D4/pubhtml?gid=0&single=true) and downloadable as a .CSV file [here](https://docs.google.com/spreadsheets/d/1mTueEynfcEmwsU2y2Jd2MX-8GKwNZrmlRMBcIElg9aY/pub?gid=0&single=true&output=csv).
       */
      readonly tracking_carrier?: string;
      /** Comments the shipper wishes to add. */
      readonly comments?: string;
    };
    readonly orderStatus_Base: {
      /** The id of the type of order status */
      readonly id?: number;
      /** Name of the type of order status */
      readonly name?: string;
      /** System name of the type of order status. */
      readonly system_label?: string;
      /** Custom order status label given in the Control Panel */
      readonly custom_label?: string;
      /** System description of the order status */
      readonly system_description?: string;
    };
    readonly ordersCountStatus: components["schemas"]["orderStatus_Base"] & {
      /** Number of orders that exist with this status */
      readonly count?: number;
      /** The sort order of the order status from the Control Panel */
      readonly sort_order?: number;
    };
    /** Order properties used in `PUT` and `POST` requests and responses. */
    readonly order_Shared: {
      /** The value of the base handling cost. (Float, Float-As-String, Integer) */
      readonly base_handling_cost?: string;
      /** The value of the base shipping cost. (Float, Float-As-String, Integer) */
      readonly base_shipping_cost?: string;
      /** The value of the base wrapping cost. (Float, Float-As-String, Integer) */
      readonly base_wrapping_cost?: string | number;
      readonly billing_address?: components["schemas"]["billingAddress_Full"];
      /** Shows where the order originated. The channel_id will default to 1. */
      readonly channel_id?: number;
      readonly customer_id?: number;
      /** Message that the customer entered (number, optional) -o the `Order Comments` box during checkout. */
      readonly customer_message?: string;
      /** The date this order was created. If not specified, will default to the current time. The date should be in RFC 2822 format. */
      readonly date_created?: string;
      /** The currency code of the transactional currency the shopper pays in; writeable when multi-currency is enabled. */
      readonly default_currency_code?: string;
      /** Amount of discount for this transaction. (Float, Float-As-String, Integer) */
      readonly discount_amount?: string;
      /** If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`. */
      readonly ebay_order_id?: string;
      /** ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set. */
      readonly external_id?: { readonly [key: string]: any };
      /** For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example: `POS`. Otherwise, the value will be null. */
      readonly external_source?: { readonly [key: string]: any };
      /** The full name of the country where the customer made the purchase, based on the IP. */
      readonly geoip_country?: string;
      /** The country where the customer made the purchase, in ISO2 format, based on the IP. */
      readonly geoip_country_iso2?: string;
      /** The value of the handling cost, excluding tax. (Float, Float-As-String, Integer) */
      readonly handling_cost_ex_tax?: string;
      /** The value of the handling cost, including tax. (Float, Float-As-String, Integer) */
      readonly handling_cost_inc_tax?: string;
      /** IP Address of the customer, if known. */
      readonly ip_address?: string;
      /** Indicates whether the order was deleted (archived). Set to to true, to archive an order. */
      readonly is_deleted?: boolean;
      /** The number of items that have been shipped. */
      readonly items_shipped?: number;
      /** The total number of items in the order. */
      readonly items_total?: number;
      /** Whether this is an order for digital products. */
      readonly order_is_digital?: boolean;
      /** The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc. */
      readonly payment_method?:
        | "Credit Card"
        | "Cash"
        | "Test Payment Gateway"
        | "Manual";
      /** The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used). */
      readonly payment_provider_id?: { readonly [key: string]: any };
      /** The amount refunded from this transaction. (Float, Float-As-String, Integer) */
      readonly refunded_amount?: string;
      /** The value of shipping cost, excluding tax. (Float, Float-As-String, Integer) */
      readonly shipping_cost_ex_tax?: string;
      /** The value of shipping cost, including tax. (Float, Float-As-String, Integer) */
      readonly shipping_cost_inc_tax?: string;
      /** Any additional notes for staff. */
      readonly staff_notes?: string;
      /** The status ID of the order. */
      readonly status_id?: number;
      /** Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer) */
      readonly subtotal_ex_tax?: string;
      /** Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer) */
      readonly subtotal_inc_tax?: string;
      /**
       * BasicTaxProvider - Tax is set to manual.
       *
       * AvaTaxProvider - This is for when the tax provider has been set to automatic and the order was NOT created by the API. Used for Avalara.
       *
       * "" (blank) - When the tax provider is unknown. This includes legacy orders and orders previously created via API.
       * This can be set when creating an order using a POST.
       */
      readonly tax_provider_id?: "BasicTaxProvider" | "AvaTaxProvider" | "";
      /** The customer's locale */
      readonly customer_locale?: string;
      /** Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer) */
      readonly total_ex_tax?: string;
      /** Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer) */
      readonly total_inc_tax?: string;
      /** The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer) */
      readonly wrapping_cost_ex_tax?: string;
      /** The value of the wrapping cost, including tax. (Float, Float-As-String, Integer) */
      readonly wrapping_cost_inc_tax?: string;
    };
    readonly billingAddress_Base: {
      readonly first_name?: string;
      readonly last_name?: string;
      readonly company?: string;
      readonly street_1?: string;
      readonly street_2?: string;
      readonly city?: string;
      readonly state?: string;
      /** The billing address must include the zip code. The zip code must be two or more characters. */
      readonly zip: number;
      readonly country?: string;
      readonly country_iso2?: string;
      readonly phone?: number;
      readonly email?: string;
    };
    /** Shipping Address properties common to all requests and responses. */
    readonly shippingAddress_Base: {
      readonly first_name?: string;
      readonly last_name?: string;
      readonly company?: string;
      /** Street address (first line). */
      readonly street_1?: string;
      /** Street address (second line). */
      readonly street_2?: string;
      readonly city?: string;
      readonly state?: string;
      /** Zip or postal code, as a string. */
      readonly zip?: string;
      readonly country?: string;
      /** 2-letter ISO Alpha-2 code for the country. */
      readonly country_iso2?: string;
      /** Recipient's telephone number. */
      readonly phone?: string;
      /** Recipient's email address. */
      readonly email?: string;
      /** Text code identifying the BigCommerce shipping module selected by the customer. */
      readonly shipping_method?: string;
    };
    /** Properties that are only for order response bodies. */
    readonly order_RespOnly: {
      /** Read-only. The ID of the order. */
      readonly id?: number;
      /** A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
      readonly date_modified?: string;
      /** A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
      readonly date_shipped?: string;
      /** The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
      readonly cart_id?: string;
      /** The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation. */
      readonly status?: string;
      /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
      readonly subtotal_tax?: string;
      /** A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
      readonly shipping_cost_tax?: string;
      /** Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
      readonly shipping_cost_tax_class_id?: number;
      /** A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
      readonly handling_cost_tax?: string;
      /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
      readonly handling_cost_tax_class_id?: number;
      /** A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
      readonly wrapping_cost_tax?: string;
      /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
      readonly wrapping_cost_tax_class_id?: number;
      /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. */
      readonly payment_status?:
        | "authorized"
        | "captured"
        | "capture pending"
        | "declined"
        | "held for review"
        | "paid"
        | "partially refunded"
        | "pending"
        | "refunded"
        | "void"
        | "void pending";
      /** Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
      readonly store_credit_amount?: string;
      /** A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
      readonly gift_certificate_amount?: string;
      /** The display currency ID. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT. */
      readonly currency_id?: number;
      /** The currency code of the display currency used to present prices on the storefront. A read-only value. Do not pass in a POST or PUT. */
      readonly currency_code?: string;
      /** The exchange rate between the store's default currency and the display currency. A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
      readonly currency_exchange_rate?: string;
      /** The transactional currency ID. A read-only value. Do not pass in a POST or PUT. */
      readonly default_currency_id?: number;
      /** A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
      readonly coupon_discount?: string;
      /** The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT. */
      readonly shipping_address_count?: number;
      /** Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT. */
      readonly is_email_opt_in?: boolean;
      /** Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT. */
      readonly order_source?: string;
      readonly products?: components["schemas"]["products_Resource"];
      readonly shipping_addresses?: components["schemas"]["shippingAddresses_Resource"];
      readonly coupons?: components["schemas"]["coupons_Resource"];
      /** The staus ID of the order. */
      readonly status_id?: number;
    };
    /**
     * To `add` a custom product to an existing order, don't include `id` in the payload. At least one of these fields `name`, `name_customer`, or `name_merchant` must be provided with non-empty value.
     *      To `update` an order product line, `id` is required. The payload should only contain the fields that needs to be updated. Those fields that are omitted will not be changed.
     *      Note:
     *      - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     *      - `name` and `name_customer` always hold the same value, updating either `name` or `name_customer` will change the value for both of those fields.
     *      - If both fields `name` and `name_customer` are present, they must have same value.
     *      - When updating an existing order product, if both fields `name` and `name_customer` are omitted from the request, they will not be updated.
     *      - When updating an existing order product, if `name_merchant` is omitted from the request, it will not be updated.
     *      - When adding product, if `name_merchant` is omitted, it will be set to the value of `name` (or `name_customer`).
     *      - When adding a new product to an existing order, if both fields `name` and `name_customer` are omitted, they will be set to the value of `name_merchant`.
     */
    readonly orderCustomProduct_Put: {
      /** Alias for name_customer. The product name that is shown to customer in storefront. */
      readonly name: string;
      /** The product name that is shown to customer in storefront. */
      readonly name_customer?: string;
      /** The product name that is shown to merchant in control panel. */
      readonly name_merchant?: string;
      readonly quantity: number;
      readonly price_ex_tax: number;
      readonly price_inc_tax: number;
      readonly sku?: string;
      readonly upc?: string;
      /** ID of the product line */
      readonly id?: number;
    };
    /**
     * To `add` product to an existing order, don't include `id` in the payload. And note that the `product_options` are required if adding a product with variants.
     * To `update` an order product line, `id` is required. The payload should only contain the fields that needs to be updated. Those fields that are omitted will not be changed.
     * Note:
     * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
     * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     * - When updating and existing order product without changing the variant, product or product options, if `xxx_merchant` is not part of the request it will not be updated.
     * - When updating an existing order product, if both fields `xxx` and `xxx_customer` not part of the request they will not be updated.
     * - When adding a product to and existing order or changing the variant, product, or product options.
     * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer, and `xxx_merchant` if `xxx_merchant` is omitted, it will default to have the catalog value.
     * - If both fields `xxx` and `xxx_customer` are omitted from the request, they will default to the catalog value.
     */
    readonly orderCatalogProduct_Put: {
      /** The order product `id`. To add a product to an existing order, don't include `id ` in the payload. `id` is required when updating an order product. */
      readonly id?: number;
    } & components["schemas"]["orderCatalogProduct_Post"];
    /**
     * Note:
     * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
     * - Empty strings `''` and `null` are invalid for `xxx` and `xxx_customer, and `xxx_merchant`.
     * - `xxx`, `xxx_customer`, and `xxx_merchant` default to the value from `catalog` if not supplied in the request.
     */
    readonly orderCatalogProduct_Post: {
      readonly product_id?: number;
      /** Alias for `name_customer`. The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields. */
      readonly name?: string;
      /** The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields. */
      readonly name_customer?: string;
      /** The product name that is shown to merchant in control panel. */
      readonly name_merchant?: string;
      /** `product_options` are required when adding a product with variants. */
      readonly product_options?: readonly {
        readonly id?: number;
        readonly value?: string;
        /** Alias for display_name_customer. The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields. */
        readonly display_name?: string;
        /** The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields. */
        readonly display_name_customer?: string;
        /** The product option name that is shown to merchant in Control Panel. */
        readonly display_name_merchant?: string;
        /** Alias for display_value_customer. The product option value that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields. */
        readonly display_value?: string;
        /** The product option value that is shown to merchant in Control Panel. */
        readonly display_value_merchant?: string;
        /** The product option value that is shown to customer in storefront.`xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields. */
        readonly display_value_customer?: string;
      }[];
      readonly quantity?: number;
      readonly price_inc_tax?: number;
      readonly price_ex_tax?: number;
      readonly upc?: string;
      /** "" */
      readonly variant_id?: number;
      readonly wrapping_name?: string;
      readonly wrapping_message?: string;
      readonly wrapping_cost_ex_tax?: number;
      readonly wrapping_cost_inc_tax?: number;
    };
    /**
     * At least one of these fields `name`, `name_customer`, or `name_merchant` must be provided with non-empty value.
     * Note: `name` and `name_customer` always hold the same value, updating either `name` or `name_customer` will change value for both of those fields.
     * If both fields `name` and `name_customer` are present, they must have the same value.
     * Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     * If both fields `name` and `name_customer` are omitted, they will be populated by the `name_merchant` value.
     * If field `name_merchant` is omitted it will be populated by the value of `name` (or `name_customer`).
     */
    readonly orderCustomProduct_Post: {
      /** Alias for name_customer. The product name that is shown to customer in storefront. */
      readonly name: string;
      /** The product name that is shown to customer in storefront. */
      readonly name_customer?: string;
      /** The product name that is shown to merchant in control panel. */
      readonly name_merchant?: string;
      readonly quantity: number;
      readonly price_inc_tax: number;
      readonly price_ex_tax: number;
      readonly upc?: string;
      readonly sku?: string;
    };
    readonly order_Put: {
      readonly products?: readonly (Partial<
        components["schemas"]["orderCatalogProduct_Put"]
      > &
        Partial<components["schemas"]["orderCustomProduct_Put"]>)[];
      readonly shipping_addresses?: components["schemas"]["shippingAddress_Base"];
    } & components["schemas"]["order_Shared"];
    /** Products and Billing address only required for POST operation. */
    readonly order_Post: {
      readonly products?: readonly (Partial<
        components["schemas"]["orderCustomProduct_Post"]
      > &
        Partial<components["schemas"]["orderCatalogProduct_Post"]>)[];
      readonly shipping_addresses?: readonly components["schemas"]["shippingAddress_Base"][];
    } & components["schemas"]["order_Shared"];
  };
  readonly responses: {
    /** Get All Order Status Collection Response */
    readonly orderStatusCollection_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["orderStatus_Base"][];
      };
    };
    readonly orderStatus_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderStatus_Base"];
      };
    };
    readonly orderCollection_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["order_Resp"][];
      };
    };
    /** Order Countr response collection. */
    readonly ordersCount_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["ordersCount_Full"];
      };
    };
    /** Order Response. */
    readonly order_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["order_Resp"];
      };
    };
    readonly orderCouponsCollection_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["orderCoupons_Base"][];
      };
    };
    readonly orderMessagesCollection_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderMessages"];
      };
    };
    readonly orderProductsCollection_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["orderProducts"][];
      };
    };
    readonly orderProductLineItem_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderProducts"];
      };
    };
    readonly orderShipmentCollection_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["orderShipment"][];
      };
    };
    readonly orderShipment_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderShipment"];
      };
    };
    readonly orderCount_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderCount"];
      };
    };
    readonly orderShippingAddressCollection_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["orderShippingAddress"][];
      };
    };
    readonly orderShippingAddress_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderShippingAddress"];
      };
    };
    /** This response can vary depending on the shipping provider. */
    readonly shippingQuotes_Resp: {
      readonly content: {
        readonly "application/json": components["schemas"]["shippingQuotes_Base"];
        readonly "Fixed Shipping": unknown;
        readonly "UPS Example": unknown;
      };
    };
    readonly orderTaxes_Resp: {
      readonly content: {
        readonly "application/json": readonly components["schemas"]["orderTaxes_Base"][];
      };
    };
    readonly "actual-order-response": {
      readonly content: {
        readonly "application/json": {
          /** The ID of the order, a read-only value. Do not pass in PUT or POST. */
          readonly id?: number;
          /** The ID of the customer placing the order; or 0 if it was a guest order. */
          readonly customer_id?: number;
          /** The date this order was created. If not specified, will default to the current time. The date should be in RFC 2822 format, e.g.: Tue, 20 Nov 2012 00:00:00 +0000 */
          readonly date_created?: string;
          /** A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
          readonly date_modified?: string;
          /** A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
          readonly date_shipped?: string;
          /** The status ID of the order. */
          readonly status_id?: number;
          /** The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
          readonly cart_id?: string;
          /** The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation. */
          readonly status?: string;
          /** Contains the same (string, optiona) - value as the Order Statuses object's `custom_label` property. */
          readonly custom_status?: string;
          /** Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer) */
          readonly subtotal_ex_tax?: string;
          /** Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer) */
          readonly subtotal_inc_tax?: string;
          /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
          readonly subtotal_tax?: string;
          /** The value of the base shipping cost. (Float, Float-As-String, Integer) */
          readonly base_shipping_cost?: string;
          /** The value of shipping cost, excluding tax. (Float, Float-As-String, Integer) */
          readonly shipping_cost_ex_tax?: string;
          /** The value of shipping cost, including tax. (Float, Float-As-String, Integer) */
          readonly shipping_cost_inc_tax?: string;
          /** A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
          readonly shipping_cost_tax?: string;
          /** Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
          readonly shipping_cost_tax_class_id?: number;
          /** The value of the base handling cost. (Float, Float-As-String, Integer) */
          readonly base_handling_cost?: string;
          /** The value of the handling cost, excluding tax. (Float, Float-As-String, Integer) */
          readonly handling_cost_ex_tax?: string;
          /** The value of the handling cost, including tax. (Float, Float-As-String, Integer) */
          readonly handling_cost_inc_tax?: { readonly [key: string]: any };
          /** A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
          readonly handling_cost_tax?: string;
          /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
          readonly handling_cost_tax_class_id?: number;
          /** The value of the base wrapping cost. */
          readonly base_wrapping_cost?: string | number;
          /** The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer) */
          readonly wrapping_cost_ex_tax?: string;
          /** The value of the wrapping cost, including tax. (Float, Float-As-String, Integer) */
          readonly wrapping_cost_inc_tax?: string;
          /** A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
          readonly wrapping_cost_tax?: string;
          /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.) */
          readonly wrapping_cost_tax_class_id?: number;
          /** Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer) */
          readonly total_ex_tax?: string;
          /** Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer) */
          readonly total_inc_tax?: string;
          /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer) */
          readonly total_tax?: string;
          /** The total number of items in the order. */
          readonly items_total?: number;
          /** The number of items that have been shipped. */
          readonly items_shipped?: number;
          /** The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc. */
          readonly payment_method?: string;
          /** The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used). */
          readonly payment_provider_id?: { readonly [key: string]: any };
          /** A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. */
          readonly payment_status?: string;
          /** The amount refunded from this transaction. (Float, Float-As-String, Integer) */
          readonly refunded_amount?: string;
          /** Whether this is an order for digital products. */
          readonly order_is_digital?: boolean;
          /** Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
          readonly store_credit_amount?: string;
          /** A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
          readonly gift_certificate_amount?: string;
          /** IP Address of the customer, if known. */
          readonly ip_address?: string;
          /** The full name of the country where the customer made the purchase, based on the IP. */
          readonly geoip_country?: string;
          /** The country where the customer made the purchase, in ISO2 format, based on the IP. */
          readonly geoip_country_iso2?: string;
          /** The display currency ID. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT. */
          readonly currency_id?: number;
          /** The currency code of the display currency used to present prices on the storefront. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT. */
          readonly currency_code?: string;
          /** A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
          readonly currency_exchange_rate?: string;
          /** The transactional currency ID. A read-only value. Do not pass in a POST or PUT. */
          readonly default_currency_id?: number;
          /** The currency code of the transactional currency the shopper pays in. A read-only value. Do not pass in a POST or PUT. */
          readonly default_currency_code?: string;
          /** Any additional notes for staff. */
          readonly staff_notes?: string;
          /** Message that the customer entered (number, optiona) -o the `Order Comments` box during checkout. */
          readonly customer_message?: string;
          /** Amount of discount for this transaction. (Float, Float-As-String, Integer) */
          readonly discount_amount?: string;
          /** A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer) */
          readonly coupon_discount?: string;
          /** The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT. */
          readonly shipping_address_count?: number;
          /** Indicates whether the order was deleted (archived). Set to to true, to archive an order. */
          readonly is_deleted?: boolean;
          /** Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT. */
          readonly is_email_opt_in?: boolean;
          /** Credit card type */
          readonly credit_card_type?: { readonly [key: string]: any };
          /** If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`. */
          readonly ebay_order_id?: string;
          /** Required to create an order. */
          readonly billing_address?: {
            readonly first_name?: string;
            readonly last_name?: string;
            readonly company?: string;
            readonly street_1?: string;
            readonly street_2?: string;
            readonly city?: string;
            readonly state?: string;
            readonly zip?: string;
            readonly country?: string;
            readonly country_iso2?: string;
            readonly phone?: string;
            readonly email?: string;
            readonly form_fields?: readonly {
              /** Name of the form field */
              readonly name?: string;
              /** Value of the form field */
              readonly value?: string;
            }[];
          };
          /** Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT. */
          readonly order_source?: string;
          /** For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example: `POS`. Otherwise, the value will be null. */
          readonly external_source?: { readonly [key: string]: any };
          readonly products?: components["schemas"]["products_Resource"];
          readonly shipping_addresses?: components["schemas"]["shippingAddresses_Resource"];
          readonly coupons?: components["schemas"]["coupons_Resource"];
          /** ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set. */
          readonly external_id?: { readonly [key: string]: any };
          /** ID of the merchant */
          readonly external_merchant_id?: { readonly [key: string]: any };
          /** Shows where the order originated. The channel_id will default to 1. Read-Only. */
          readonly channel_id?: number;
          /**
           * BasicTaxProvider - Tax is set to manual.
           *
           * AvaTaxProvider - This is for when the tax provider has been set to automatic and the order was NOT created by the API. Used for Avalara.
           *
           * "" (blank) - When the tax provider is unknown. This includes legacy orders and orders previously created via API.
           * This can be set when creating an order using a POST.
           */
          readonly tax_provider_id?: "BasicTaxProvider" | "AvaTaxProvider" | "";
          /** The customer's locale */
          readonly customer_locale?: { readonly [key: string]: any };
        };
      };
    };
  };
  readonly parameters: {
    /** The minimum order ID. */
    readonly min_id: number;
    /** The maximum order ID. */
    readonly max_id: number;
    /** The minimum order total in float format. eg. 12.50 */
    readonly min_total: number;
    /** The maximum order total in float format. eg. 12.50 */
    readonly max_total: number;
    /** Customer ID */
    readonly customer_id: number;
    /** The email of the customer. */
    readonly email: string;
    /** The staus ID of the order. You can get the status id from the `/orders` endpoints. */
    readonly status_id: number;
    /** The staus ID of the order. You can get the status id from the `/orders` endpoints. */
    readonly status_id_path: number;
    /** The cart ID of the order. */
    readonly cart_id: string;
    /** If the order was deleted or archived. */
    readonly is_deleted: boolean;
    /** The payment method used on the order. */
    readonly payment_method:
      | "Manual"
      | "Cash on Delivery"
      | "Credit Card"
      | "Test Payment Gateway"
      | "Pay In Store";
    /**
     * Minimum date the order was created in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    readonly min_date_created: string;
    /**
     * Maximum date the order was created in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    readonly max_date_created: string;
    /**
     * Minimum date the order was modified in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    readonly min_date_modified: string;
    /**
     * Maximum date the order was modified in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    readonly max_date_modified: string;
    /** The page to return in the response. */
    readonly page: number;
    /** Number of results to return. */
    readonly limit: number;
    /** Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. E.g. `sort=date_created:desc`. */
    readonly sort:
      | "id"
      | "customer_id"
      | "date_created"
      | "date_modified"
      | "status_id"
      | "channel_id"
      | "external_id";
    readonly Accept: string;
    readonly "Content-Type": string;
    /** Status of the order message. */
    readonly status: "read" | "unread";
    /** If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages). */
    readonly is_flagged: boolean;
    /** ID of the order */
    readonly order_id_path: number;
    /** ID of the order */
    readonly order_id_query: number;
    /** ID of the product */
    readonly product_id: number;
    /** Shipping address ID */
    readonly shipping_address_id: number;
    /** Shipment ID */
    readonly shipment_id: number;
    /** The Channel ID of the Order. */
    readonly channel_id: number;
  };
}

export interface operations {
  /** Gets an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview). */
  readonly getAnOrder: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["order_Resp"];
      /** "The requested resource was not found." */
      readonly 404: {
        readonly content: {
          readonly "application/json": { readonly [key: string]: any };
        };
      };
    };
  };
  /** Updates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview). */
  readonly updateAnOrder: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["order_Resp"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["order_Put"];
      };
    };
  };
  /** Archives an order. */
  readonly deleteAnOrder: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Gets an array of orders in the store organized by order status. */
  readonly getCountOrder: {
    readonly parameters: {
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["ordersCount_Resp"];
    };
  };
  /**
   * Gets a list of orders using the filter query.
   *
   * **Notes**
   *
   * The default sort is by order id, from lowest to highest.
   */
  readonly getAllOrders: {
    readonly parameters: {
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
      readonly query: {
        /** The minimum order ID. */
        readonly min_id?: components["parameters"]["min_id"];
        /** The maximum order ID. */
        readonly max_id?: components["parameters"]["max_id"];
        /** The minimum order total in float format. eg. 12.50 */
        readonly min_total?: components["parameters"]["min_total"];
        /** The maximum order total in float format. eg. 12.50 */
        readonly max_total?: components["parameters"]["max_total"];
        /** Customer ID */
        readonly customer_id?: components["parameters"]["customer_id"];
        /** The email of the customer. */
        readonly email?: components["parameters"]["email"];
        /** The staus ID of the order. You can get the status id from the `/orders` endpoints. */
        readonly status_id?: components["parameters"]["status_id"];
        /** The cart ID of the order. */
        readonly cart_id?: components["parameters"]["cart_id"];
        /** The payment method used on the order. */
        readonly payment_method?: components["parameters"]["payment_method"];
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        readonly min_date_created?: components["parameters"]["min_date_created"];
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        readonly max_date_created?: components["parameters"]["max_date_created"];
        /**
         * Minimum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        readonly min_date_modified?: components["parameters"]["min_date_modified"];
        /**
         * Maximum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        readonly max_date_modified?: components["parameters"]["max_date_modified"];
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
        /** Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. E.g. `sort=date_created:desc`. */
        readonly sort?: components["parameters"]["sort"];
        /** If the order was deleted or archived. */
        readonly is_deleted?: components["parameters"]["is_deleted"];
        /** The Channel ID of the Order. */
        readonly channel_id?: components["parameters"]["channel_id"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderCollection_Resp"];
    };
  };
  /**
   * Creates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).
   *
   * An order can be created with an existing catalog product or a custom product.
   *
   * **Required Fields**
   *
   * *   products
   * *   billing_address
   */
  readonly createAnOrder: {
    readonly parameters: {
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["order_Resp"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["order_Post"];
      };
    };
  };
  /** Archives all orders. */
  readonly deleteAllOrders: {
    readonly parameters: {
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /**
   * Lists all order coupons. Optional parameters can be passed in.
   *
   * |Type `int`|Type Name|
   * |-|-|
   * |`0`|`per_item_discount`|
   * |`1`|`percentage_discount`|
   * |`2`|`per_total_discount`|
   * |`3`|`shipping_discount`|
   * |`4`|`free_shipping`|
   * |`5`|`promotion`|
   */
  readonly getAllOrderCoupons: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
      readonly query: {
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderCouponsCollection_Resp"];
    };
  };
  /** Lists all order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`. */
  readonly getAllOrderProducts: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
      readonly query: {
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderProductsCollection_Resp"];
    };
  };
  /**
   * Get all shipping addresses on an order using the `order_id`.
   *
   * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
   */
  readonly getAllShippingAddresses: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
      readonly query: {
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderShippingAddressCollection_Resp"];
    };
  };
  /**
   * Returns a Collection of All Order Statuses.
   *
   * **Order Status Descriptions:**
   * |Status ID | Name  | Description |
   * |--|--|--|
   * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
   * | 1 | Pending |Customer started the checkout process, but did not complete it. |
   * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
   * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
   * | 4 | Refunded | Seller has used the Refund action. |
   * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
   * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
   * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
   * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
   * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
   * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
   * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
   * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
   * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
   * | 14 | Partially Refunded | Seller has partially refunded the order. |
   */
  readonly getOrderStatus: {
    readonly parameters: {
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderStatusCollection_Resp"];
    };
  };
  /**
   * Returns a single order status.
   *
   * **Order Status Descriptions:**
   * |Status ID | Name  | Description |
   * |--|--|--|
   * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
   * | 1 | Pending |Customer started the checkout process, but did not complete it. |
   * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
   * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
   * | 4 | Refunded | Seller has used the Refund action. |
   * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
   * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
   * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
   * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
   * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
   * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
   * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
   * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
   * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
   * | 14 | Partially Refunded | Seller has partially refunded the order. |
   */
  readonly getAOrderStatus: {
    readonly parameters: {
      readonly path: {
        /** The staus ID of the order. You can get the status id from the `/orders` endpoints. */
        readonly status_id: components["parameters"]["status_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderStatus_Resp"];
    };
  };
  /**
   * Gets all order taxes using `order_id`.
   * Each tax applied to an order. This information can be useful for reporting purposes.
   * Pass in the query parameter `?details=true` to return extra details about order taxes.
   * `order_product_id` and `line_item_type` are also returned.
   *
   * All values are read-only.
   */
  readonly getOrderTaxes: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
      readonly query: {
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
        /** To return detailed tax information, pass in the details query. */
        readonly details?: string;
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderTaxes_Resp"];
    };
  };
  /** Gets a list of all shipments on an order. */
  readonly getAllOrderShipments: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
      readonly query: {
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderShipmentCollection_Resp"];
    };
  };
  /**
   * Creates an *Order Shipment*. For more details, see [Shipping an Order](/api-docs/orders/orders-api-overview#shipping-an-order).
   *
   * **Required Fields**
   * *   order_address_id
   * *   items
   *
   * **Usage Notes**
   *
   * Presuming that a valid carrier code is used, a tracking link is generated if either `shipping_provider` or `tracking_carrier` is supplied alongside a tracking number. Providing only the tracking number will result in an unclickable text in the customer facing email.
   *
   * Acceptable values for `shipping_provider` include an empty string (`""`), auspost, canadapost, endicia, usps, fedex, ups, upsready, upsonline, or shipperhq.
   *
   * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://github.com/bigcommerce/dev-docs/blob/development/assets/csv/tracking_carrier_values.csv) and downloadable as a .CSV file [here](https://raw.githubusercontent.com/bigcommerce/dev-docs/development/assets/csv/tracking_carrier_values.csv).
   */
  readonly createOrderShipments: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 201: components["responses"]["orderShipment_Resp"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderShipment_Post"];
      };
    };
  };
  /** Deletes all shipments associated with an order. */
  readonly deleteAllOrderShipments: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Gets a count of the number of shipments that have been made for a single order. */
  readonly getCountShipments: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderCount_Resp"];
    };
  };
  /** Gets an order shipment. */
  readonly getOrderShipment: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** Shipment ID */
        readonly shipment_id: components["parameters"]["shipment_id"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderShipment_Resp"];
    };
  };
  /** Updates an existing shipment associated with an order. */
  readonly updateOrderShipment: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** Shipment ID */
        readonly shipment_id: components["parameters"]["shipment_id"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderShipment_Resp"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["orderShipment_Put"];
      };
    };
  };
  /** Deletes a shipment associated with an order. */
  readonly deleteOrderShipment: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** Shipment ID */
        readonly shipment_id: components["parameters"]["shipment_id"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Gets the messages associated with an order. */
  readonly getOrderMessages: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
      readonly query: {
        /** The minimum order ID. */
        readonly min_id?: components["parameters"]["min_id"];
        /** The maximum order ID. */
        readonly max_id?: components["parameters"]["max_id"];
        /** Customer ID */
        readonly customer_id?: components["parameters"]["customer_id"];
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        readonly min_date_created?: components["parameters"]["min_date_created"];
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        readonly max_date_created?: components["parameters"]["max_date_created"];
        /** If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages). */
        readonly is_flagged?: components["parameters"]["is_flagged"];
        /** Status of the order message. */
        readonly status?: components["parameters"]["status"];
        /** The page to return in the response. */
        readonly page?: components["parameters"]["page"];
        /** Number of results to return. */
        readonly limit?: components["parameters"]["limit"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderMessagesCollection_Resp"];
    };
  };
  /** Gets a product line item associated with the order. */
  readonly getAnOrderProduct: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** ID of the product */
        readonly product_id: components["parameters"]["product_id"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderProductLineItem_Resp"];
    };
  };
  /**
   * Gets a shipping address associated with an order.
   *
   * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
   */
  readonly getAShippingAddress: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        readonly id: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["orderShippingAddress_Resp"];
    };
  };
  /**
   * Update a shipping address associated with an order.
   *
   * **Note**: Updating will NOT trigger the recalculation of shipping cost and tax
   */
  readonly updateAShippingAddress: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        readonly id: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      /** OK */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["orderShippingAddress"];
        };
      };
      /** Bad Request */
      readonly 400: {
        readonly content: {
          readonly "application/json": readonly {
            readonly status?: number;
            readonly message?: string;
          }[];
        };
      };
      /** Not Found */
      readonly 404: {
        readonly content: {
          readonly "application/json": readonly {
            readonly status?: number;
            readonly message?: string;
          }[];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["shippingAddress_Base"];
      };
    };
  };
  /**
   * Gets all shipping quotes associated to an order.
   *
   * This is a read only endpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or via the API return a 204 for this endpoint since a shipping quote is not generated during that process.
   */
  readonly getShippingQuotes: {
    readonly parameters: {
      readonly path: {
        /** ID of the order */
        readonly order_id: components["parameters"]["order_id_path"];
        /** Shipping address ID */
        readonly shipping_address_id: components["parameters"]["shipping_address_id"];
      };
      readonly header: {
        readonly Accept: components["parameters"]["Accept"];
        readonly "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    readonly responses: {
      readonly 200: components["responses"]["shippingQuotes_Resp"];
    };
  };
}
