/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/content/pages": {
    /**
     * Returns a list of content pages.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly get: operations["content-pages-get"];
    /**
     * Updates a content page.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly put: operations["content-pages-put"];
    /**
     * Creates a content page.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
     * </div>
     * </div>
     * </div>
     */
    readonly post: operations["content-pages-post"];
    /**
     * Deletes a page from a store.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
     *
     * </div>
     * </div>
     * </div>
     */
    readonly delete: operations["content-pages-delete"];
  };
}

export interface components {
  readonly schemas: {
    readonly DetailedErrors: { readonly [key: string]: string };
    /** Error payload for the BigCommerce API. */
    readonly BaseError: {
      /** The HTTP status code. */
      readonly status?: number;
      /** The error title describing the particular error. */
      readonly title?: string;
      readonly type?: string;
      readonly instance?: string;
    };
    readonly ErrorResponse: components["schemas"]["BaseError"] & {
      readonly errors?: components["schemas"]["DetailedErrors"];
    };
    /** Data about the response, including pagination and collection totals. */
    readonly CollectionMeta: {
      readonly pagination?: components["schemas"]["Pagination"];
    };
    /** Response payload for the BigCommerce API. */
    readonly PagesCollectionResponse: {
      readonly data?: readonly components["schemas"]["PageFull"][];
      readonly meta?: components["schemas"]["CollectionMeta"];
    };
    /** Response payload for the BigCommerce API. */
    readonly PageResponse: {
      readonly data?: components["schemas"]["PageFull"];
    } & {
      readonly meta?: { readonly [key: string]: any };
    };
    readonly ContactFields: {
      /** Full name of the customer submitting the form. */
      readonly fullname?: string;
      /** Customer’s phone number, as submitted on the form. */
      readonly phone?: string;
      /** Customer’s submitted company name. */
      readonly companyname?: string;
      /** Customer’s submitted order number. */
      readonly orderno?: string;
      /** Customer’s submitted RMA (Return Merchandise Authorization) number. */
      readonly rma?: string;
    };
    readonly PagePut: components["schemas"]["Page"] & {
      /** The unique numeric ID of the page. */
      readonly id: number;
    };
    readonly Page: {
      /** Where the page’s type is a contact form: contact email address that receives messages sent via the form. Must be unique. */
      readonly email?: string;
      readonly meta_title?: string;
      /** HTML or variable that populates this page’s  element, in default/desktop view. Required in a `POST` request if the page type is `raw`. */
      readonly body?: string;
      /** The URL of the RSS feed. Required in a `POST` request if the page type is `rss_feed`. */
      readonly feed?: string;
      /** Required in a `POST` request to create a link if the page type is `link`. */
      readonly link?: string;
      /**
       * Where the page’s type is `contact_form`: comma-separated list of keywords representing the fields enabled in the control panel for storefront display. Possible fields include:
       *
       * |Field|Description|
       * |-|-|
       * |`fullname`|Full name of the customer submitting the form|
       * |`phone`|Customer’s phone number, as submitted on the form|
       * |`companyname`|Customer’s submitted company name|
       * |`orderno`|Customer’s submitted order number|
       * |`rma`|Customer’s submitted RMA (Return Merchandise Authorization) number|
       */
      readonly contact_fields?: string;
      /** Comma-separated list of SEO-relevant keywords to include in the page’s  element. */
      readonly meta_keywords?: string;
      /** Description contained within this page’s  element. */
      readonly meta_description?: string;
      /** Comma-separated list of keywords that shoppers can use to locate this page when searching the store. */
      readonly search_keywords?: string;
      /** Relative URL on the storefront for this page. */
      readonly url?: string;
      /** The Id of the channel where this page should be shown. */
      readonly channel_id?: number;
    } & components["schemas"]["PageBase"];
    /** Common Page properties. */
    readonly PageBase: {
      /** The name of the page. Must be unique. */
      readonly name: string;
      /** Determines the visibility of the page in the storefront’s navigation menu. */
      readonly is_visible?: boolean;
      /** ID of any parent Web page. */
      readonly parent_id?: number;
      /** Determines the order in which the page is displayed on the storefront. (Lower integers specify earlier display.) */
      readonly sort_order?: number;
      /**
       * Determines the type of the page.
       *
       * |Value|Description|
       * |-|-|
       * |`contact_form`|when the store’s contact form is used|
       * |`link`|link to another web address|
       * |`page`|free-text page|
       * |`raw`|raw page|
       * |`rss_feed`|syndicated content from an RSS feed|
       */
      readonly type: string;
      /** Determines whether this page is the storefront’s home page. */
      readonly is_homepage?: boolean;
      /** If `true`, this will be displayed as a home page. */
      readonly is_customers_only?: boolean;
    };
    /** Data about the response, including pagination and collection totals. */
    readonly Pagination: {
      /** Total number of items in the result set. */
      readonly total?: number;
      /** Total number of items in the collection response. */
      readonly count?: number;
      /** The amount of items returned in the collection per page, controlled by the limit parameter. */
      readonly per_page?: number;
      /** The page you are currently on within the collection. */
      readonly current_page?: number;
      /** The total number of pages in the collection. */
      readonly total_pages?: number;
      /** Pagination links for the previous and next parts of the whole collection. */
      readonly links?: {
        /** Link to the previous page returned in the response. */
        readonly previous?: string;
        /** Link to the current page returned in the response. */
        readonly current?: string;
        /** Link to the next page returned in the response. */
        readonly next?: string;
      };
    };
    readonly PageFull: components["schemas"]["Page"] & {
      /** ID of the page. */
      readonly id?: number;
    };
  };
}

export interface operations {
  /**
   * Returns a list of content pages.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly "content-pages-get": {
    readonly parameters: {
      readonly query: {
        /** Channel Id to return only pages for a given Channel. */
        readonly channel_id?: number;
        /** Id of the page. */
        readonly id?: number;
        /** Explicitly fetch Pages by IDs, provided as CSV string. */
        readonly "id:in"?: string;
        /** Name of the page. */
        readonly name?: string;
        /** Partial name of the page. */
        readonly "name:like"?: string;
        /** Number of results to return per page. */
        readonly limit?: number;
        /** Which page number to return, based on the page size. Used to paginate large collections. */
        readonly page?: number;
        /** Indicates whether to include page sub-resources. */
        readonly include?: "body";
      };
    };
    readonly responses: {
      /** An array of pages. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["PagesCollectionResponse"];
        };
      };
    };
  };
  /**
   * Updates a content page.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly "content-pages-put": {
    readonly responses: {
      /**  */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["PageResponse"];
        };
      };
      /** The `Page` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["PagePut"];
      };
    };
  };
  /**
   * Creates a content page.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
   * </div>
   * </div>
   * </div>
   */
  readonly "content-pages-post": {
    readonly responses: {
      /**  */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["PageResponse"];
        };
      };
      /** The `Page` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["Page"];
      };
    };
  };
  /**
   * Deletes a page from a store.
   *
   * <div class="HubBlock--callout">
   * <div class="CalloutBlock--info">
   * <div class="HubBlock-content">
   *
   * > ### Note
   * > This endpoint is in beta. Any comments on performance should be submitted via the **Docs Feedback** button on this page.
   *
   * </div>
   * </div>
   * </div>
   */
  readonly "content-pages-delete": {
    readonly parameters: {
      readonly query: {
        /** List of Redirect IDs to delete explicitly */
        readonly "id:in"?: number;
        /** Channel Id provided to delete all pages for a given Channel */
        readonly channel_id?: number;
      };
    };
    readonly responses: {
      /** An empty response. */
      readonly 204: never;
    };
  };
}
