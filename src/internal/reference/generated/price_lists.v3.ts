/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/pricelists": {
    /** Returns a list of *Price Lists*. Optional parameters can be passed in. */
    readonly get: operations["getPriceListCollection"];
    /**
     * Creates a *Price List*.
     *
     * **Required Fields**
     * * name
     */
    readonly post: operations["createPriceList"];
    /** Deletes a *Price List*. All associated price records are also removed. Optional parameters can be passed in. */
    readonly delete: operations["deletePriceListsByFilter"];
  };
  readonly "/pricelists/{price_list_id}": {
    /** Returns a single *Price List*. */
    readonly get: operations["getPriceList"];
    /** Updates a *Price List*. */
    readonly put: operations["updatePriceList"];
    /** Deletes a *Price List*. All associated price records are also removed. */
    readonly delete: operations["deletePriceList"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
    };
  };
  readonly "/pricelists/{price_list_id}/records": {
    /** Returns a list of *Price List Records* associated with a *Price List*. */
    readonly get: operations["getPriceListRecordCollection"];
    /**
     * Creates or updates *Price List Records*.
     *
     * **Required Fields**
     * * currency
     *
     * **Notes**
     *
     * * Batch updates are supported by this endpoint, meaning that several price objects can be updated in one request. This allows you to do the same work as many individual requests to singleton endpoints
     * * Batch requests support up to 1,000 items per request.
     * * Up to 2 concurrent batch upsert requests are supported with this API. Running more than the allowed concurrent requests in parallel on the **same store** will cause a 429 error and your additional requests will fail. You are encouraged to run requests sequentially with as many records per request as possible, in order to maximize performance.
     */
    readonly put: operations["setPriceListRecordCollection"];
    /** Deletes a *Price List Record*. Deleting the records does not delete the Price List. Optional parameters can be passed in. */
    readonly delete: operations["deletePriceListRecordsByFilter"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
    };
  };
  readonly "/pricelists/{price_list_id}/records/{variant_id}": {
    /** Returns *Price List Records* using the variant ID. Will also contain currency records. */
    readonly get: operations["getPriceListRecordsByVariantId"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
    };
  };
  readonly "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}": {
    /** Returns a *Price List Record* using the currency code. Optional parameters can be used. */
    readonly get: operations["getPriceListRecord"];
    /** Creates or updates a*Price List Record* using the currency code. */
    readonly put: operations["setPriceListRecord"];
    /** Deletes a *Price List Record* using the currency code. */
    readonly delete: operations["deletePriceListRecord"];
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        readonly currency_code: string;
      };
    };
  };
  readonly "/pricelists/assignments": {
    /** Fetches an array of `Price List Assignments` matching a particular Customer Group and Price List and Channel. */
    readonly get: operations["GetListOfPriceListAssignments"];
    /** Creates a batch of `Price List Assignments`. */
    readonly post: operations["CreatePriceListAssignments"];
    /** Deletes one or more `Price List Assignments` objects from BigCommerce using a filter. */
    readonly delete: operations["deletePriceListAssignmentsByFilter"];
  };
}

export interface definitions {
  /** `Price List Assignments` object used in batch create. */
  readonly AssignmentsForRequest: {
    /** Customer group id for assignment. */
    readonly customer_group_id?: number;
    /** Pricelist id for assignment. */
    readonly price_list_id: number;
    /** Channel ID for assignment */
    readonly channel_id?: number;
  };
  /** Errors during batch usage for the BigCommerce API. */
  readonly PriceListAssignmentsBatchErrorResponse: {
    readonly batch_errors?: readonly definitions["PriceListAssignmentsBatchErrorSet"][];
  };
  /** Error during `Price List Assignments` batch POST. Includes data sent in the request and errors. */
  readonly PriceListAssignmentsBatchErrorSet: {
    readonly data?: definitions["PriceListAssignmentsIdentifiers"];
    readonly field_errors?: definitions["DetailedErrors"];
  };
  /** `Price List Assignments` object used in GET response. */
  readonly PriceListAssignmentsIdentifiers: {
    /** The Customer Group with which this price list assignment is associated. A customer_group_id of 0 indicates default pricing for the channel given in the request. */
    readonly customer_group_id?: number;
    /** The Price List with which this price set is associated. */
    readonly price_list_id?: number;
    /** The Channel with which this price set is associated. This field is optional or may be null when a price list applies across channels for the customer_group_id in the assignment. */
    readonly channel_id?: number;
  };
  readonly AssignmentForGetResponse: {
    /** Unique identifier for this price list assignment. */
    readonly id?: number;
    /** Customer group id for assignment. */
    readonly customer_group_id?: number;
    /** Pricelist id for assignment. */
    readonly price_list_id?: number;
    /** Channel ID for assignment */
    readonly channel_id?: number;
  };
  /** Array of the price list assignments matching the filter. The response is paginated. */
  readonly AssignmentsForGetResponse: {
    readonly data?: readonly definitions["AssignmentForGetResponse"][];
    readonly meta?: definitions["CollectionMeta"];
  };
  /** Get All PriceLists. */
  readonly PriceListCollectionResponse: {
    readonly data?: readonly ({
      /** The unique numeric ID of the `Price List`; increments sequentially. */
      readonly id?: number;
      /** The date on which the `Price List` was created. */
      readonly date_created?: string;
      /** The date on which the `Price List` was created. */
      readonly date_modified?: string;
    } & {
      /** The unique name of the Price List. Required in /POST. */
      readonly name: string;
      /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
      readonly active?: boolean;
    })[];
    /** Data about the response, including pagination and collection totals. */
    readonly meta?: {
      /** Data about the response, including pagination and collection totals. */
      readonly pagination?: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
        /** Pagination links for the previous and next parts of the whole collection. */
        readonly links?: {
          /** Link to the previous page returned in the response. */
          readonly previous?: string;
          /** Link to the current page returned in the response. */
          readonly current?: string;
          /** Link to the next page returned in the response. */
          readonly next?: string;
        };
      };
    };
  };
  /**
   * PriceList Reponse returns for:
   *
   * * Create a PriceList
   * * Get a PriceList
   * * Update a PriceList
   */
  readonly PriceListResponse: {
    readonly data?: {
      /** The unique numeric ID of the `Price List`; increments sequentially. */
      readonly id?: number;
      /** The date on which the `Price List` was created. */
      readonly date_created?: string;
      /** The date on which the `Price List` was created. */
      readonly date_modified?: string;
    } & {
      /** The unique name of the Price List. Required in /POST. */
      readonly name: string;
      /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
      readonly active?: boolean;
    };
    /** Empty meta object; may be used later. */
    readonly meta?: { readonly [key: string]: any };
  };
  /** Common Price List properties. */
  readonly PriceListBase: {
    /** The unique name of the Price List. Required in /POST. */
    readonly name: string;
    /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
    readonly active?: boolean;
  };
  readonly PriceList: {
    /** The unique numeric ID of the `Price List`; increments sequentially. */
    readonly id?: number;
    /** The date on which the `Price List` was created. */
    readonly date_created?: string;
    /** The date on which the `Price List` was created. */
    readonly date_modified?: string;
  } & {
    /** The unique name of the Price List. Required in /POST. */
    readonly name: string;
    /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
    readonly active?: boolean;
  };
  /** Creates a Price List. */
  readonly PriceListPost: {
    /** The unique name of the Price List. Required in /POST. */
    readonly name: string;
    /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
    readonly active?: boolean;
  };
  /** Update a PriceList */
  readonly PriceListPut: {
    /** The unique name of the Price List. Required in /POST. */
    readonly name: string;
    /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
    readonly active?: boolean;
  };
  /**
   * PriceRecord Collection Response returns for:
   * * Get All PriceList Records
   * * Get PriceList Records by Variant Id
   */
  readonly PriceRecordCollectionResponse: {
    readonly data?: readonly ({
      /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
      readonly calculated_price?: number;
      /** The date on which the Price entry was created. */
      readonly date_created?: string;
      /** The date on which the Price entry was created. */
      readonly date_modified?: string;
      /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
      readonly product_id?: number;
    } & {
      /** The Price List with which this price set is associated. */
      readonly price_list_id?: number;
      /** The variant with which this price set is associated. Either variant_id or sku is required. */
      readonly variant_id?: number;
      /** The variant with which this price set is associated. Either sku or variant_id is required. */
      readonly sku?: string;
      /** The 3-letter currency code with which this price set is associated. */
      readonly currency?: string;
    } & {
      /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
      readonly price?: number;
      /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
      readonly sale_price?: number;
      /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
      readonly retail_price?: number;
      /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
      readonly map_price?: number;
      readonly bulk_pricing_tiers?: readonly {
        /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
        readonly quantity_min?: number;
        /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
        readonly quantity_max?: number;
        /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
        readonly type?: "fixed" | "price" | "percent";
        /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
        readonly amount?: number;
      }[];
      /** The SKU code associated with this `Price Record` if requested and it exists. */
      readonly sku?: string;
    })[];
    /** Data about the response, including pagination and collection totals. */
    readonly meta?: {
      /** Data about the response, including pagination and collection totals. */
      readonly pagination?: {
        /** Total number of items in the result set. */
        readonly total?: number;
        /** Total number of items in the collection response. */
        readonly count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        readonly per_page?: number;
        /** The page you are currently on within the collection. */
        readonly current_page?: number;
        /** The total number of pages in the collection. */
        readonly total_pages?: number;
        /** Pagination links for the previous and next parts of the whole collection. */
        readonly links?: {
          /** Link to the previous page returned in the response. */
          readonly previous?: string;
          /** Link to the current page returned in the response. */
          readonly current?: string;
          /** Link to the next page returned in the response. */
          readonly next?: string;
        };
      };
    };
  };
  /** Response payload for the BigCommerce API. */
  readonly PriceRecordResponse: {
    /** The Price Record object. */
    readonly data?: {
      /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
      readonly calculated_price?: number;
      /** The date on which the Price entry was created. */
      readonly date_created?: string;
      /** The date on which the Price entry was created. */
      readonly date_modified?: string;
      /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
      readonly product_id?: number;
    } & {
      /** The Price List with which this price set is associated. */
      readonly price_list_id?: number;
      /** The variant with which this price set is associated. Either variant_id or sku is required. */
      readonly variant_id?: number;
      /** The variant with which this price set is associated. Either sku or variant_id is required. */
      readonly sku?: string;
      /** The 3-letter currency code with which this price set is associated. */
      readonly currency?: string;
    } & {
      /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
      readonly price?: number;
      /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
      readonly sale_price?: number;
      /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
      readonly retail_price?: number;
      /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
      readonly map_price?: number;
      readonly bulk_pricing_tiers?: readonly {
        /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
        readonly quantity_min?: number;
        /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
        readonly quantity_max?: number;
        /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
        readonly type?: "fixed" | "price" | "percent";
        /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
        readonly amount?: number;
      }[];
      /** The SKU code associated with this `Price Record` if requested and it exists. */
      readonly sku?: string;
    };
    /** Empty meta object; may be used later. */
    readonly meta?: { readonly [key: string]: any };
  };
  /** Common Price Record properties. */
  readonly PriceRecordBase: {
    /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
    readonly price?: number;
    /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
    readonly sale_price?: number;
    /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
    readonly retail_price?: number;
    /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
    readonly map_price?: number;
    readonly bulk_pricing_tiers?: readonly {
      /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
      readonly quantity_min?: number;
      /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
      readonly quantity_max?: number;
      /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
      readonly type?: "fixed" | "price" | "percent";
      /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
      readonly amount?: number;
    }[];
    /** The SKU code associated with this `Price Record` if requested and it exists. */
    readonly sku?: string;
  };
  /** The Price Record object. */
  readonly PriceRecord: {
    /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
    readonly calculated_price?: number;
    /** The date on which the Price entry was created. */
    readonly date_created?: string;
    /** The date on which the Price entry was created. */
    readonly date_modified?: string;
    /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
    readonly product_id?: number;
  } & {
    /** The Price List with which this price set is associated. */
    readonly price_list_id?: number;
    /** The variant with which this price set is associated. Either variant_id or sku is required. */
    readonly variant_id?: number;
    /** The variant with which this price set is associated. Either sku or variant_id is required. */
    readonly sku?: string;
    /** The 3-letter currency code with which this price set is associated. */
    readonly currency?: string;
  } & {
    /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
    readonly price?: number;
    /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
    readonly sale_price?: number;
    /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
    readonly retail_price?: number;
    /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
    readonly map_price?: number;
    readonly bulk_pricing_tiers?: readonly {
      /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
      readonly quantity_min?: number;
      /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
      readonly quantity_max?: number;
      /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
      readonly type?: "fixed" | "price" | "percent";
      /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
      readonly amount?: number;
    }[];
    /** The SKU code associated with this `Price Record` if requested and it exists. */
    readonly sku?: string;
  };
  readonly BulkPricingTier: {
    /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
    readonly quantity_min?: number;
    /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
    readonly quantity_max?: number;
    /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
    readonly type?: "fixed" | "price" | "percent";
    /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
    readonly amount?: number;
  };
  readonly PriceRecordPut: {
    /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
    readonly price?: number;
    /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
    readonly sale_price?: number;
    /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
    readonly retail_price?: number;
    /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
    readonly map_price?: number;
    readonly bulk_pricing_tiers?: readonly {
      /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
      readonly quantity_min?: number;
      /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
      readonly quantity_max?: number;
      /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
      readonly type?: "fixed" | "price" | "percent";
      /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
      readonly amount?: number;
    }[];
    /** The SKU code associated with this `Price Record` if requested and it exists. */
    readonly sku?: string;
  };
  readonly PriceRecordCollectionPut: readonly ({
    /** The variant with which this price set is associated. Either variant_id or sku is required. */
    readonly variant_id?: number;
    /** The sku for the variant with which this price set is associated.  Either sku or variant_id is required. */
    readonly sku?: string;
    /** The 3-letter currency code with which this price set is associated. */
    readonly currency?: string;
  } & {
    /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
    readonly price?: number;
    /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
    readonly sale_price?: number;
    /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
    readonly retail_price?: number;
    /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
    readonly map_price?: number;
    readonly bulk_pricing_tiers?: readonly {
      /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
      readonly quantity_min?: number;
      /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
      readonly quantity_max?: number;
      /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
      readonly type?: "fixed" | "price" | "percent";
      /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
      readonly amount?: number;
    }[];
    /** The SKU code associated with this `Price Record` if requested and it exists. */
    readonly sku?: string;
  })[];
  /** Price Record object used in batch create or update. */
  readonly PriceRecordBatchItem: {
    /** The variant with which this price set is associated. Either variant_id or sku is required. */
    readonly variant_id?: number;
    /** The sku for the variant with which this price set is associated.  Either sku or variant_id is required. */
    readonly sku?: string;
    /** The 3-letter currency code with which this price set is associated. */
    readonly currency?: string;
  } & {
    /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
    readonly price?: number;
    /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
    readonly sale_price?: number;
    /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
    readonly retail_price?: number;
    /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
    readonly map_price?: number;
    readonly bulk_pricing_tiers?: readonly {
      /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
      readonly quantity_min?: number;
      /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
      readonly quantity_max?: number;
      /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
      readonly type?: "fixed" | "price" | "percent";
      /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
      readonly amount?: number;
    }[];
    /** The SKU code associated with this `Price Record` if requested and it exists. */
    readonly sku?: string;
  };
  /** Price Record object used in batch create or update. */
  readonly PriceRecordIdentifiers: {
    /** The Price List with which this price set is associated. */
    readonly price_list_id?: number;
    /** The variant with which this price set is associated. Either variant_id or sku is required. */
    readonly variant_id?: number;
    /** The variant with which this price set is associated. Either sku or variant_id is required. */
    readonly sku?: string;
    /** The 3-letter currency code with which this price set is associated. */
    readonly currency?: string;
  };
  /** Empty object for Success case for Batch API. */
  readonly SuccessBatchResponse: { readonly [key: string]: any };
  /** Errors during batch usage for the BigCommerce API. */
  readonly PriceRecordBatchErrorResponse: {
    readonly batch_errors?: readonly {
      /** Price Record object used in batch create or update. */
      readonly data?: {
        /** The Price List with which this price set is associated. */
        readonly price_list_id?: number;
        /** The variant with which this price set is associated. Either variant_id or sku is required. */
        readonly variant_id?: number;
        /** The variant with which this price set is associated. Either sku or variant_id is required. */
        readonly sku?: string;
        /** The 3-letter currency code with which this price set is associated. */
        readonly currency?: string;
      };
      readonly field_errors?: { readonly [key: string]: string };
    }[];
  };
  /** No-content response for the BigCommerce API. */
  readonly NoContent: {
    /** 204 HTTP status code. */
    readonly status?: number;
    /** The error title describing the situation. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  /** Error during Price Record batch PUT.  Includes data sent in the request and errors. */
  readonly PriceRecordBatchErrorSet: {
    /** Price Record object used in batch create or update. */
    readonly data?: {
      /** The Price List with which this price set is associated. */
      readonly price_list_id?: number;
      /** The variant with which this price set is associated. Either variant_id or sku is required. */
      readonly variant_id?: number;
      /** The variant with which this price set is associated. Either sku or variant_id is required. */
      readonly sku?: string;
      /** The 3-letter currency code with which this price set is associated. */
      readonly currency?: string;
    };
    readonly field_errors?: { readonly [key: string]: string };
  };
  /** Data about the response, including pagination and collection totals. */
  readonly CollectionMeta: {
    /** Data about the response, including pagination and collection totals. */
    readonly pagination?: {
      /** Total number of items in the result set. */
      readonly total?: number;
      /** Total number of items in the collection response. */
      readonly count?: number;
      /** The amount of items returned in the collection per page, controlled by the limit parameter. */
      readonly per_page?: number;
      /** The page you are currently on within the collection. */
      readonly current_page?: number;
      /** The total number of pages in the collection. */
      readonly total_pages?: number;
      /** Pagination links for the previous and next parts of the whole collection. */
      readonly links?: {
        /** Link to the previous page returned in the response. */
        readonly previous?: string;
        /** Link to the current page returned in the response. */
        readonly current?: string;
        /** Link to the next page returned in the response. */
        readonly next?: string;
      };
    };
  };
  /** Data about the response, including pagination and collection totals. */
  readonly Pagination: {
    /** Total number of items in the result set. */
    readonly total?: number;
    /** Total number of items in the collection response. */
    readonly count?: number;
    /** The amount of items returned in the collection per page, controlled by the limit parameter. */
    readonly per_page?: number;
    /** The page you are currently on within the collection. */
    readonly current_page?: number;
    /** The total number of pages in the collection. */
    readonly total_pages?: number;
    /** Pagination links for the previous and next parts of the whole collection. */
    readonly links?: {
      /** Link to the previous page returned in the response. */
      readonly previous?: string;
      /** Link to the current page returned in the response. */
      readonly current?: string;
      /** Link to the next page returned in the response. */
      readonly next?: string;
    };
  };
  /** Empty meta object; may be used later. */
  readonly Meta: { readonly [key: string]: any };
  readonly ErrorResponse: {
    /** The HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  } & {
    readonly errors?: { readonly [key: string]: string };
  };
  /** Error payload for the BigCommerce API. */
  readonly BaseError: {
    /** The HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  readonly DetailedErrors: { readonly [key: string]: string };
  /** Error payload for the BigCommerce API. */
  readonly NotFound: {
    /** 404 HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  /** Batch of price list assignments. */
  readonly CreateBatchPriceListAssignmentsRequest: readonly definitions["AssignmentsForRequest"][];
}

export interface parameters {
  /** Filter items by id. */
  readonly FilterIdParam: number;
  /** Filter items by sku. */
  readonly FilterSkuParam: string;
  /** A comma-separated list of ids of `Product`s whose prices were requested. */
  readonly FilterProductIdParam: string;
  /** Filter items by name. */
  readonly FilterNameParam: string;
  /** Filter items by price. */
  readonly FilterPriceParam: number;
  /** Filter items by sale_price. */
  readonly FilterSalePriceParam: number;
  /** Filter items by retail_price. */
  readonly FilterRetailPriceParam: number;
  /** Filter items by map_price. */
  readonly FilterMapPriceParam: number;
  /** Filter items by calculated_price. */
  readonly FilterCalculatedPriceParam: number;
  /** ID of the variant on a product, or on an associated Price List Record. */
  readonly VariantIdParam: number;
  /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
  readonly FilterDateModifiedParam: string;
  /** Filter items by date_created. */
  readonly FilterDateCreatedParam: string;
  /** Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. */
  readonly FilterIncludePriceRecordParam: "bulk_pricing_tiers" | "sku";
  /** Filter items by currency. */
  readonly FilterCurrencyParam: string;
  /** Specifies the page number in a limited (paginated) list of products. */
  readonly PageParam: number;
  /** Controls the number of items per page in a limited (paginated) list of products. */
  readonly LimitParam: number;
  /** The ID of the `Price List` requested. */
  readonly PriceListIdParam: number;
  /** The currency code associated with the price record being acted upon. */
  readonly PriceRecordCurrencyParam: string;
  /** The ID of the `Variant` whose prices were requested. */
  readonly FilterVariantIdParam: number;
  readonly Accept: string;
  readonly "Content-Type": string;
  /** The ID of the `Price List Assignment`. */
  readonly FilterAssignmentIdParam: number;
  /** The ID of the `Price List`. */
  readonly FilterPriceListIdParam: number;
  /** The ID of the `Customer Group`. */
  readonly FilterCustomerGroupIdParam: number;
  /** The ID of the `Channel`. */
  readonly FilterChannelIdParam: number;
}

export interface operations {
  /** Returns a list of *Price Lists*. Optional parameters can be passed in. */
  readonly getPriceListCollection: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: number;
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by date_created. */
        readonly date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        readonly date_modified?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        readonly "id:in"?: readonly any[];
        readonly "name:like"?: readonly any[];
        readonly "date_created:max"?: string;
        readonly "date_created:min"?: string;
        readonly "date_modified:max"?: string;
        readonly "date_modified:min"?: string;
      };
      readonly header: {
        readonly "Content-Type"?: string;
        readonly Accept?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /** The unique numeric ID of the `Price List`; increments sequentially. */
            readonly id?: number;
            /** The date on which the `Price List` was created. */
            readonly date_created?: string;
            /** The date on which the `Price List` was created. */
            readonly date_modified?: string;
          } & {
            /** The unique name of the Price List. Required in /POST. */
            readonly name: string;
            /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
            readonly active?: boolean;
          })[];
          /** Data about the response, including pagination and collection totals. */
          readonly meta?: {
            /** Data about the response, including pagination and collection totals. */
            readonly pagination?: {
              /** Total number of items in the result set. */
              readonly total?: number;
              /** Total number of items in the collection response. */
              readonly count?: number;
              /** The amount of items returned in the collection per page, controlled by the limit parameter. */
              readonly per_page?: number;
              /** The page you are currently on within the collection. */
              readonly current_page?: number;
              /** The total number of pages in the collection. */
              readonly total_pages?: number;
              /** Pagination links for the previous and next parts of the whole collection. */
              readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Creates a *Price List*.
   *
   * **Required Fields**
   * * name
   */
  readonly createPriceList: {
    readonly parameters: {
      readonly body: {
        readonly PriceList: {
          /** The unique name of the Price List. Required in /POST. */
          readonly name: string;
          /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
          readonly active?: boolean;
        };
      };
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The unique numeric ID of the `Price List`; increments sequentially. */
            readonly id?: number;
            /** The date on which the `Price List` was created. */
            readonly date_created?: string;
            /** The date on which the `Price List` was created. */
            readonly date_modified?: string;
          } & {
            /** The unique name of the Price List. Required in /POST. */
            readonly name: string;
            /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
            readonly active?: boolean;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** `Price List` was in conflict with another Price List. This is the result of duplicate unique values, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
      /** `Price List` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** Deletes a *Price List*. All associated price records are also removed. Optional parameters can be passed in. */
  readonly deletePriceListsByFilter: {
    readonly parameters: {
      readonly query: {
        /** Filter items by id. */
        readonly id?: number;
        /** Filter items by name. */
        readonly name?: string;
      };
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a single *Price List*. */
  readonly getPriceList: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
      readonly query: {
        /** Filter items by id. */
        readonly id?: number;
        /** Filter items by name. */
        readonly name?: string;
        /** Filter items by date_created. */
        readonly date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        readonly date_modified?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** Common Price List properties. */
          readonly data?: {
            /** The unique numeric ID of the `Price List`; increments sequentially. */
            readonly id?: number;
            /** The date on which the `Price List` was created. */
            readonly date_created?: string;
            /** The date on which the `Price List` was created. */
            readonly date_modified?: string;
            /** The unique name of the Price List. Required in /POST. */
            readonly name: string;
            /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
            readonly active?: boolean;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
    };
  };
  /** Updates a *Price List*. */
  readonly updatePriceList: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
      readonly body: {
        readonly PriceList: {
          /** The unique name of the Price List. Required in /POST. */
          readonly name: string;
          /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
          readonly active?: boolean;
        };
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: {
            /** The unique numeric ID of the `Price List`; increments sequentially. */
            readonly id?: number;
            /** The date on which the `Price List` was created. */
            readonly date_created?: string;
            /** The date on which the `Price List` was created. */
            readonly date_modified?: string;
          } & {
            /** The unique name of the Price List. Required in /POST. */
            readonly name: string;
            /** Whether or not this `Price List` and its prices are active.  Defaults to `true`. */
            readonly active?: boolean;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** `Price List` was in conflict with another Price List. This is the result of duplicate unique values, such as `name`. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
      /** `Price List` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** Deletes a *Price List*. All associated price records are also removed. */
  readonly deletePriceList: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Returns a list of *Price List Records* associated with a *Price List*. */
  readonly getPriceListRecordCollection: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
      readonly query: {
        /** The ID of the `Variant` whose prices were requested. */
        readonly "variant_id:in"?: parameters["FilterVariantIdParam"];
        /** A comma-separated list of ids of `Product`s whose prices were requested. */
        readonly "product_id:in"?: parameters["FilterProductIdParam"];
        /** Filter items by currency. */
        readonly currency?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. */
        readonly include?: "bulk_pricing_tiers" | "sku";
        /** Filter items by price. */
        readonly price?: number;
        /** Filter items by sale_price. */
        readonly sale_price?: number;
        /** Filter items by retail_price. */
        readonly retail_price?: number;
        /** Filter items by map_price. */
        readonly map_price?: number;
        /** Filter items by calculated_price. */
        readonly calculated_price?: number;
        /** Filter items by date_created. */
        readonly date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        readonly date_modified?: string;
        /** Filter items by sku. */
        readonly sku?: string;
        readonly "sku:in"?: readonly any[];
        readonly "currency:in"?: readonly any[];
        readonly "price:max"?: number;
        readonly "price:min"?: number;
        readonly "sale_price:max"?: number;
        readonly "sale_price:min"?: number;
        readonly "retail_price:max"?: number;
        readonly "retail_price:min"?: number;
        readonly "map_price:max"?: number;
        readonly "map_price:min"?: number;
        readonly "calculated_price:max"?: number;
        readonly "calculated_price:min"?: number;
        readonly "date_created:max"?: string;
        readonly "date_created:min"?: string;
        readonly "date_modified:max"?: string;
        readonly "date_modified:min"?: string;
      };
      readonly header: {
        readonly "Content-Type"?: string;
        readonly Accept?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
            readonly calculated_price?: number;
            /** The date on which the Price entry was created. */
            readonly date_created?: string;
            /** The date on which the Price entry was created. */
            readonly date_modified?: string;
            /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
            readonly product_id?: number;
          } & {
            /** The Price List with which this price set is associated. */
            readonly price_list_id?: number;
            /** The variant with which this price set is associated. Either variant_id or sku is required. */
            readonly variant_id?: number;
            /** The variant with which this price set is associated. Either sku or variant_id is required. */
            readonly sku?: string;
            /** The 3-letter currency code with which this price set is associated. */
            readonly currency?: string;
          } & {
            /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
            readonly price?: number;
            /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
            readonly sale_price?: number;
            /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
            readonly retail_price?: number;
            /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
            readonly map_price?: number;
            readonly bulk_pricing_tiers?: readonly {
              /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
              readonly quantity_min?: number;
              /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
              readonly quantity_max?: number;
              /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
              readonly type?: "fixed" | "price" | "percent";
              /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
              readonly amount?: number;
            }[];
            /** The SKU code associated with this `Price Record` if requested and it exists. */
            readonly sku?: string;
          })[];
          /** Data about the response, including pagination and collection totals. */
          readonly meta?: {
            /** Data about the response, including pagination and collection totals. */
            readonly pagination?: {
              /** Total number of items in the result set. */
              readonly total?: number;
              /** Total number of items in the collection response. */
              readonly count?: number;
              /** The amount of items returned in the collection per page, controlled by the limit parameter. */
              readonly per_page?: number;
              /** The page you are currently on within the collection. */
              readonly current_page?: number;
              /** The total number of pages in the collection. */
              readonly total_pages?: number;
              /** Pagination links for the previous and next parts of the whole collection. */
              readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Creates or updates *Price List Records*.
   *
   * **Required Fields**
   * * currency
   *
   * **Notes**
   *
   * * Batch updates are supported by this endpoint, meaning that several price objects can be updated in one request. This allows you to do the same work as many individual requests to singleton endpoints
   * * Batch requests support up to 1,000 items per request.
   * * Up to 2 concurrent batch upsert requests are supported with this API. Running more than the allowed concurrent requests in parallel on the **same store** will cause a 429 error and your additional requests will fail. You are encouraged to run requests sequentially with as many records per request as possible, in order to maximize performance.
   */
  readonly setPriceListRecordCollection: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
      readonly header: {
        /** Header that determines whether the Batch API operates in strict mode or not.  Strict mode will reject the entire request if any item in the batch has an error. */
        readonly "X-Strict-Mode"?: number;
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
      readonly body: {
        readonly PriceRecordBatch: readonly ({
          /** The variant with which this price set is associated. Either variant_id or sku is required. */
          readonly variant_id?: number;
          /** The sku for the variant with which this price set is associated.  Either sku or variant_id is required. */
          readonly sku?: string;
          /** The 3-letter currency code with which this price set is associated. */
          readonly currency?: string;
        } & {
          /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
          readonly price?: number;
          /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
          readonly sale_price?: number;
          /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
          readonly retail_price?: number;
          /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
          readonly map_price?: number;
          readonly bulk_pricing_tiers?: readonly {
            /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
            readonly quantity_min?: number;
            /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
            readonly quantity_max?: number;
            /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
            readonly type?: "fixed" | "price" | "percent";
            /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
            readonly amount?: number;
          }[];
          /** The SKU code associated with this `Price Record` if requested and it exists. */
          readonly sku?: string;
        })[];
      };
    };
    readonly responses: {
      /** Success response for batch PUT of `Price Records`. */
      readonly 200: {
        readonly schema: { readonly [key: string]: any };
      };
      /** Error response for batch PUT of `Price Records`.  May include errors during partial update in non-strict mode. */
      readonly 422: {
        readonly schema: {
          readonly batch_errors?: readonly {
            /** Price Record object used in batch create or update. */
            readonly data?: {
              /** The Price List with which this price set is associated. */
              readonly price_list_id?: number;
              /** The variant with which this price set is associated. Either variant_id or sku is required. */
              readonly variant_id?: number;
              /** The variant with which this price set is associated. Either sku or variant_id is required. */
              readonly sku?: string;
              /** The 3-letter currency code with which this price set is associated. */
              readonly currency?: string;
            };
            readonly field_errors?: { readonly [key: string]: string };
          }[];
        };
      };
    };
  };
  /** Deletes a *Price List Record*. Deleting the records does not delete the Price List. Optional parameters can be passed in. */
  readonly deletePriceListRecordsByFilter: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
      };
      readonly query: {
        /** The ID of the `Variant` whose prices were requested. */
        readonly "variant_id:in"?: parameters["FilterVariantIdParam"];
      };
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 204: {
        readonly schema: {
          /** 204 HTTP status code. */
          readonly status?: number;
          /** The error title describing the situation. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
    };
  };
  /** Returns *Price List Records* using the variant ID. Will also contain currency records. */
  readonly getPriceListRecordsByVariantId: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
      };
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly ({
            /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
            readonly calculated_price?: number;
            /** The date on which the Price entry was created. */
            readonly date_created?: string;
            /** The date on which the Price entry was created. */
            readonly date_modified?: string;
            /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
            readonly product_id?: number;
          } & {
            /** The Price List with which this price set is associated. */
            readonly price_list_id?: number;
            /** The variant with which this price set is associated. Either variant_id or sku is required. */
            readonly variant_id?: number;
            /** The variant with which this price set is associated. Either sku or variant_id is required. */
            readonly sku?: string;
            /** The 3-letter currency code with which this price set is associated. */
            readonly currency?: string;
          } & {
            /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
            readonly price?: number;
            /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
            readonly sale_price?: number;
            /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
            readonly retail_price?: number;
            /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
            readonly map_price?: number;
            readonly bulk_pricing_tiers?: readonly {
              /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
              readonly quantity_min?: number;
              /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
              readonly quantity_max?: number;
              /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
              readonly type?: "fixed" | "price" | "percent";
              /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
              readonly amount?: number;
            }[];
            /** The SKU code associated with this `Price Record` if requested and it exists. */
            readonly sku?: string;
          })[];
          /** Data about the response, including pagination and collection totals. */
          readonly meta?: {
            /** Data about the response, including pagination and collection totals. */
            readonly pagination?: {
              /** Total number of items in the result set. */
              readonly total?: number;
              /** Total number of items in the collection response. */
              readonly count?: number;
              /** The amount of items returned in the collection per page, controlled by the limit parameter. */
              readonly per_page?: number;
              /** The page you are currently on within the collection. */
              readonly current_page?: number;
              /** The total number of pages in the collection. */
              readonly total_pages?: number;
              /** Pagination links for the previous and next parts of the whole collection. */
              readonly links?: {
                /** Link to the previous page returned in the response. */
                readonly previous?: string;
                /** Link to the current page returned in the response. */
                readonly current?: string;
                /** Link to the next page returned in the response. */
                readonly next?: string;
              };
            };
          };
        };
      };
    };
  };
  /** Returns a *Price List Record* using the currency code. Optional parameters can be used. */
  readonly getPriceListRecord: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        readonly currency_code: string;
      };
      readonly query: {
        /** Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. */
        readonly include?: "bulk_pricing_tiers" | "sku";
      };
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** The Price Record object. */
          readonly data?: {
            /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
            readonly calculated_price?: number;
            /** The date on which the Price entry was created. */
            readonly date_created?: string;
            /** The date on which the Price entry was created. */
            readonly date_modified?: string;
            /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
            readonly product_id?: number;
          } & {
            /** The Price List with which this price set is associated. */
            readonly price_list_id?: number;
            /** The variant with which this price set is associated. Either variant_id or sku is required. */
            readonly variant_id?: number;
            /** The variant with which this price set is associated. Either sku or variant_id is required. */
            readonly sku?: string;
            /** The 3-letter currency code with which this price set is associated. */
            readonly currency?: string;
          } & {
            /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
            readonly price?: number;
            /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
            readonly sale_price?: number;
            /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
            readonly retail_price?: number;
            /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
            readonly map_price?: number;
            readonly bulk_pricing_tiers?: readonly {
              /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
              readonly quantity_min?: number;
              /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
              readonly quantity_max?: number;
              /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
              readonly type?: "fixed" | "price" | "percent";
              /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
              readonly amount?: number;
            }[];
            /** The SKU code associated with this `Price Record` if requested and it exists. */
            readonly sku?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
    };
  };
  /** Creates or updates a*Price List Record* using the currency code. */
  readonly setPriceListRecord: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        readonly currency_code: string;
      };
      readonly body: {
        readonly PriceRecord: {
          /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
          readonly price?: number;
          /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
          readonly sale_price?: number;
          /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
          readonly retail_price?: number;
          /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
          readonly map_price?: number;
          readonly bulk_pricing_tiers?: readonly {
            /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
            readonly quantity_min?: number;
            /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
            readonly quantity_max?: number;
            /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
            readonly type?: "fixed" | "price" | "percent";
            /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
            readonly amount?: number;
          }[];
          /** The SKU code associated with this `Price Record` if requested and it exists. */
          readonly sku?: string;
        };
      };
      readonly header: {
        readonly Accept?: string;
        readonly "Content-Type"?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          /** The Price Record object. */
          readonly data?: {
            /** The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only. */
            readonly calculated_price?: number;
            /** The date on which the Price entry was created. */
            readonly date_created?: string;
            /** The date on which the Price entry was created. */
            readonly date_modified?: string;
            /** The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only. */
            readonly product_id?: number;
          } & {
            /** The Price List with which this price set is associated. */
            readonly price_list_id?: number;
            /** The variant with which this price set is associated. Either variant_id or sku is required. */
            readonly variant_id?: number;
            /** The variant with which this price set is associated. Either sku or variant_id is required. */
            readonly sku?: string;
            /** The 3-letter currency code with which this price set is associated. */
            readonly currency?: string;
          } & {
            /** The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. */
            readonly price?: number;
            /** The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant. */
            readonly sale_price?: number;
            /** The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant. */
            readonly retail_price?: number;
            /** The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant. */
            readonly map_price?: number;
            readonly bulk_pricing_tiers?: readonly {
              /** The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing. */
              readonly quantity_min?: number;
              /** The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing. */
              readonly quantity_max?: number;
              /** The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product. */
              readonly type?: "fixed" | "price" | "percent";
              /** The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier. */
              readonly amount?: number;
            }[];
            /** The SKU code associated with this `Price Record` if requested and it exists. */
            readonly sku?: string;
          };
          /** Empty meta object; may be used later. */
          readonly meta?: { readonly [key: string]: any };
        };
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** 404 HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        };
      };
      /** `Price Record` was in conflict with another price record. This is the result of duplicate unique values. */
      readonly 409: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
      /** `Price Record` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** Deletes a *Price List Record* using the currency code. */
  readonly deletePriceListRecord: {
    readonly parameters: {
      readonly path: {
        /** The ID of the `Price List` requested. */
        readonly price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        readonly variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        readonly currency_code: string;
      };
      readonly header: {
        readonly "Content-Type"?: string;
        readonly Accept?: string;
      };
    };
    readonly responses: {
      readonly 204: never;
    };
  };
  /** Fetches an array of `Price List Assignments` matching a particular Customer Group and Price List and Channel. */
  readonly GetListOfPriceListAssignments: {
    readonly parameters: {
      readonly query: {
        /** The ID of the `Price List Assignment`. */
        readonly id?: parameters["FilterAssignmentIdParam"];
        /** The ID of the `Price List`. */
        readonly price_list_id?: parameters["FilterPriceListIdParam"];
        /** The ID of the `Customer Group`. */
        readonly customer_group_id?: parameters["FilterCustomerGroupIdParam"];
        /** The ID of the `Channel`. */
        readonly channel_id?: parameters["FilterChannelIdParam"];
        readonly "id:in"?: readonly any[];
        readonly "customer_group_id:in"?: readonly any[];
        readonly "price_list_id:in"?: readonly any[];
        readonly "channel_id:in"?: readonly any[];
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
      };
    };
    readonly responses: {
      /** An array of price list assignments and metadata. */
      readonly 200: {
        readonly schema: definitions["AssignmentsForGetResponse"];
      };
    };
  };
  /** Creates a batch of `Price List Assignments`. */
  readonly CreatePriceListAssignments: {
    readonly parameters: {
      readonly body: {
        /** A BigCommerce `Price List Assignments` request. */
        readonly PriceListAssignmentBatch: definitions["CreateBatchPriceListAssignmentsRequest"];
      };
    };
    readonly responses: {
      /** Success response for batch POST of `Price List Assignments`. */
      readonly 200: {
        readonly schema: definitions["SuccessBatchResponse"];
      };
      /** Error response for batch POST of `Price List Assignments`. Includes the errors for each reference id. */
      readonly 422: {
        readonly schema: definitions["PriceListAssignmentsBatchErrorResponse"];
      };
    };
  };
  /** Deletes one or more `Price List Assignments` objects from BigCommerce using a filter. */
  readonly deletePriceListAssignmentsByFilter: {
    readonly parameters: {
      readonly query: {
        /** The ID of the `Price List Assignment`. */
        readonly id?: parameters["FilterAssignmentIdParam"];
        /** The ID of the `Price List`. */
        readonly price_list_id?: parameters["FilterPriceListIdParam"];
        /** The ID of the `Customer Group`. */
        readonly customer_group_id?: parameters["FilterCustomerGroupIdParam"];
        /** The ID of the `Channel`. */
        readonly channel_id?: parameters["FilterChannelIdParam"];
      };
    };
    readonly responses: {
      /** An empty response. */
      readonly 204: {
        readonly schema: definitions["NoContent"];
      };
    };
  };
}
