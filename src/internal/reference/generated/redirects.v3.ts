/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/storefront/redirects": {
    /** Returns a collection of the store's 301 redirects across all sites. */
    readonly get: operations["GetRedirects"];
    /** Upserts new redirect data across all storefronts. */
    readonly put: operations["UpsertRedirects"];
    /** Deletes redirects. */
    readonly delete: operations["DeleteRedirects"];
  };
}

export interface definitions {
  readonly Error: {
    readonly status?: number;
    readonly message?: string;
  };
  readonly ErrorResponse400: {
    readonly schema?: definitions["Error"];
  };
  readonly ErrorResponse404: {
    readonly schema?: definitions["Error"];
  };
  readonly ErrorResponse409: {
    readonly schema?: definitions["Error"];
  };
  readonly ErrorResponse422: {
    readonly schema?: definitions["Error"];
  };
  /** Data necessary to create or update a redirect. If there's a conflict on the from_path and site_id, the redirect will be overwritten with new data. */
  readonly "301RedirectUpsert": {
    readonly from_path: string;
    readonly site_id: number;
    readonly to?: definitions["RedirectTo"];
  };
  /** Full detail of a Redirect, optionally including the full destination URL. */
  readonly "301RedirectRead": {
    readonly from_path: string;
    readonly site_id: number;
    readonly to?: definitions["RedirectTo"];
    readonly id?: number;
    /** Full destination URL for the redirect. Must be explicitly included via URL parameter. */
    readonly to_url?: string;
  };
  readonly MetaPaginationObject: {
    readonly pagination?: {
      readonly total?: number;
      readonly count?: number;
      readonly per_page?: number;
      readonly current_page?: number;
      readonly total_pages?: number;
      readonly links?: {
        readonly next?: string;
        readonly current?: string;
      };
    };
  };
  readonly RedirectTo: {
    readonly type?: "product" | "brand" | "category" | "page" | "post" | "url";
    readonly entity_id?: number;
    readonly url?: string;
  };
  readonly DetailedErrors: { readonly [key: string]: string };
  /** Error payload for the BigCommerce API. */
  readonly BaseError: {
    /** The HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  readonly ErrorResponse: definitions["BaseError"] & {
    readonly errors?: definitions["DetailedErrors"];
  };
}

export interface operations {
  /** Returns a collection of the store's 301 redirects across all sites. */
  readonly GetRedirects: {
    readonly parameters: {
      readonly query: {
        /** Filters items by `site_id`. */
        readonly site_id?: number;
        /** Filters items by redirect `id`. Also accepts comma-separated values to filter for multiple redirects. */
        readonly "id:in"?: readonly string[];
        /** Controls the number of items to return per page. */
        readonly limit?: number;
        /** Specifies the page number in a limited (paginated) list of items. Used to paginate large collections. */
        readonly page?: number;
        /** Field name to sort by. Note: Since redirect `id` increments when new redirects are added, you can use that field to sort by redirect create date. */
        readonly sort?: "from_path" | "type" | "site_id";
        /** Sort direction. Acceptable values are `asc`, `desc`. */
        readonly direction?: "asc" | "desc";
        /** Indicates whether to include redirect sub-resources. Only `to_url` is supported. */
        readonly include?: "to_url";
        /** Filters redirects by the specified keyword. Will only search from the beginning of a URL path. For example, `blue` will match `/blue` and `/blue-shirt` ,  **not** `/royal-blue-shirt`. */
        readonly keyword?: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: definitions["301RedirectRead"];
          readonly meta?: definitions["MetaPaginationObject"];
        };
      };
    };
  };
  /** Upserts new redirect data across all storefronts. */
  readonly UpsertRedirects: {
    readonly parameters: {
      readonly body: {
        readonly body?: readonly definitions["301RedirectUpsert"][];
      };
    };
    readonly responses: {
      readonly 201: {
        readonly schema: {
          readonly data?: readonly definitions["301RedirectRead"][];
          readonly meta?: definitions["MetaPaginationObject"];
        };
      };
    };
  };
  /** Deletes redirects. */
  readonly DeleteRedirects: {
    readonly parameters: {
      readonly query: {
        /** List of Redirect IDs to delete explicitly */
        readonly "id:in": readonly number[];
        /** Site ID provided to delete all redirects for a given Site */
        readonly site_id?: number;
      };
    };
    readonly responses: {
      /** No Content */
      readonly 204: never;
    };
  };
}
