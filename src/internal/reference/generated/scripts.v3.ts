/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/content/scripts": {
    /**
     * Returns a list of *Scripts*. Optional parameters can be passed in.
     *
     * This operation will only return scripts generated by the API key and password used to create the script originally.
     */
    readonly get: operations["getScripts"];
    /**
     * Creates a *Script*.
     *
     * **Required Fields**
     * * name
     *
     * **Read Only Fields**
     * * uuid
     *
     * **Notes**
     * * If kind is `src` â€“- Only the `src` property is needed, and you can optionally supply a `load_method`. The `html` field should not be specified.
     * * If kind is `script_tag` -- Only the `script_tag` is needed. The `src` field should not be specified.
     * * Each app can have 10 scripts installed.
     * * Multiple scripts can be created [per call](https://developer.bigcommerce.com/api-docs/store-management/scripts#notes).
     */
    readonly post: operations["createScript"];
  };
  readonly "/content/scripts/{uuid}": {
    /** Returns a single *Script*. */
    readonly get: operations["getScript"];
    /** Updates a *Script*. */
    readonly put: operations["updateScript"];
    /** Deletes a *Script*. */
    readonly delete: operations["deleteScript"];
  };
}

export interface definitions {
  /** Data about the response, including pagination and collection totals. */
  readonly CollectionMeta: {
    /** Data about the response, including pagination and collection totals. */
    readonly pagination?: {
      /** Total number of items in the result set. */
      readonly total?: number;
      /** Total number of items in the collection response. */
      readonly count?: number;
      /** The amount of items returned in the collection per page, controlled by the limit parameter. */
      readonly per_page?: number;
      /** The page you are currently on within the collection. */
      readonly current_page?: number;
      /** The total number of pages in the collection. */
      readonly total_pages?: number;
      /** Pagination links for the previous and next parts of the whole collection. */
      readonly links?: {
        /** Link to the previous page returned in the response. */
        readonly previous?: string;
        /** Link to the current page returned in the response. */
        readonly current?: string;
        /** Link to the next page returned in the response. */
        readonly next?: string;
      };
    };
  };
  /** Data about the response, including pagination and collection totals. */
  readonly Pagination: {
    /** Total number of items in the result set. */
    readonly total?: number;
    /** Total number of items in the collection response. */
    readonly count?: number;
    /** The amount of items returned in the collection per page, controlled by the limit parameter. */
    readonly per_page?: number;
    /** The page you are currently on within the collection. */
    readonly current_page?: number;
    /** The total number of pages in the collection. */
    readonly total_pages?: number;
    /** Pagination links for the previous and next parts of the whole collection. */
    readonly links?: {
      /** Link to the previous page returned in the response. */
      readonly previous?: string;
      /** Link to the current page returned in the response. */
      readonly current?: string;
      /** Link to the next page returned in the response. */
      readonly next?: string;
    };
  };
  /** Empty meta object; may be used later. */
  readonly Meta: { readonly [key: string]: any };
  readonly ErrorResponse: {
    /** The HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  } & {
    readonly errors?: { readonly [key: string]: string };
  };
  /** Error payload for the BigCommerce API. */
  readonly BaseError: {
    /** The HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  readonly DetailedErrors: { readonly [key: string]: string };
  /** Error payload for the BigCommerce API. */
  readonly NotFound: {
    /** 404 HTTP status code. */
    readonly status?: number;
    /** The error title describing the particular error. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  /** No-content response for the BigCommerce API. */
  readonly NoContent: {
    /** 204 HTTP status code. */
    readonly status?: number;
    /** The error title describing the situation. */
    readonly title?: string;
    readonly type?: string;
    readonly instance?: string;
  };
  readonly script_Full: {
    /** The primary identifier. */
    readonly uuid?: string;
    /** The date on which this object was initially created. */
    readonly date_created?: string;
    /** The date on which this object was last updated. */
    readonly date_modified?: string;
  } & definitions["script_Base"];
  readonly script_Post: {
    /** The user-friendly name. */
    readonly name: string;
  } & definitions["script_Base"];
  readonly script_Put: {
    /** The user-friendly name. */
    readonly name?: string;
  } & definitions["script_Base"];
  /** For a list of all locations visit [Scripts Visibility](https://developer.bigcommerce.com/api-docs/storefront/scripts-overview#scripts_scripts-visibility). */
  readonly script_Response: {
    readonly data?: definitions["script_Full"];
    readonly meta?: definitions["Meta"];
  };
  /** For a list of all locations visit [Scripts Visibility](https://developer.bigcommerce.com/api-docs/storefront/scripts-overview#scripts_scripts-visibility). */
  readonly script_responseCollection: {
    readonly data?: readonly definitions["script_Full"][];
    readonly meta?: definitions["CollectionMeta"];
  };
  /** Script properties common to `post`, `put`, and `get` requests. */
  readonly script_Base: {
    /** The user-friendly description. */
    readonly description?: string;
    /** An html string containing exactly one `script` tag. Only present if `kind` is `script_tag`. */
    readonly html?: string;
    /** The `src` attribute of the script to load. Only present if `kind` is `src`. */
    readonly src?: string;
    /** It will enable automatic cleanup of the script when the single click app is uninstalled or OAuth token is revoked. */
    readonly auto_uninstall?: boolean;
    /** The load method to use for the script. Values are `default`, `async`, or `defer`. It determines how the script should be loaded into the page. */
    readonly load_method?: "default" | "async" | "defer";
    /** Where on the page to place the script. Values are `head` or `footer`. */
    readonly location?: "head" | "footer";
    /**
     * Which set of pages the script should load on.
     *
     * Please note that you need to have `Checkout content` scope to use `all_pages` and `checkout`.
     *
     * - The current visibility options are `storefront`, `checkout`, `all_pages` and `order_confirmation`.
     *
     *      `storefront`: All pages that are not `checkout` or `order_confirmation`.
     *
     * For a list of all locations visit [Scripts Visibility](https://developer.bigcommerce.com/api-docs/storefront/scripts-overview#scripts_scripts-visibility).
     */
    readonly visibility?:
      | "storefront"
      | "all_pages"
      | "checkout"
      | "order_confirmation";
    /**
     * What type of script this is.
     *
     * `src` - a `script` tag will be generated with its `src` attribute set to the value of `src`; For scripts that use the src url. By providing a path to the script, we can optimize and serve the script tag automatically for you.
     *
     * `script_tag` - The value of `html` will be injected directly onto the page.
     * For scripts which include a raw HTML script_tag to be inserted into the page. The load_method must be default.
     */
    readonly kind?: "src" | "script_tag";
    /** The client id of the API user that created this script, or blank if created by other means. */
    readonly api_client_id?: string;
    /** What category of script this is for the purposes of GDPR/CCPA compliance. */
    readonly consent_category?:
      | "essential"
      | "functional"
      | "analytics"
      | "targeting";
    /** Indicates whether a script is enabled. */
    readonly enabled?: boolean;
  };
}

export interface parameters {
  /** The identifier for a specific widget template. */
  readonly FilterWidgetTemplateUUIDParam: string;
  /** The kind of widget template. */
  readonly FilterWidgetTemplateKindParam: string;
  /** The identifier for a specific placement. */
  readonly PlacementUUID: string;
  /** The identifier for a specific widget. */
  readonly WidgetUUID: string;
  /** The identifier for a specific script. */
  readonly ScriptUUID: string;
  /** The identifier for a specific widget. */
  readonly FilterWidgetUUIDParam: string;
  /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
  readonly FilterIncludeFieldsParam: string;
  /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
  readonly FilterExcludeFieldsParam: string;
  /** Specifies the page number in a limited (paginated) list of products. */
  readonly PageParam: number;
  /** Controls the number of items per page in a limited (paginated) list of products. */
  readonly LimitParam: number;
  /** Scripts field name to sort by. */
  readonly ScriptsSortKeyParam:
    | "name"
    | "description"
    | "date_created"
    | "date_modified";
  /** Sort direction. Acceptable values are: `asc`, `desc`. */
  readonly DirectionParam: "asc" | "desc";
  /** The identifier for a specific template. */
  readonly TemplateUUID: string;
  /** The template file, for example: `pages/home`. */
  readonly RequiredTemplateFile: string;
  /** The query string associated with a widget's name and description. */
  readonly QueryWidgetsParam: string;
  readonly Accept: string;
  readonly "Content-Type": string;
}

export interface operations {
  /**
   * Returns a list of *Scripts*. Optional parameters can be passed in.
   *
   * This operation will only return scripts generated by the API key and password used to create the script originally.
   */
  readonly getScripts: {
    readonly parameters: {
      readonly query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        readonly page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        readonly limit?: number;
        /** Field name to sort the scripts by. */
        readonly sort?:
          | "name"
          | "description"
          | "date_created"
          | "date_modified";
        /** Sort direction. Acceptable values are: `asc`, `desc`. */
        readonly direction?: "asc" | "desc";
        /** Filters list of scripts by the associated channel_id. */
        readonly "channel_id:in"?: readonly any[];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: {
          readonly data?: readonly definitions["script_Full"][];
          readonly meta?: definitions["CollectionMeta"];
        };
      };
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /**
   * Creates a *Script*.
   *
   * **Required Fields**
   * * name
   *
   * **Read Only Fields**
   * * uuid
   *
   * **Notes**
   * * If kind is `src` â€“- Only the `src` property is needed, and you can optionally supply a `load_method`. The `html` field should not be specified.
   * * If kind is `script_tag` -- Only the `script_tag` is needed. The `src` field should not be specified.
   * * Each app can have 10 scripts installed.
   * * Multiple scripts can be created [per call](https://developer.bigcommerce.com/api-docs/store-management/scripts#notes).
   */
  readonly createScript: {
    readonly parameters: {
      readonly body: {
        readonly scriptBody: definitions["script_Post"];
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["script_Response"];
      };
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** Returns a single *Script*. */
  readonly getScript: {
    readonly parameters: {
      readonly path: {
        /** The identifier for a specific script. */
        readonly uuid: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      /** Success */
      readonly 200: {
        readonly schema: definitions["script_Response"];
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** Updates a *Script*. */
  readonly updateScript: {
    readonly parameters: {
      readonly path: {
        /** The identifier for a specific script. */
        readonly uuid: string;
      };
      readonly body: {
        readonly scriptBody: definitions["script_Put"];
      };
      readonly header: {
        readonly "Content-Type": string;
        readonly Accept: string;
      };
    };
    readonly responses: {
      readonly 200: {
        readonly schema: definitions["script_Response"];
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** Deletes a *Script*. */
  readonly deleteScript: {
    readonly parameters: {
      readonly path: {
        /** The identifier for a specific script. */
        readonly uuid: string;
      };
      readonly header: {
        readonly Accept: string;
        readonly "Content-Type": string;
      };
    };
    readonly responses: {
      readonly 204: {
        readonly schema: definitions["NoContent"];
      };
      /** The resource was not found. */
      readonly 404: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      readonly 422: {
        readonly schema: {
          /** The HTTP status code. */
          readonly status?: number;
          /** The error title describing the particular error. */
          readonly title?: string;
          readonly type?: string;
          readonly instance?: string;
        } & {
          readonly errors?: { readonly [key: string]: string };
        };
      };
    };
  };
}
